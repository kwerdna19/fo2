// This file is auto-generated by @hey-api/openapi-ts

export type GetGuildLeaderboardData = {
	/**
	 * API Key for authentication.
	 */
	xApiKey: unknown;
};

export type GetGuildLeaderboardResponse = Array<{
	/**
	 * The name of the guild.
	 */
	Name?: string;
	/**
	 * The level of the guild.
	 */
	Level?: number;
}>;

export type GetGuildMembersData = {
	/**
	 * Name of the guild for which to retrieve members. The guild name must be between 4 and 18 characters and can only contain alphanumeric characters and spaces.
	 *
	 */
	requestBody: {
		/**
		 * The name of the guild to retrieve members for, adhering to validation rules.
		 *
		 */
		name?: string;
	};
	/**
	 * API Key for authentication.
	 */
	xApiKey: unknown;
};

export type GetGuildMembersResponse = Array<{
	/**
	 * The name of the guild member.
	 */
	Name?: string;
	/**
	 * The sprite image reference of the guild member.
	 */
	Sprite?: string;
	/**
	 * The level of the guild member.
	 */
	Level?: number;
	/**
	 * The name of the guild.
	 */
	GuildName?: string;
	/**
	 * The rank of the guild member within the guild.
	 */
	GuildRank?: string;
}>;

export type GetGuildDetailsData = {
	/**
	 * Name of the guild for which to retrieve details. The guild name must be between 4 and 18 characters and can only contain alphanumeric characters and spaces.
	 *
	 */
	requestBody: {
		/**
		 * The name of the guild to retrieve details for, adhering to validation rules.
		 */
		name?: string;
	};
	/**
	 * API Key for authentication.
	 */
	xApiKey: unknown;
};

export type GetGuildDetailsResponse = {
	/**
	 * The name of the guild.
	 */
	Name?: string;
	/**
	 * The number of members in the guild.
	 */
	NumMembers?: number;
	/**
	 * The total donations made to the guild.
	 */
	TotalDonations?: number;
	/**
	 * The level of the guild.
	 */
	Level?: number;
	/**
	 * The date and time the guild was approved.
	 */
	Approved?: string;
};

export type SearchMarketListingsData = {
	requestBody: {
		/**
		 * Optional filter by item name. Case-insensitive.
		 */
		search_term?: string;
		/**
		 * Criteria for sorting the results. Defaults to 'Listed'.
		 */
		sort_by?: "Price" | "TimeLeft" | "Listed";
		/**
		 * Direction for sorting. Defaults to 'DESC'.
		 */
		sort_direction?: "ASC" | "DESC";
		/**
		 * Page number for pagination, starts from 1.
		 */
		page?: number;
	};
	/**
	 * API key required for endpoint access.
	 */
	xApiKey: string;
};

export type SearchMarketListingsResponse = {
	/**
	 * Array of market listing objects.
	 */
	listings?: Array<{
		/**
		 * Unique identifier for the market listing.
		 */
		Id?: number;
		/**
		 * Identifier for the item definition associated with the listing.
		 */
		ItemDefinitionId?: number;
		/**
		 * Data specific to the item instance in the listing.
		 */
		ItemInstanceData?: {
			[key: string]: unknown;
		};
		/**
		 * Price of the listed item.
		 */
		Price?: number;
		/**
		 * Duration of the listing in days.
		 */
		Duration?: number;
		/**
		 * Timestamp when the item was listed, in milliseconds since the Unix epoch.
		 */
		Listed?: number;
		/**
		 * Most recent sale price for the item from the archive.
		 */
		LastSoldPrice?: number;
	}>;
	/**
	 * Array of item definition objects.
	 */
	itemDefinitions?: Array<{
		/**
		 * Unique identifier for the item definition.
		 */
		id?: number;
		/**
		 * Filename for the sprite associated with the item.
		 */
		sfn?: string;
		/**
		 * Type identifier for the item.
		 */
		ty?: number;
		/**
		 * Subtype identifier for the item.
		 */
		st?: number;
		/**
		 * Quality of the item.
		 */
		q?: number;
		/**
		 * Level requirement for the item.
		 */
		lr?: number;
		/**
		 * Stat requirements for the item.
		 */
		sr?: string;
		/**
		 * Binding type of the item.
		 */
		bt?: string;
		/**
		 * Stats associated with the item.
		 */
		sta?: string;
		/**
		 * Stack size of the item.
		 */
		ss?: number;
		/**
		 * Vendor buy currency for the item.
		 */
		vbc?: string;
		/**
		 * Vendor buy price for the item.
		 */
		vbp?: number;
		/**
		 * Vendor sell currency for the item.
		 */
		vsc?: string;
		/**
		 * Vendor sell price for the item.
		 */
		vsp?: number;
		/**
		 * Translations for the item name and description.
		 */
		t?: {
			[key: string]: {
				/**
				 * Item name in a specific language.
				 */
				n?: string;
				/**
				 * Item description in a specific language.
				 */
				d?: string;
			};
		};
	}>;
	/**
	 * Pagination information.
	 */
	pagination?: {
		/**
		 * Total number of items available across all pages.
		 */
		totalItems?: number;
		/**
		 * Total number of pages available.
		 */
		totalPages?: number;
		/**
		 * Current page number being viewed.
		 */
		currentPage?: number;
		/**
		 * Number of items per page, fixed at 10.
		 */
		itemsPerPage?: number;
	};
};

export type $OpenApiTs = {
	"/api/public/guild/leaderboard": {
		get: {
			req: GetGuildLeaderboardData;
			res: {
				/**
				 * Successfully retrieved the top 10 guilds.
				 */
				200: Array<{
					/**
					 * The name of the guild.
					 */
					Name?: string;
					/**
					 * The level of the guild.
					 */
					Level?: number;
				}>;
				/**
				 * Internal server error. This could be due to database connectivity issues or unexpected server errors.
				 */
				500: unknown;
			};
		};
	};
	"/api/public/guild/members": {
		post: {
			req: GetGuildMembersData;
			res: {
				/**
				 * Successfully retrieved the guild members.
				 */
				200: Array<{
					/**
					 * The name of the guild member.
					 */
					Name?: string;
					/**
					 * The sprite image reference of the guild member.
					 */
					Sprite?: string;
					/**
					 * The level of the guild member.
					 */
					Level?: number;
					/**
					 * The name of the guild.
					 */
					GuildName?: string;
					/**
					 * The rank of the guild member within the guild.
					 */
					GuildRank?: string;
				}>;
				/**
				 * Invalid JSON in request body or the guild name does not meet validation criteria (missing, empty, not between 4 and 18 characters, or contains invalid characters).
				 */
				400: unknown;
				/**
				 * Internal server error. This could be due to database connectivity issues or unexpected server errors.
				 */
				500: unknown;
			};
		};
	};
	"/api/public/guild": {
		post: {
			req: GetGuildDetailsData;
			res: {
				/**
				 * Successfully retrieved the guild details.
				 */
				200: {
					/**
					 * The name of the guild.
					 */
					Name?: string;
					/**
					 * The number of members in the guild.
					 */
					NumMembers?: number;
					/**
					 * The total donations made to the guild.
					 */
					TotalDonations?: number;
					/**
					 * The level of the guild.
					 */
					Level?: number;
					/**
					 * The date and time the guild was approved.
					 */
					Approved?: string;
				};
				/**
				 * Invalid JSON in request body or the guild name does not meet validation criteria (missing, empty, not between 4 and 18 characters, or contains invalid characters).
				 */
				400: unknown;
				/**
				 * Internal server error. This could be due to database connectivity issues or unexpected server errors.
				 */
				500: unknown;
			};
		};
	};
	"/api/public/market/search": {
		post: {
			req: SearchMarketListingsData;
			res: {
				/**
				 * Successfully retrieved market listings and associated item definitions.
				 */
				200: {
					/**
					 * Array of market listing objects.
					 */
					listings?: Array<{
						/**
						 * Unique identifier for the market listing.
						 */
						Id?: number;
						/**
						 * Identifier for the item definition associated with the listing.
						 */
						ItemDefinitionId?: number;
						/**
						 * Data specific to the item instance in the listing.
						 */
						ItemInstanceData?: {
							[key: string]: unknown;
						};
						/**
						 * Price of the listed item.
						 */
						Price?: number;
						/**
						 * Duration of the listing in days.
						 */
						Duration?: number;
						/**
						 * Timestamp when the item was listed, in milliseconds since the Unix epoch.
						 */
						Listed?: number;
						/**
						 * Most recent sale price for the item from the archive.
						 */
						LastSoldPrice?: number;
					}>;
					/**
					 * Array of item definition objects.
					 */
					itemDefinitions?: Array<{
						/**
						 * Unique identifier for the item definition.
						 */
						id?: number;
						/**
						 * Filename for the sprite associated with the item.
						 */
						sfn?: string;
						/**
						 * Type identifier for the item.
						 */
						ty?: number;
						/**
						 * Subtype identifier for the item.
						 */
						st?: number;
						/**
						 * Quality of the item.
						 */
						q?: number;
						/**
						 * Level requirement for the item.
						 */
						lr?: number;
						/**
						 * Stat requirements for the item.
						 */
						sr?: string;
						/**
						 * Binding type of the item.
						 */
						bt?: string;
						/**
						 * Stats associated with the item.
						 */
						sta?: string;
						/**
						 * Stack size of the item.
						 */
						ss?: number;
						/**
						 * Vendor buy currency for the item.
						 */
						vbc?: string;
						/**
						 * Vendor buy price for the item.
						 */
						vbp?: number;
						/**
						 * Vendor sell currency for the item.
						 */
						vsc?: string;
						/**
						 * Vendor sell price for the item.
						 */
						vsp?: number;
						/**
						 * Translations for the item name and description.
						 */
						t?: {
							[key: string]: {
								/**
								 * Item name in a specific language.
								 */
								n?: string;
								/**
								 * Item description in a specific language.
								 */
								d?: string;
							};
						};
					}>;
					/**
					 * Pagination information.
					 */
					pagination?: {
						/**
						 * Total number of items available across all pages.
						 */
						totalItems?: number;
						/**
						 * Total number of pages available.
						 */
						totalPages?: number;
						/**
						 * Current page number being viewed.
						 */
						currentPage?: number;
						/**
						 * Number of items per page, fixed at 10.
						 */
						itemsPerPage?: number;
					};
				};
				/**
				 * Invalid request parameters.
				 */
				400: unknown;
				/**
				 * Internal server error.
				 */
				500: unknown;
			};
		};
	};
};
