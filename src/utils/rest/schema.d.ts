/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/rest/mob": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List "Mob" resources */
        get: operations["list-Mob"];
        put?: never;
        /** @description Create a "Mob" resource */
        post: operations["create-Mob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/mob/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch a "Mob" resource */
        get: operations["fetch-Mob"];
        /** @description Update a "Mob" resource */
        put: operations["update-Mob-put"];
        post?: never;
        /** @description Delete a "Mob" resource */
        delete: operations["delete-Mob"];
        options?: never;
        head?: never;
        /** @description Update a "Mob" resource */
        patch: operations["update-Mob-patch"];
        trace?: never;
    };
    "/api/rest/mob/{id}/drops": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "drops" resource for "Mob" */
        get: operations["fetch-Mob-related-drops"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/mob/{id}/relationships/drops": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "drops" relationships for a "Mob" */
        get: operations["fetch-Mob-relationship-drops"];
        /** @description Update "drops" relationships for a "Mob" */
        put: operations["update-Mob-relationship-drops-put"];
        /** @description Create new "drops" relationships for a "Mob" */
        post: operations["create-Mob-relationship-drops"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "drops" relationships for a "Mob" */
        patch: operations["update-Mob-relationship-drops-patch"];
        trace?: never;
    };
    "/api/rest/mob/{id}/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "locations" resource for "Mob" */
        get: operations["fetch-Mob-related-locations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/mob/{id}/relationships/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "locations" relationships for a "Mob" */
        get: operations["fetch-Mob-relationship-locations"];
        /** @description Update "locations" relationships for a "Mob" */
        put: operations["update-Mob-relationship-locations-put"];
        /** @description Create new "locations" relationships for a "Mob" */
        post: operations["create-Mob-relationship-locations"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "locations" relationships for a "Mob" */
        patch: operations["update-Mob-relationship-locations-patch"];
        trace?: never;
    };
    "/api/rest/mob/{id}/faction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "faction" resource for "Mob" */
        get: operations["fetch-Mob-related-faction"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/mob/{id}/relationships/faction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "faction" relationships for a "Mob" */
        get: operations["fetch-Mob-relationship-faction"];
        /** @description Update "faction" relationship for a "Mob" */
        put: operations["update-Mob-relationship-faction-put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "faction" relationship for a "Mob" */
        patch: operations["update-Mob-relationship-faction-patch"];
        trace?: never;
    };
    "/api/rest/npc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List "Npc" resources */
        get: operations["list-Npc"];
        put?: never;
        /** @description Create a "Npc" resource */
        post: operations["create-Npc"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/npc/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch a "Npc" resource */
        get: operations["fetch-Npc"];
        /** @description Update a "Npc" resource */
        put: operations["update-Npc-put"];
        post?: never;
        /** @description Delete a "Npc" resource */
        delete: operations["delete-Npc"];
        options?: never;
        head?: never;
        /** @description Update a "Npc" resource */
        patch: operations["update-Npc-patch"];
        trace?: never;
    };
    "/api/rest/npc/{id}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "items" resource for "Npc" */
        get: operations["fetch-Npc-related-items"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/npc/{id}/relationships/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "items" relationships for a "Npc" */
        get: operations["fetch-Npc-relationship-items"];
        /** @description Update "items" relationships for a "Npc" */
        put: operations["update-Npc-relationship-items-put"];
        /** @description Create new "items" relationships for a "Npc" */
        post: operations["create-Npc-relationship-items"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "items" relationships for a "Npc" */
        patch: operations["update-Npc-relationship-items-patch"];
        trace?: never;
    };
    "/api/rest/npc/{id}/crafts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "crafts" resource for "Npc" */
        get: operations["fetch-Npc-related-crafts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/npc/{id}/relationships/crafts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "crafts" relationships for a "Npc" */
        get: operations["fetch-Npc-relationship-crafts"];
        /** @description Update "crafts" relationships for a "Npc" */
        put: operations["update-Npc-relationship-crafts-put"];
        /** @description Create new "crafts" relationships for a "Npc" */
        post: operations["create-Npc-relationship-crafts"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "crafts" relationships for a "Npc" */
        patch: operations["update-Npc-relationship-crafts-patch"];
        trace?: never;
    };
    "/api/rest/npc/{id}/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "locations" resource for "Npc" */
        get: operations["fetch-Npc-related-locations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/npc/{id}/relationships/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "locations" relationships for a "Npc" */
        get: operations["fetch-Npc-relationship-locations"];
        /** @description Update "locations" relationships for a "Npc" */
        put: operations["update-Npc-relationship-locations-put"];
        /** @description Create new "locations" relationships for a "Npc" */
        post: operations["create-Npc-relationship-locations"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "locations" relationships for a "Npc" */
        patch: operations["update-Npc-relationship-locations-patch"];
        trace?: never;
    };
    "/api/rest/npc/{id}/area": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "area" resource for "Npc" */
        get: operations["fetch-Npc-related-area"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/npc/{id}/relationships/area": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "area" relationships for a "Npc" */
        get: operations["fetch-Npc-relationship-area"];
        /** @description Update "area" relationship for a "Npc" */
        put: operations["update-Npc-relationship-area-put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "area" relationship for a "Npc" */
        patch: operations["update-Npc-relationship-area-patch"];
        trace?: never;
    };
    "/api/rest/npcSale": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List "NpcSale" resources */
        get: operations["list-NpcSale"];
        put?: never;
        /** @description Create a "NpcSale" resource */
        post: operations["create-NpcSale"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/npcSale/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch a "NpcSale" resource */
        get: operations["fetch-NpcSale"];
        /** @description Update a "NpcSale" resource */
        put: operations["update-NpcSale-put"];
        post?: never;
        /** @description Delete a "NpcSale" resource */
        delete: operations["delete-NpcSale"];
        options?: never;
        head?: never;
        /** @description Update a "NpcSale" resource */
        patch: operations["update-NpcSale-patch"];
        trace?: never;
    };
    "/api/rest/npcSale/{id}/npc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "npc" resource for "NpcSale" */
        get: operations["fetch-NpcSale-related-npc"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/npcSale/{id}/relationships/npc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "npc" relationships for a "NpcSale" */
        get: operations["fetch-NpcSale-relationship-npc"];
        /** @description Update "npc" relationship for a "NpcSale" */
        put: operations["update-NpcSale-relationship-npc-put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "npc" relationship for a "NpcSale" */
        patch: operations["update-NpcSale-relationship-npc-patch"];
        trace?: never;
    };
    "/api/rest/npcSale/{id}/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "item" resource for "NpcSale" */
        get: operations["fetch-NpcSale-related-item"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/npcSale/{id}/relationships/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "item" relationships for a "NpcSale" */
        get: operations["fetch-NpcSale-relationship-item"];
        /** @description Update "item" relationship for a "NpcSale" */
        put: operations["update-NpcSale-relationship-item-put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "item" relationship for a "NpcSale" */
        patch: operations["update-NpcSale-relationship-item-patch"];
        trace?: never;
    };
    "/api/rest/npcCraft": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List "NpcCraft" resources */
        get: operations["list-NpcCraft"];
        put?: never;
        /** @description Create a "NpcCraft" resource */
        post: operations["create-NpcCraft"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/npcCraft/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch a "NpcCraft" resource */
        get: operations["fetch-NpcCraft"];
        /** @description Update a "NpcCraft" resource */
        put: operations["update-NpcCraft-put"];
        post?: never;
        /** @description Delete a "NpcCraft" resource */
        delete: operations["delete-NpcCraft"];
        options?: never;
        head?: never;
        /** @description Update a "NpcCraft" resource */
        patch: operations["update-NpcCraft-patch"];
        trace?: never;
    };
    "/api/rest/npcCraft/{id}/npc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "npc" resource for "NpcCraft" */
        get: operations["fetch-NpcCraft-related-npc"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/npcCraft/{id}/relationships/npc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "npc" relationships for a "NpcCraft" */
        get: operations["fetch-NpcCraft-relationship-npc"];
        /** @description Update "npc" relationship for a "NpcCraft" */
        put: operations["update-NpcCraft-relationship-npc-put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "npc" relationship for a "NpcCraft" */
        patch: operations["update-NpcCraft-relationship-npc-patch"];
        trace?: never;
    };
    "/api/rest/npcCraft/{id}/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "item" resource for "NpcCraft" */
        get: operations["fetch-NpcCraft-related-item"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/npcCraft/{id}/relationships/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "item" relationships for a "NpcCraft" */
        get: operations["fetch-NpcCraft-relationship-item"];
        /** @description Update "item" relationship for a "NpcCraft" */
        put: operations["update-NpcCraft-relationship-item-put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "item" relationship for a "NpcCraft" */
        patch: operations["update-NpcCraft-relationship-item-patch"];
        trace?: never;
    };
    "/api/rest/npcCraft/{id}/ingredients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "ingredients" resource for "NpcCraft" */
        get: operations["fetch-NpcCraft-related-ingredients"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/npcCraft/{id}/relationships/ingredients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "ingredients" relationships for a "NpcCraft" */
        get: operations["fetch-NpcCraft-relationship-ingredients"];
        /** @description Update "ingredients" relationships for a "NpcCraft" */
        put: operations["update-NpcCraft-relationship-ingredients-put"];
        /** @description Create new "ingredients" relationships for a "NpcCraft" */
        post: operations["create-NpcCraft-relationship-ingredients"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "ingredients" relationships for a "NpcCraft" */
        patch: operations["update-NpcCraft-relationship-ingredients-patch"];
        trace?: never;
    };
    "/api/rest/itemQuantity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List "ItemQuantity" resources */
        get: operations["list-ItemQuantity"];
        put?: never;
        /** @description Create a "ItemQuantity" resource */
        post: operations["create-ItemQuantity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/itemQuantity/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch a "ItemQuantity" resource */
        get: operations["fetch-ItemQuantity"];
        /** @description Update a "ItemQuantity" resource */
        put: operations["update-ItemQuantity-put"];
        post?: never;
        /** @description Delete a "ItemQuantity" resource */
        delete: operations["delete-ItemQuantity"];
        options?: never;
        head?: never;
        /** @description Update a "ItemQuantity" resource */
        patch: operations["update-ItemQuantity-patch"];
        trace?: never;
    };
    "/api/rest/itemQuantity/{id}/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "item" resource for "ItemQuantity" */
        get: operations["fetch-ItemQuantity-related-item"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/itemQuantity/{id}/relationships/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "item" relationships for a "ItemQuantity" */
        get: operations["fetch-ItemQuantity-relationship-item"];
        /** @description Update "item" relationship for a "ItemQuantity" */
        put: operations["update-ItemQuantity-relationship-item-put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "item" relationship for a "ItemQuantity" */
        patch: operations["update-ItemQuantity-relationship-item-patch"];
        trace?: never;
    };
    "/api/rest/itemQuantity/{id}/craftsInto": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "craftsInto" resource for "ItemQuantity" */
        get: operations["fetch-ItemQuantity-related-craftsInto"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/itemQuantity/{id}/relationships/craftsInto": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "craftsInto" relationships for a "ItemQuantity" */
        get: operations["fetch-ItemQuantity-relationship-craftsInto"];
        /** @description Update "craftsInto" relationships for a "ItemQuantity" */
        put: operations["update-ItemQuantity-relationship-craftsInto-put"];
        /** @description Create new "craftsInto" relationships for a "ItemQuantity" */
        post: operations["create-ItemQuantity-relationship-craftsInto"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "craftsInto" relationships for a "ItemQuantity" */
        patch: operations["update-ItemQuantity-relationship-craftsInto-patch"];
        trace?: never;
    };
    "/api/rest/battlePass": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List "BattlePass" resources */
        get: operations["list-BattlePass"];
        put?: never;
        /** @description Create a "BattlePass" resource */
        post: operations["create-BattlePass"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/battlePass/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch a "BattlePass" resource */
        get: operations["fetch-BattlePass"];
        /** @description Update a "BattlePass" resource */
        put: operations["update-BattlePass-put"];
        post?: never;
        /** @description Delete a "BattlePass" resource */
        delete: operations["delete-BattlePass"];
        options?: never;
        head?: never;
        /** @description Update a "BattlePass" resource */
        patch: operations["update-BattlePass-patch"];
        trace?: never;
    };
    "/api/rest/battlePass/{id}/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "item" resource for "BattlePass" */
        get: operations["fetch-BattlePass-related-item"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/battlePass/{id}/relationships/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "item" relationships for a "BattlePass" */
        get: operations["fetch-BattlePass-relationship-item"];
        /** @description Update "item" relationship for a "BattlePass" */
        put: operations["update-BattlePass-relationship-item-put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "item" relationship for a "BattlePass" */
        patch: operations["update-BattlePass-relationship-item-patch"];
        trace?: never;
    };
    "/api/rest/battlePass/{id}/tiers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "tiers" resource for "BattlePass" */
        get: operations["fetch-BattlePass-related-tiers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/battlePass/{id}/relationships/tiers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "tiers" relationships for a "BattlePass" */
        get: operations["fetch-BattlePass-relationship-tiers"];
        /** @description Update "tiers" relationships for a "BattlePass" */
        put: operations["update-BattlePass-relationship-tiers-put"];
        /** @description Create new "tiers" relationships for a "BattlePass" */
        post: operations["create-BattlePass-relationship-tiers"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "tiers" relationships for a "BattlePass" */
        patch: operations["update-BattlePass-relationship-tiers-patch"];
        trace?: never;
    };
    "/api/rest/battlePassTier": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List "BattlePassTier" resources */
        get: operations["list-BattlePassTier"];
        put?: never;
        /** @description Create a "BattlePassTier" resource */
        post: operations["create-BattlePassTier"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/battlePassTier/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch a "BattlePassTier" resource */
        get: operations["fetch-BattlePassTier"];
        /** @description Update a "BattlePassTier" resource */
        put: operations["update-BattlePassTier-put"];
        post?: never;
        /** @description Delete a "BattlePassTier" resource */
        delete: operations["delete-BattlePassTier"];
        options?: never;
        head?: never;
        /** @description Update a "BattlePassTier" resource */
        patch: operations["update-BattlePassTier-patch"];
        trace?: never;
    };
    "/api/rest/battlePassTier/{id}/battlePass": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "battlePass" resource for "BattlePassTier" */
        get: operations["fetch-BattlePassTier-related-battlePass"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/battlePassTier/{id}/relationships/battlePass": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "battlePass" relationships for a "BattlePassTier" */
        get: operations["fetch-BattlePassTier-relationship-battlePass"];
        /** @description Update "battlePass" relationship for a "BattlePassTier" */
        put: operations["update-BattlePassTier-relationship-battlePass-put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "battlePass" relationship for a "BattlePassTier" */
        patch: operations["update-BattlePassTier-relationship-battlePass-patch"];
        trace?: never;
    };
    "/api/rest/battlePassTier/{id}/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "item" resource for "BattlePassTier" */
        get: operations["fetch-BattlePassTier-related-item"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/battlePassTier/{id}/relationships/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "item" relationships for a "BattlePassTier" */
        get: operations["fetch-BattlePassTier-relationship-item"];
        /** @description Update "item" relationship for a "BattlePassTier" */
        put: operations["update-BattlePassTier-relationship-item-put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "item" relationship for a "BattlePassTier" */
        patch: operations["update-BattlePassTier-relationship-item-patch"];
        trace?: never;
    };
    "/api/rest/loot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List "Loot" resources */
        get: operations["list-Loot"];
        put?: never;
        /** @description Create a "Loot" resource */
        post: operations["create-Loot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/loot/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch a "Loot" resource */
        get: operations["fetch-Loot"];
        /** @description Update a "Loot" resource */
        put: operations["update-Loot-put"];
        post?: never;
        /** @description Delete a "Loot" resource */
        delete: operations["delete-Loot"];
        options?: never;
        head?: never;
        /** @description Update a "Loot" resource */
        patch: operations["update-Loot-patch"];
        trace?: never;
    };
    "/api/rest/loot/{id}/mob": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "mob" resource for "Loot" */
        get: operations["fetch-Loot-related-mob"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/loot/{id}/relationships/mob": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "mob" relationships for a "Loot" */
        get: operations["fetch-Loot-relationship-mob"];
        /** @description Update "mob" relationship for a "Loot" */
        put: operations["update-Loot-relationship-mob-put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "mob" relationship for a "Loot" */
        patch: operations["update-Loot-relationship-mob-patch"];
        trace?: never;
    };
    "/api/rest/loot/{id}/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "item" resource for "Loot" */
        get: operations["fetch-Loot-related-item"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/loot/{id}/relationships/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "item" relationships for a "Loot" */
        get: operations["fetch-Loot-relationship-item"];
        /** @description Update "item" relationship for a "Loot" */
        put: operations["update-Loot-relationship-item-put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "item" relationship for a "Loot" */
        patch: operations["update-Loot-relationship-item-patch"];
        trace?: never;
    };
    "/api/rest/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List "Item" resources */
        get: operations["list-Item"];
        put?: never;
        /** @description Create a "Item" resource */
        post: operations["create-Item"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/item/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch a "Item" resource */
        get: operations["fetch-Item"];
        /** @description Update a "Item" resource */
        put: operations["update-Item-put"];
        post?: never;
        /** @description Delete a "Item" resource */
        delete: operations["delete-Item"];
        options?: never;
        head?: never;
        /** @description Update a "Item" resource */
        patch: operations["update-Item-patch"];
        trace?: never;
    };
    "/api/rest/item/{id}/droppedBy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "droppedBy" resource for "Item" */
        get: operations["fetch-Item-related-droppedBy"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/item/{id}/relationships/droppedBy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "droppedBy" relationships for a "Item" */
        get: operations["fetch-Item-relationship-droppedBy"];
        /** @description Update "droppedBy" relationships for a "Item" */
        put: operations["update-Item-relationship-droppedBy-put"];
        /** @description Create new "droppedBy" relationships for a "Item" */
        post: operations["create-Item-relationship-droppedBy"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "droppedBy" relationships for a "Item" */
        patch: operations["update-Item-relationship-droppedBy-patch"];
        trace?: never;
    };
    "/api/rest/item/{id}/soldBy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "soldBy" resource for "Item" */
        get: operations["fetch-Item-related-soldBy"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/item/{id}/relationships/soldBy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "soldBy" relationships for a "Item" */
        get: operations["fetch-Item-relationship-soldBy"];
        /** @description Update "soldBy" relationships for a "Item" */
        put: operations["update-Item-relationship-soldBy-put"];
        /** @description Create new "soldBy" relationships for a "Item" */
        post: operations["create-Item-relationship-soldBy"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "soldBy" relationships for a "Item" */
        patch: operations["update-Item-relationship-soldBy-patch"];
        trace?: never;
    };
    "/api/rest/item/{id}/craftedBy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "craftedBy" resource for "Item" */
        get: operations["fetch-Item-related-craftedBy"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/item/{id}/relationships/craftedBy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "craftedBy" relationships for a "Item" */
        get: operations["fetch-Item-relationship-craftedBy"];
        /** @description Update "craftedBy" relationships for a "Item" */
        put: operations["update-Item-relationship-craftedBy-put"];
        /** @description Create new "craftedBy" relationships for a "Item" */
        post: operations["create-Item-relationship-craftedBy"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "craftedBy" relationships for a "Item" */
        patch: operations["update-Item-relationship-craftedBy-patch"];
        trace?: never;
    };
    "/api/rest/item/{id}/usages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "usages" resource for "Item" */
        get: operations["fetch-Item-related-usages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/item/{id}/relationships/usages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "usages" relationships for a "Item" */
        get: operations["fetch-Item-relationship-usages"];
        /** @description Update "usages" relationships for a "Item" */
        put: operations["update-Item-relationship-usages-put"];
        /** @description Create new "usages" relationships for a "Item" */
        post: operations["create-Item-relationship-usages"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "usages" relationships for a "Item" */
        patch: operations["update-Item-relationship-usages-patch"];
        trace?: never;
    };
    "/api/rest/item/{id}/battlePassTiers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "battlePassTiers" resource for "Item" */
        get: operations["fetch-Item-related-battlePassTiers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/item/{id}/relationships/battlePassTiers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "battlePassTiers" relationships for a "Item" */
        get: operations["fetch-Item-relationship-battlePassTiers"];
        /** @description Update "battlePassTiers" relationships for a "Item" */
        put: operations["update-Item-relationship-battlePassTiers-put"];
        /** @description Create new "battlePassTiers" relationships for a "Item" */
        post: operations["create-Item-relationship-battlePassTiers"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "battlePassTiers" relationships for a "Item" */
        patch: operations["update-Item-relationship-battlePassTiers-patch"];
        trace?: never;
    };
    "/api/rest/item/{id}/battlePass": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "battlePass" resource for "Item" */
        get: operations["fetch-Item-related-battlePass"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/item/{id}/relationships/battlePass": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "battlePass" relationships for a "Item" */
        get: operations["fetch-Item-relationship-battlePass"];
        /** @description Update "battlePass" relationship for a "Item" */
        put: operations["update-Item-relationship-battlePass-put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "battlePass" relationship for a "Item" */
        patch: operations["update-Item-relationship-battlePass-patch"];
        trace?: never;
    };
    "/api/rest/item/{id}/skillInfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "skillInfo" resource for "Item" */
        get: operations["fetch-Item-related-skillInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/item/{id}/relationships/skillInfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "skillInfo" relationships for a "Item" */
        get: operations["fetch-Item-relationship-skillInfo"];
        /** @description Update "skillInfo" relationship for a "Item" */
        put: operations["update-Item-relationship-skillInfo-put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "skillInfo" relationship for a "Item" */
        patch: operations["update-Item-relationship-skillInfo-patch"];
        trace?: never;
    };
    "/api/rest/item/{id}/area": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "area" resource for "Item" */
        get: operations["fetch-Item-related-area"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/item/{id}/relationships/area": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "area" relationships for a "Item" */
        get: operations["fetch-Item-relationship-area"];
        /** @description Update "area" relationship for a "Item" */
        put: operations["update-Item-relationship-area-put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "area" relationship for a "Item" */
        patch: operations["update-Item-relationship-area-patch"];
        trace?: never;
    };
    "/api/rest/item/{id}/collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "collections" resource for "Item" */
        get: operations["fetch-Item-related-collections"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/item/{id}/relationships/collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "collections" relationships for a "Item" */
        get: operations["fetch-Item-relationship-collections"];
        /** @description Update "collections" relationships for a "Item" */
        put: operations["update-Item-relationship-collections-put"];
        /** @description Create new "collections" relationships for a "Item" */
        post: operations["create-Item-relationship-collections"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "collections" relationships for a "Item" */
        patch: operations["update-Item-relationship-collections-patch"];
        trace?: never;
    };
    "/api/rest/location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List "Location" resources */
        get: operations["list-Location"];
        put?: never;
        /** @description Create a "Location" resource */
        post: operations["create-Location"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/location/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch a "Location" resource */
        get: operations["fetch-Location"];
        /** @description Update a "Location" resource */
        put: operations["update-Location-put"];
        post?: never;
        /** @description Delete a "Location" resource */
        delete: operations["delete-Location"];
        options?: never;
        head?: never;
        /** @description Update a "Location" resource */
        patch: operations["update-Location-patch"];
        trace?: never;
    };
    "/api/rest/location/{id}/area": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "area" resource for "Location" */
        get: operations["fetch-Location-related-area"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/location/{id}/relationships/area": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "area" relationships for a "Location" */
        get: operations["fetch-Location-relationship-area"];
        /** @description Update "area" relationship for a "Location" */
        put: operations["update-Location-relationship-area-put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "area" relationship for a "Location" */
        patch: operations["update-Location-relationship-area-patch"];
        trace?: never;
    };
    "/api/rest/location/{id}/npc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "npc" resource for "Location" */
        get: operations["fetch-Location-related-npc"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/location/{id}/relationships/npc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "npc" relationships for a "Location" */
        get: operations["fetch-Location-relationship-npc"];
        /** @description Update "npc" relationship for a "Location" */
        put: operations["update-Location-relationship-npc-put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "npc" relationship for a "Location" */
        patch: operations["update-Location-relationship-npc-patch"];
        trace?: never;
    };
    "/api/rest/location/{id}/mob": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "mob" resource for "Location" */
        get: operations["fetch-Location-related-mob"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/location/{id}/relationships/mob": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "mob" relationships for a "Location" */
        get: operations["fetch-Location-relationship-mob"];
        /** @description Update "mob" relationship for a "Location" */
        put: operations["update-Location-relationship-mob-put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "mob" relationship for a "Location" */
        patch: operations["update-Location-relationship-mob-patch"];
        trace?: never;
    };
    "/api/rest/location/{id}/connectedArea": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "connectedArea" resource for "Location" */
        get: operations["fetch-Location-related-connectedArea"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/location/{id}/relationships/connectedArea": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "connectedArea" relationships for a "Location" */
        get: operations["fetch-Location-relationship-connectedArea"];
        /** @description Update "connectedArea" relationship for a "Location" */
        put: operations["update-Location-relationship-connectedArea-put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "connectedArea" relationship for a "Location" */
        patch: operations["update-Location-relationship-connectedArea-patch"];
        trace?: never;
    };
    "/api/rest/area": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List "Area" resources */
        get: operations["list-Area"];
        put?: never;
        /** @description Create a "Area" resource */
        post: operations["create-Area"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/area/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch a "Area" resource */
        get: operations["fetch-Area"];
        /** @description Update a "Area" resource */
        put: operations["update-Area-put"];
        post?: never;
        /** @description Delete a "Area" resource */
        delete: operations["delete-Area"];
        options?: never;
        head?: never;
        /** @description Update a "Area" resource */
        patch: operations["update-Area-patch"];
        trace?: never;
    };
    "/api/rest/area/{id}/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "locations" resource for "Area" */
        get: operations["fetch-Area-related-locations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/area/{id}/relationships/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "locations" relationships for a "Area" */
        get: operations["fetch-Area-relationship-locations"];
        /** @description Update "locations" relationships for a "Area" */
        put: operations["update-Area-relationship-locations-put"];
        /** @description Create new "locations" relationships for a "Area" */
        post: operations["create-Area-relationship-locations"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "locations" relationships for a "Area" */
        patch: operations["update-Area-relationship-locations-patch"];
        trace?: never;
    };
    "/api/rest/area/{id}/portals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "portals" resource for "Area" */
        get: operations["fetch-Area-related-portals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/area/{id}/relationships/portals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "portals" relationships for a "Area" */
        get: operations["fetch-Area-relationship-portals"];
        /** @description Update "portals" relationships for a "Area" */
        put: operations["update-Area-relationship-portals-put"];
        /** @description Create new "portals" relationships for a "Area" */
        post: operations["create-Area-relationship-portals"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "portals" relationships for a "Area" */
        patch: operations["update-Area-relationship-portals-patch"];
        trace?: never;
    };
    "/api/rest/area/{id}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "items" resource for "Area" */
        get: operations["fetch-Area-related-items"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/area/{id}/relationships/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "items" relationships for a "Area" */
        get: operations["fetch-Area-relationship-items"];
        /** @description Update "items" relationships for a "Area" */
        put: operations["update-Area-relationship-items-put"];
        /** @description Create new "items" relationships for a "Area" */
        post: operations["create-Area-relationship-items"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "items" relationships for a "Area" */
        patch: operations["update-Area-relationship-items-patch"];
        trace?: never;
    };
    "/api/rest/area/{id}/skills": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "skills" resource for "Area" */
        get: operations["fetch-Area-related-skills"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/area/{id}/relationships/skills": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "skills" relationships for a "Area" */
        get: operations["fetch-Area-relationship-skills"];
        /** @description Update "skills" relationships for a "Area" */
        put: operations["update-Area-relationship-skills-put"];
        /** @description Create new "skills" relationships for a "Area" */
        post: operations["create-Area-relationship-skills"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "skills" relationships for a "Area" */
        patch: operations["update-Area-relationship-skills-patch"];
        trace?: never;
    };
    "/api/rest/area/{id}/npcs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "npcs" resource for "Area" */
        get: operations["fetch-Area-related-npcs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/area/{id}/relationships/npcs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "npcs" relationships for a "Area" */
        get: operations["fetch-Area-relationship-npcs"];
        /** @description Update "npcs" relationships for a "Area" */
        put: operations["update-Area-relationship-npcs-put"];
        /** @description Create new "npcs" relationships for a "Area" */
        post: operations["create-Area-relationship-npcs"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "npcs" relationships for a "Area" */
        patch: operations["update-Area-relationship-npcs-patch"];
        trace?: never;
    };
    "/api/rest/skill": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List "Skill" resources */
        get: operations["list-Skill"];
        put?: never;
        /** @description Create a "Skill" resource */
        post: operations["create-Skill"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/skill/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch a "Skill" resource */
        get: operations["fetch-Skill"];
        /** @description Update a "Skill" resource */
        put: operations["update-Skill-put"];
        post?: never;
        /** @description Delete a "Skill" resource */
        delete: operations["delete-Skill"];
        options?: never;
        head?: never;
        /** @description Update a "Skill" resource */
        patch: operations["update-Skill-patch"];
        trace?: never;
    };
    "/api/rest/skill/{id}/area": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "area" resource for "Skill" */
        get: operations["fetch-Skill-related-area"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/skill/{id}/relationships/area": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "area" relationships for a "Skill" */
        get: operations["fetch-Skill-relationship-area"];
        /** @description Update "area" relationship for a "Skill" */
        put: operations["update-Skill-relationship-area-put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "area" relationship for a "Skill" */
        patch: operations["update-Skill-relationship-area-patch"];
        trace?: never;
    };
    "/api/rest/skill/{id}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "items" resource for "Skill" */
        get: operations["fetch-Skill-related-items"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/skill/{id}/relationships/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "items" relationships for a "Skill" */
        get: operations["fetch-Skill-relationship-items"];
        /** @description Update "items" relationships for a "Skill" */
        put: operations["update-Skill-relationship-items-put"];
        /** @description Create new "items" relationships for a "Skill" */
        post: operations["create-Skill-relationship-items"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "items" relationships for a "Skill" */
        patch: operations["update-Skill-relationship-items-patch"];
        trace?: never;
    };
    "/api/rest/faction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List "Faction" resources */
        get: operations["list-Faction"];
        put?: never;
        /** @description Create a "Faction" resource */
        post: operations["create-Faction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/faction/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch a "Faction" resource */
        get: operations["fetch-Faction"];
        /** @description Update a "Faction" resource */
        put: operations["update-Faction-put"];
        post?: never;
        /** @description Delete a "Faction" resource */
        delete: operations["delete-Faction"];
        options?: never;
        head?: never;
        /** @description Update a "Faction" resource */
        patch: operations["update-Faction-patch"];
        trace?: never;
    };
    "/api/rest/faction/{id}/mobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "mobs" resource for "Faction" */
        get: operations["fetch-Faction-related-mobs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/faction/{id}/relationships/mobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "mobs" relationships for a "Faction" */
        get: operations["fetch-Faction-relationship-mobs"];
        /** @description Update "mobs" relationships for a "Faction" */
        put: operations["update-Faction-relationship-mobs-put"];
        /** @description Create new "mobs" relationships for a "Faction" */
        post: operations["create-Faction-relationship-mobs"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "mobs" relationships for a "Faction" */
        patch: operations["update-Faction-relationship-mobs-patch"];
        trace?: never;
    };
    "/api/rest/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List "Account" resources */
        get: operations["list-Account"];
        put?: never;
        /** @description Create a "Account" resource */
        post: operations["create-Account"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch a "Account" resource */
        get: operations["fetch-Account"];
        /** @description Update a "Account" resource */
        put: operations["update-Account-put"];
        post?: never;
        /** @description Delete a "Account" resource */
        delete: operations["delete-Account"];
        options?: never;
        head?: never;
        /** @description Update a "Account" resource */
        patch: operations["update-Account-patch"];
        trace?: never;
    };
    "/api/rest/account/{id}/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "user" resource for "Account" */
        get: operations["fetch-Account-related-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/{id}/relationships/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "user" relationships for a "Account" */
        get: operations["fetch-Account-relationship-user"];
        /** @description Update "user" relationship for a "Account" */
        put: operations["update-Account-relationship-user-put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "user" relationship for a "Account" */
        patch: operations["update-Account-relationship-user-patch"];
        trace?: never;
    };
    "/api/rest/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List "Session" resources */
        get: operations["list-Session"];
        put?: never;
        /** @description Create a "Session" resource */
        post: operations["create-Session"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/session/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch a "Session" resource */
        get: operations["fetch-Session"];
        /** @description Update a "Session" resource */
        put: operations["update-Session-put"];
        post?: never;
        /** @description Delete a "Session" resource */
        delete: operations["delete-Session"];
        options?: never;
        head?: never;
        /** @description Update a "Session" resource */
        patch: operations["update-Session-patch"];
        trace?: never;
    };
    "/api/rest/session/{id}/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "user" resource for "Session" */
        get: operations["fetch-Session-related-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/session/{id}/relationships/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "user" relationships for a "Session" */
        get: operations["fetch-Session-relationship-user"];
        /** @description Update "user" relationship for a "Session" */
        put: operations["update-Session-relationship-user-put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "user" relationship for a "Session" */
        patch: operations["update-Session-relationship-user-patch"];
        trace?: never;
    };
    "/api/rest/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List "User" resources */
        get: operations["list-User"];
        put?: never;
        /** @description Create a "User" resource */
        post: operations["create-User"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/user/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch a "User" resource */
        get: operations["fetch-User"];
        /** @description Update a "User" resource */
        put: operations["update-User-put"];
        post?: never;
        /** @description Delete a "User" resource */
        delete: operations["delete-User"];
        options?: never;
        head?: never;
        /** @description Update a "User" resource */
        patch: operations["update-User-patch"];
        trace?: never;
    };
    "/api/rest/user/{id}/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "accounts" resource for "User" */
        get: operations["fetch-User-related-accounts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/user/{id}/relationships/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "accounts" relationships for a "User" */
        get: operations["fetch-User-relationship-accounts"];
        /** @description Update "accounts" relationships for a "User" */
        put: operations["update-User-relationship-accounts-put"];
        /** @description Create new "accounts" relationships for a "User" */
        post: operations["create-User-relationship-accounts"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "accounts" relationships for a "User" */
        patch: operations["update-User-relationship-accounts-patch"];
        trace?: never;
    };
    "/api/rest/user/{id}/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "sessions" resource for "User" */
        get: operations["fetch-User-related-sessions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/user/{id}/relationships/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "sessions" relationships for a "User" */
        get: operations["fetch-User-relationship-sessions"];
        /** @description Update "sessions" relationships for a "User" */
        put: operations["update-User-relationship-sessions-put"];
        /** @description Create new "sessions" relationships for a "User" */
        post: operations["create-User-relationship-sessions"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "sessions" relationships for a "User" */
        patch: operations["update-User-relationship-sessions-patch"];
        trace?: never;
    };
    "/api/rest/user/{id}/collection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "collection" resource for "User" */
        get: operations["fetch-User-related-collection"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/user/{id}/relationships/collection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "collection" relationships for a "User" */
        get: operations["fetch-User-relationship-collection"];
        /** @description Update "collection" relationships for a "User" */
        put: operations["update-User-relationship-collection-put"];
        /** @description Create new "collection" relationships for a "User" */
        post: operations["create-User-relationship-collection"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "collection" relationships for a "User" */
        patch: operations["update-User-relationship-collection-patch"];
        trace?: never;
    };
    "/api/rest/verificationToken": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List "VerificationToken" resources */
        get: operations["list-VerificationToken"];
        put?: never;
        /** @description Create a "VerificationToken" resource */
        post: operations["create-VerificationToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/verificationToken/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch a "VerificationToken" resource */
        get: operations["fetch-VerificationToken"];
        /** @description Update a "VerificationToken" resource */
        put: operations["update-VerificationToken-put"];
        post?: never;
        /** @description Delete a "VerificationToken" resource */
        delete: operations["delete-VerificationToken"];
        options?: never;
        head?: never;
        /** @description Update a "VerificationToken" resource */
        patch: operations["update-VerificationToken-patch"];
        trace?: never;
    };
    "/api/rest/collectionItem": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List "CollectionItem" resources */
        get: operations["list-CollectionItem"];
        put?: never;
        /** @description Create a "CollectionItem" resource */
        post: operations["create-CollectionItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/collectionItem/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch a "CollectionItem" resource */
        get: operations["fetch-CollectionItem"];
        /** @description Update a "CollectionItem" resource */
        put: operations["update-CollectionItem-put"];
        post?: never;
        /** @description Delete a "CollectionItem" resource */
        delete: operations["delete-CollectionItem"];
        options?: never;
        head?: never;
        /** @description Update a "CollectionItem" resource */
        patch: operations["update-CollectionItem-patch"];
        trace?: never;
    };
    "/api/rest/collectionItem/{id}/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "user" resource for "CollectionItem" */
        get: operations["fetch-CollectionItem-related-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/collectionItem/{id}/relationships/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "user" relationships for a "CollectionItem" */
        get: operations["fetch-CollectionItem-relationship-user"];
        /** @description Update "user" relationship for a "CollectionItem" */
        put: operations["update-CollectionItem-relationship-user-put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "user" relationship for a "CollectionItem" */
        patch: operations["update-CollectionItem-relationship-user-patch"];
        trace?: never;
    };
    "/api/rest/collectionItem/{id}/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the related "item" resource for "CollectionItem" */
        get: operations["fetch-CollectionItem-related-item"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/collectionItem/{id}/relationships/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch the "item" relationships for a "CollectionItem" */
        get: operations["fetch-CollectionItem-relationship-item"];
        /** @description Update "item" relationship for a "CollectionItem" */
        put: operations["update-CollectionItem-relationship-item-put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update "item" relationship for a "CollectionItem" */
        patch: operations["update-CollectionItem-relationship-item-patch"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description An object describing the server’s implementation */
        _jsonapi: {
            version: string;
        };
        /** @description Meta information about the request or response */
        _meta: {
            /** @description Superjson serialization metadata */
            serialization?: unknown;
        } & {
            [key: string]: unknown;
        };
        /** @description Identifier for a resource */
        _resourceIdentifier: {
            /** @description Resource type */
            type: string;
            /** @description Resource id */
            id: string;
        };
        _resource: components["schemas"]["_resourceIdentifier"] & {
            /** @description Resource attributes */
            attributes?: Record<string, never>;
            /** @description Resource relationships */
            relationships?: Record<string, never>;
        };
        /** @description Links related to the resource */
        _links: {
            /** @description Link for refetching the curent results */
            self: string;
        };
        /** @description Pagination information */
        _pagination: {
            first: null | string;
            last: null | string;
            prev: null | string;
            next: null | string;
        };
        /** @description An array of error objects */
        _errors: {
            /** @description HTTP status */
            status: string;
            /** @description Error code */
            code: string;
            /** @description Prisma error code if the error is thrown by Prisma */
            prismaCode?: string;
            /** @description Error title */
            title?: string;
            /** @description Error detail */
            detail?: string;
            /** @description Detailed error reason */
            reason?: string;
            /** @description Zod validation errors if the error is due to data validation failure */
            zodErrors?: {
                [key: string]: unknown;
            };
        }[];
        /** @description An error response */
        _errorResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            errors: components["schemas"]["_errors"];
        };
        /** @description Links related to a relationship */
        _relationLinks: {
            /** @description Link for fetching this relationship */
            self: string;
            /** @description Link for fetching the resource represented by this relationship */
            related: string;
        };
        /** @description A to-one relationship */
        _toOneRelationship: {
            data?: null | components["schemas"]["_resourceIdentifier"];
        };
        /** @description A to-one relationship with links */
        _toOneRelationshipWithLinks: {
            links: components["schemas"]["_relationLinks"];
            data: null | components["schemas"]["_resourceIdentifier"];
        };
        /** @description A to-many relationship */
        _toManyRelationship: {
            data: components["schemas"]["_resourceIdentifier"][];
        };
        /** @description A to-many relationship with links */
        _toManyRelationshipWithLinks: {
            links: components["schemas"]["_pagedRelationLinks"];
            data: components["schemas"]["_resourceIdentifier"][];
        };
        /** @description Relationship links with pagination information */
        _pagedRelationLinks: components["schemas"]["_pagination"] & components["schemas"]["_relationLinks"];
        /** @description Input for manipulating a to-many relationship */
        _toManyRelationshipRequest: {
            data: components["schemas"]["_resourceIdentifier"][];
        };
        /** @description Input for manipulating a to-one relationship */
        _toOneRelationshipRequest: null | {
            data: components["schemas"]["_resourceIdentifier"];
        };
        /** @description Response for a to-many relationship */
        _toManyRelationshipResponse: components["schemas"]["_toManyRelationshipWithLinks"] & {
            jsonapi?: components["schemas"]["_jsonapi"];
        };
        /** @description Response for a to-one relationship */
        _toOneRelationshipResponse: components["schemas"]["_toOneRelationshipWithLinks"] & {
            jsonapi?: components["schemas"]["_jsonapi"];
        };
        /**
         * @description The "Unit" Enum
         * @enum {string}
         */
        Unit: "GEMS" | "COINS";
        /**
         * @description The "EquippableType" Enum
         * @enum {string}
         */
        EquippableType: "HEAD" | "FACE" | "BACK" | "SHOULDERS" | "CHEST" | "LEGS" | "RING" | "MAIN_HAND" | "TRINKET" | "OFFHAND" | "GUILD" | "COSMETIC_HEAD" | "COSMETIC_FACE" | "COSMETIC_BACK" | "COSMETIC_SHOULDERS" | "COSMETIC_CHEST" | "COSMETIC_LEGS";
        /**
         * @description The "SkillType" Enum
         * @enum {string}
         */
        SkillType: "HEAL" | "DAMAGE" | "STAT_BUFF" | "ENERGY_REGEN" | "HEALTH_REGEN" | "TELEPORT";
        /**
         * @description The "Role" Enum
         * @enum {string}
         */
        Role: "USER" | "MODERATOR" | "ADMIN";
        /** @description The "Mob" model */
        Mob: {
            id: string;
            type: string;
            attributes: {
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                name?: string;
                slug?: string;
                desc?: null | string;
                note?: null | string;
                level?: number;
                health?: number;
                goldMin?: number;
                goldMax?: number;
                spriteUrl?: string;
                boss?: boolean;
                atkSpeed?: null | number;
                dmgMin?: null | number;
                dmgMax?: null | number;
                numSpawns?: null | number;
                spawnTimeSec?: null | number;
                range?: null | number;
                str?: null | number;
                sta?: null | number;
                agi?: null | number;
                int?: null | number;
                armor?: null | number;
                crit?: null | number;
                dodge?: null | number;
                factionXp?: null | number;
                factionId?: null | string;
                artist?: null | string;
            };
            relationships?: {
                drops?: components["schemas"]["_toManyRelationshipWithLinks"];
                locations?: components["schemas"]["_toManyRelationshipWithLinks"];
                faction?: null | components["schemas"]["_toOneRelationshipWithLinks"];
            };
        };
        /** @description Input for creating a "Mob" */
        MobCreateRequest: {
            /** @description The "Mob" model */
            data: {
                type: string;
                attributes: {
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    name: string;
                    slug: string;
                    desc?: null | string;
                    note?: null | string;
                    level: number;
                    health: number;
                    goldMin: number;
                    goldMax: number;
                    spriteUrl: string;
                    boss?: boolean;
                    atkSpeed?: null | number;
                    dmgMin?: null | number;
                    dmgMax?: null | number;
                    numSpawns?: null | number;
                    spawnTimeSec?: null | number;
                    range?: null | number;
                    str?: null | number;
                    sta?: null | number;
                    agi?: null | number;
                    int?: null | number;
                    armor?: null | number;
                    crit?: null | number;
                    dodge?: null | number;
                    factionXp?: null | number;
                    factionId?: null | string;
                    artist?: null | string;
                };
                relationships?: {
                    drops?: components["schemas"]["_toManyRelationship"];
                    locations?: components["schemas"]["_toManyRelationship"];
                    faction?: null | components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Input for updating a "Mob" */
        MobUpdateRequest: {
            /** @description The "Mob" model */
            data: {
                id: string;
                type: string;
                attributes: {
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    name?: string;
                    slug?: string;
                    desc?: null | string;
                    note?: null | string;
                    level?: number;
                    health?: number;
                    goldMin?: number;
                    goldMax?: number;
                    spriteUrl?: string;
                    boss?: boolean;
                    atkSpeed?: null | number;
                    dmgMin?: null | number;
                    dmgMax?: null | number;
                    numSpawns?: null | number;
                    spawnTimeSec?: null | number;
                    range?: null | number;
                    str?: null | number;
                    sta?: null | number;
                    agi?: null | number;
                    int?: null | number;
                    armor?: null | number;
                    crit?: null | number;
                    dodge?: null | number;
                    factionXp?: null | number;
                    factionId?: null | string;
                    artist?: null | string;
                };
                relationships?: {
                    drops?: components["schemas"]["_toManyRelationship"];
                    locations?: components["schemas"]["_toManyRelationship"];
                    faction?: null | components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Response for a "Mob" */
        MobResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: components["schemas"]["Mob"] & {
                relationships?: {
                    drops?: components["schemas"]["_toManyRelationship"];
                    locations?: components["schemas"]["_toManyRelationship"];
                    faction?: components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links?: components["schemas"]["_links"];
        };
        /** @description Response for a list of "Mob" */
        MobListResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: (components["schemas"]["Mob"] & {
                relationships?: {
                    drops?: components["schemas"]["_toManyRelationship"];
                    locations?: components["schemas"]["_toManyRelationship"];
                    faction?: components["schemas"]["_toOneRelationship"];
                };
            })[];
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links: components["schemas"]["_links"] & components["schemas"]["_pagination"];
        };
        /** @description The "Npc" model */
        Npc: {
            id: string;
            type: string;
            attributes: {
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                name?: string;
                slug?: string;
                note?: null | string;
                type?: string;
                spriteUrl?: string;
                inGameId?: null | number;
                areaId?: null | string;
            };
            relationships?: {
                items?: components["schemas"]["_toManyRelationshipWithLinks"];
                crafts?: components["schemas"]["_toManyRelationshipWithLinks"];
                locations?: components["schemas"]["_toManyRelationshipWithLinks"];
                area?: null | components["schemas"]["_toOneRelationshipWithLinks"];
            };
        };
        /** @description Input for creating a "Npc" */
        NpcCreateRequest: {
            /** @description The "Npc" model */
            data: {
                type: string;
                attributes: {
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    name: string;
                    slug: string;
                    note?: null | string;
                    type: string;
                    spriteUrl: string;
                    inGameId?: null | number;
                    areaId?: null | string;
                };
                relationships?: {
                    items?: components["schemas"]["_toManyRelationship"];
                    crafts?: components["schemas"]["_toManyRelationship"];
                    locations?: components["schemas"]["_toManyRelationship"];
                    area?: null | components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Input for updating a "Npc" */
        NpcUpdateRequest: {
            /** @description The "Npc" model */
            data: {
                id: string;
                type: string;
                attributes: {
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    name?: string;
                    slug?: string;
                    note?: null | string;
                    type?: string;
                    spriteUrl?: string;
                    inGameId?: null | number;
                    areaId?: null | string;
                };
                relationships?: {
                    items?: components["schemas"]["_toManyRelationship"];
                    crafts?: components["schemas"]["_toManyRelationship"];
                    locations?: components["schemas"]["_toManyRelationship"];
                    area?: null | components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Response for a "Npc" */
        NpcResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: components["schemas"]["Npc"] & {
                relationships?: {
                    items?: components["schemas"]["_toManyRelationship"];
                    crafts?: components["schemas"]["_toManyRelationship"];
                    locations?: components["schemas"]["_toManyRelationship"];
                    area?: components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links?: components["schemas"]["_links"];
        };
        /** @description Response for a list of "Npc" */
        NpcListResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: (components["schemas"]["Npc"] & {
                relationships?: {
                    items?: components["schemas"]["_toManyRelationship"];
                    crafts?: components["schemas"]["_toManyRelationship"];
                    locations?: components["schemas"]["_toManyRelationship"];
                    area?: components["schemas"]["_toOneRelationship"];
                };
            })[];
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links: components["schemas"]["_links"] & components["schemas"]["_pagination"];
        };
        /** @description The "NpcSale" model */
        NpcSale: {
            id: string;
            type: string;
            attributes: {
                unit?: components["schemas"]["Unit"];
                price?: number;
            };
            relationships?: {
                npc?: components["schemas"]["_toOneRelationshipWithLinks"];
                item?: components["schemas"]["_toOneRelationshipWithLinks"];
            };
        };
        /** @description Input for creating a "NpcSale" */
        NpcSaleCreateRequest: {
            /** @description The "NpcSale" model */
            data: {
                id: string;
                type: string;
                attributes: {
                    unit?: components["schemas"]["Unit"];
                    price: number;
                };
                relationships?: {
                    npc?: components["schemas"]["_toOneRelationship"];
                    item?: components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Input for updating a "NpcSale" */
        NpcSaleUpdateRequest: {
            /** @description The "NpcSale" model */
            data: {
                id: string;
                type: string;
                attributes: {
                    unit?: components["schemas"]["Unit"];
                    price?: number;
                };
                relationships?: {
                    npc?: components["schemas"]["_toOneRelationship"];
                    item?: components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Response for a "NpcSale" */
        NpcSaleResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: components["schemas"]["NpcSale"] & {
                relationships?: {
                    npc?: components["schemas"]["_toOneRelationship"];
                    item?: components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links?: components["schemas"]["_links"];
        };
        /** @description Response for a list of "NpcSale" */
        NpcSaleListResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: (components["schemas"]["NpcSale"] & {
                relationships?: {
                    npc?: components["schemas"]["_toOneRelationship"];
                    item?: components["schemas"]["_toOneRelationship"];
                };
            })[];
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links: components["schemas"]["_links"] & components["schemas"]["_pagination"];
        };
        /** @description The "NpcCraft" model */
        NpcCraft: {
            id: string;
            type: string;
            attributes: {
                npcId?: string;
                itemId?: string;
                price?: number;
                unit?: components["schemas"]["Unit"];
                durationMinutes?: number;
            };
            relationships?: {
                npc?: components["schemas"]["_toOneRelationshipWithLinks"];
                item?: components["schemas"]["_toOneRelationshipWithLinks"];
                ingredients?: components["schemas"]["_toManyRelationshipWithLinks"];
            };
        };
        /** @description Input for creating a "NpcCraft" */
        NpcCraftCreateRequest: {
            /** @description The "NpcCraft" model */
            data: {
                type: string;
                attributes: {
                    npcId: string;
                    itemId: string;
                    price: number;
                    unit?: components["schemas"]["Unit"];
                    durationMinutes: number;
                };
                relationships?: {
                    npc?: components["schemas"]["_toOneRelationship"];
                    item?: components["schemas"]["_toOneRelationship"];
                    ingredients?: components["schemas"]["_toManyRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Input for updating a "NpcCraft" */
        NpcCraftUpdateRequest: {
            /** @description The "NpcCraft" model */
            data: {
                id: string;
                type: string;
                attributes: {
                    npcId?: string;
                    itemId?: string;
                    price?: number;
                    unit?: components["schemas"]["Unit"];
                    durationMinutes?: number;
                };
                relationships?: {
                    npc?: components["schemas"]["_toOneRelationship"];
                    item?: components["schemas"]["_toOneRelationship"];
                    ingredients?: components["schemas"]["_toManyRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Response for a "NpcCraft" */
        NpcCraftResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: components["schemas"]["NpcCraft"] & {
                relationships?: {
                    npc?: components["schemas"]["_toOneRelationship"];
                    item?: components["schemas"]["_toOneRelationship"];
                    ingredients?: components["schemas"]["_toManyRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links?: components["schemas"]["_links"];
        };
        /** @description Response for a list of "NpcCraft" */
        NpcCraftListResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: (components["schemas"]["NpcCraft"] & {
                relationships?: {
                    npc?: components["schemas"]["_toOneRelationship"];
                    item?: components["schemas"]["_toOneRelationship"];
                    ingredients?: components["schemas"]["_toManyRelationship"];
                };
            })[];
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links: components["schemas"]["_links"] & components["schemas"]["_pagination"];
        };
        /** @description The "ItemQuantity" model */
        ItemQuantity: {
            id: string;
            type: string;
            attributes: {
                itemId?: string;
                quantity?: number;
            };
            relationships?: {
                item?: components["schemas"]["_toOneRelationshipWithLinks"];
                craftsInto?: components["schemas"]["_toManyRelationshipWithLinks"];
            };
        };
        /** @description Input for creating a "ItemQuantity" */
        ItemQuantityCreateRequest: {
            /** @description The "ItemQuantity" model */
            data: {
                id: string;
                type: string;
                attributes: {
                    itemId: string;
                    quantity?: number;
                };
                relationships?: {
                    item?: components["schemas"]["_toOneRelationship"];
                    craftsInto?: components["schemas"]["_toManyRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Input for updating a "ItemQuantity" */
        ItemQuantityUpdateRequest: {
            /** @description The "ItemQuantity" model */
            data: {
                id: string;
                type: string;
                attributes: {
                    itemId?: string;
                    quantity?: number;
                };
                relationships?: {
                    item?: components["schemas"]["_toOneRelationship"];
                    craftsInto?: components["schemas"]["_toManyRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Response for a "ItemQuantity" */
        ItemQuantityResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: components["schemas"]["ItemQuantity"] & {
                relationships?: {
                    item?: components["schemas"]["_toOneRelationship"];
                    craftsInto?: components["schemas"]["_toManyRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links?: components["schemas"]["_links"];
        };
        /** @description Response for a list of "ItemQuantity" */
        ItemQuantityListResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: (components["schemas"]["ItemQuantity"] & {
                relationships?: {
                    item?: components["schemas"]["_toOneRelationship"];
                    craftsInto?: components["schemas"]["_toManyRelationship"];
                };
            })[];
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links: components["schemas"]["_links"] & components["schemas"]["_pagination"];
        };
        /** @description The "BattlePass" model */
        BattlePass: {
            id: string;
            type: string;
            attributes: {
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                name?: string;
                slug?: string;
                spriteUrl?: null | string;
                durationDays?: null | number;
                xpPerTier?: null | number;
                itemId?: null | string;
                desc?: null | string;
                note?: null | string;
            };
            relationships?: {
                item?: null | components["schemas"]["_toOneRelationshipWithLinks"];
                tiers?: components["schemas"]["_toManyRelationshipWithLinks"];
            };
        };
        /** @description Input for creating a "BattlePass" */
        BattlePassCreateRequest: {
            /** @description The "BattlePass" model */
            data: {
                type: string;
                attributes: {
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    name: string;
                    slug: string;
                    spriteUrl?: null | string;
                    durationDays?: null | number;
                    xpPerTier?: null | number;
                    itemId?: null | string;
                    desc?: null | string;
                    note?: null | string;
                };
                relationships?: {
                    item?: null | components["schemas"]["_toOneRelationship"];
                    tiers?: components["schemas"]["_toManyRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Input for updating a "BattlePass" */
        BattlePassUpdateRequest: {
            /** @description The "BattlePass" model */
            data: {
                id: string;
                type: string;
                attributes: {
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    name?: string;
                    slug?: string;
                    spriteUrl?: null | string;
                    durationDays?: null | number;
                    xpPerTier?: null | number;
                    itemId?: null | string;
                    desc?: null | string;
                    note?: null | string;
                };
                relationships?: {
                    item?: null | components["schemas"]["_toOneRelationship"];
                    tiers?: components["schemas"]["_toManyRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Response for a "BattlePass" */
        BattlePassResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: components["schemas"]["BattlePass"] & {
                relationships?: {
                    item?: components["schemas"]["_toOneRelationship"];
                    tiers?: components["schemas"]["_toManyRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links?: components["schemas"]["_links"];
        };
        /** @description Response for a list of "BattlePass" */
        BattlePassListResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: (components["schemas"]["BattlePass"] & {
                relationships?: {
                    item?: components["schemas"]["_toOneRelationship"];
                    tiers?: components["schemas"]["_toManyRelationship"];
                };
            })[];
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links: components["schemas"]["_links"] & components["schemas"]["_pagination"];
        };
        /** @description The "BattlePassTier" model */
        BattlePassTier: {
            id: string;
            type: string;
            attributes: {
                itemId?: null | string;
                amount?: null | number;
                unit?: null | components["schemas"]["Unit"];
            };
            relationships?: {
                battlePass?: components["schemas"]["_toOneRelationshipWithLinks"];
                item?: null | components["schemas"]["_toOneRelationshipWithLinks"];
            };
        };
        /** @description Input for creating a "BattlePassTier" */
        BattlePassTierCreateRequest: {
            /** @description The "BattlePassTier" model */
            data: {
                id: string;
                type: string;
                attributes: {
                    itemId?: null | string;
                    amount?: null | number;
                    unit?: null | components["schemas"]["Unit"];
                };
                relationships?: {
                    battlePass?: components["schemas"]["_toOneRelationship"];
                    item?: null | components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Input for updating a "BattlePassTier" */
        BattlePassTierUpdateRequest: {
            /** @description The "BattlePassTier" model */
            data: {
                id: string;
                type: string;
                attributes: {
                    itemId?: null | string;
                    amount?: null | number;
                    unit?: null | components["schemas"]["Unit"];
                };
                relationships?: {
                    battlePass?: components["schemas"]["_toOneRelationship"];
                    item?: null | components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Response for a "BattlePassTier" */
        BattlePassTierResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: components["schemas"]["BattlePassTier"] & {
                relationships?: {
                    battlePass?: components["schemas"]["_toOneRelationship"];
                    item?: components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links?: components["schemas"]["_links"];
        };
        /** @description Response for a list of "BattlePassTier" */
        BattlePassTierListResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: (components["schemas"]["BattlePassTier"] & {
                relationships?: {
                    battlePass?: components["schemas"]["_toOneRelationship"];
                    item?: components["schemas"]["_toOneRelationship"];
                };
            })[];
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links: components["schemas"]["_links"] & components["schemas"]["_pagination"];
        };
        /** @description The "Loot" model */
        Loot: {
            id: string;
            type: string;
            attributes: {
                dropRate?: null | number;
            };
            relationships?: {
                mob?: components["schemas"]["_toOneRelationshipWithLinks"];
                item?: components["schemas"]["_toOneRelationshipWithLinks"];
            };
        };
        /** @description Input for creating a "Loot" */
        LootCreateRequest: {
            /** @description The "Loot" model */
            data: {
                id: string;
                type: string;
                attributes: {
                    dropRate?: null | number;
                };
                relationships?: {
                    mob?: components["schemas"]["_toOneRelationship"];
                    item?: components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Input for updating a "Loot" */
        LootUpdateRequest: {
            /** @description The "Loot" model */
            data: {
                id: string;
                type: string;
                attributes: {
                    dropRate?: null | number;
                };
                relationships?: {
                    mob?: components["schemas"]["_toOneRelationship"];
                    item?: components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Response for a "Loot" */
        LootResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: components["schemas"]["Loot"] & {
                relationships?: {
                    mob?: components["schemas"]["_toOneRelationship"];
                    item?: components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links?: components["schemas"]["_links"];
        };
        /** @description Response for a list of "Loot" */
        LootListResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: (components["schemas"]["Loot"] & {
                relationships?: {
                    mob?: components["schemas"]["_toOneRelationship"];
                    item?: components["schemas"]["_toOneRelationship"];
                };
            })[];
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links: components["schemas"]["_links"] & components["schemas"]["_pagination"];
        };
        /** @description The "Item" model */
        Item: {
            id: string;
            type: string;
            attributes: {
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                name?: string;
                slug?: string;
                desc?: null | string;
                note?: null | string;
                spriteUrl?: string;
                equip?: null | components["schemas"]["EquippableType"];
                levelReq?: null | number;
                globalLoot?: null | boolean;
                twoHand?: null | boolean;
                consumable?: boolean;
                sellPrice?: null | number;
                stackSize?: number;
                skillId?: null | string;
                areaId?: null | string;
                availableStart?: null | string;
                availableEnd?: null | string;
                inGameId?: null | number;
                reqStr?: null | number;
                reqSta?: null | number;
                reqAgi?: null | number;
                reqInt?: null | number;
                range?: null | number;
                str?: null | number;
                sta?: null | number;
                agi?: null | number;
                int?: null | number;
                armor?: null | number;
                atkSpeed?: null | number;
                dmgMin?: null | number;
                dmgMax?: null | number;
                artist?: null | string;
            };
            relationships?: {
                droppedBy?: components["schemas"]["_toManyRelationshipWithLinks"];
                soldBy?: components["schemas"]["_toManyRelationshipWithLinks"];
                craftedBy?: components["schemas"]["_toManyRelationshipWithLinks"];
                usages?: components["schemas"]["_toManyRelationshipWithLinks"];
                battlePassTiers?: components["schemas"]["_toManyRelationshipWithLinks"];
                battlePass?: null | components["schemas"]["_toOneRelationshipWithLinks"];
                skillInfo?: null | components["schemas"]["_toOneRelationshipWithLinks"];
                area?: null | components["schemas"]["_toOneRelationshipWithLinks"];
                collections?: components["schemas"]["_toManyRelationshipWithLinks"];
            };
        };
        /** @description Input for creating a "Item" */
        ItemCreateRequest: {
            /** @description The "Item" model */
            data: {
                type: string;
                attributes: {
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    name: string;
                    slug: string;
                    desc?: null | string;
                    note?: null | string;
                    spriteUrl: string;
                    equip?: null | components["schemas"]["EquippableType"];
                    levelReq?: null | number;
                    globalLoot?: null | boolean;
                    twoHand?: null | boolean;
                    consumable?: boolean;
                    sellPrice?: null | number;
                    stackSize?: number;
                    skillId?: null | string;
                    areaId?: null | string;
                    availableStart?: null | string;
                    availableEnd?: null | string;
                    inGameId?: null | number;
                    reqStr?: null | number;
                    reqSta?: null | number;
                    reqAgi?: null | number;
                    reqInt?: null | number;
                    range?: null | number;
                    str?: null | number;
                    sta?: null | number;
                    agi?: null | number;
                    int?: null | number;
                    armor?: null | number;
                    atkSpeed?: null | number;
                    dmgMin?: null | number;
                    dmgMax?: null | number;
                    artist?: null | string;
                };
                relationships?: {
                    droppedBy?: components["schemas"]["_toManyRelationship"];
                    soldBy?: components["schemas"]["_toManyRelationship"];
                    craftedBy?: components["schemas"]["_toManyRelationship"];
                    usages?: components["schemas"]["_toManyRelationship"];
                    battlePassTiers?: components["schemas"]["_toManyRelationship"];
                    battlePass?: null | components["schemas"]["_toOneRelationship"];
                    skillInfo?: null | components["schemas"]["_toOneRelationship"];
                    area?: null | components["schemas"]["_toOneRelationship"];
                    collections?: components["schemas"]["_toManyRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Input for updating a "Item" */
        ItemUpdateRequest: {
            /** @description The "Item" model */
            data: {
                id: string;
                type: string;
                attributes: {
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    name?: string;
                    slug?: string;
                    desc?: null | string;
                    note?: null | string;
                    spriteUrl?: string;
                    equip?: null | components["schemas"]["EquippableType"];
                    levelReq?: null | number;
                    globalLoot?: null | boolean;
                    twoHand?: null | boolean;
                    consumable?: boolean;
                    sellPrice?: null | number;
                    stackSize?: number;
                    skillId?: null | string;
                    areaId?: null | string;
                    availableStart?: null | string;
                    availableEnd?: null | string;
                    inGameId?: null | number;
                    reqStr?: null | number;
                    reqSta?: null | number;
                    reqAgi?: null | number;
                    reqInt?: null | number;
                    range?: null | number;
                    str?: null | number;
                    sta?: null | number;
                    agi?: null | number;
                    int?: null | number;
                    armor?: null | number;
                    atkSpeed?: null | number;
                    dmgMin?: null | number;
                    dmgMax?: null | number;
                    artist?: null | string;
                };
                relationships?: {
                    droppedBy?: components["schemas"]["_toManyRelationship"];
                    soldBy?: components["schemas"]["_toManyRelationship"];
                    craftedBy?: components["schemas"]["_toManyRelationship"];
                    usages?: components["schemas"]["_toManyRelationship"];
                    battlePassTiers?: components["schemas"]["_toManyRelationship"];
                    battlePass?: null | components["schemas"]["_toOneRelationship"];
                    skillInfo?: null | components["schemas"]["_toOneRelationship"];
                    area?: null | components["schemas"]["_toOneRelationship"];
                    collections?: components["schemas"]["_toManyRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Response for a "Item" */
        ItemResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: components["schemas"]["Item"] & {
                relationships?: {
                    droppedBy?: components["schemas"]["_toManyRelationship"];
                    soldBy?: components["schemas"]["_toManyRelationship"];
                    craftedBy?: components["schemas"]["_toManyRelationship"];
                    usages?: components["schemas"]["_toManyRelationship"];
                    battlePassTiers?: components["schemas"]["_toManyRelationship"];
                    battlePass?: components["schemas"]["_toOneRelationship"];
                    skillInfo?: components["schemas"]["_toOneRelationship"];
                    area?: components["schemas"]["_toOneRelationship"];
                    collections?: components["schemas"]["_toManyRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links?: components["schemas"]["_links"];
        };
        /** @description Response for a list of "Item" */
        ItemListResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: (components["schemas"]["Item"] & {
                relationships?: {
                    droppedBy?: components["schemas"]["_toManyRelationship"];
                    soldBy?: components["schemas"]["_toManyRelationship"];
                    craftedBy?: components["schemas"]["_toManyRelationship"];
                    usages?: components["schemas"]["_toManyRelationship"];
                    battlePassTiers?: components["schemas"]["_toManyRelationship"];
                    battlePass?: components["schemas"]["_toOneRelationship"];
                    skillInfo?: components["schemas"]["_toOneRelationship"];
                    area?: components["schemas"]["_toOneRelationship"];
                    collections?: components["schemas"]["_toManyRelationship"];
                };
            })[];
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links: components["schemas"]["_links"] & components["schemas"]["_pagination"];
        };
        /** @description The "Location" model */
        Location: {
            id: string;
            type: string;
            attributes: {
                areaId?: string;
                x?: number;
                y?: number;
                npcId?: null | string;
                mobId?: null | string;
                connectedAreaId?: null | string;
            };
            relationships?: {
                area?: components["schemas"]["_toOneRelationshipWithLinks"];
                npc?: null | components["schemas"]["_toOneRelationshipWithLinks"];
                mob?: null | components["schemas"]["_toOneRelationshipWithLinks"];
                connectedArea?: null | components["schemas"]["_toOneRelationshipWithLinks"];
            };
        };
        /** @description Input for creating a "Location" */
        LocationCreateRequest: {
            /** @description The "Location" model */
            data: {
                type: string;
                attributes: {
                    areaId: string;
                    x: number;
                    y: number;
                    npcId?: null | string;
                    mobId?: null | string;
                    connectedAreaId?: null | string;
                };
                relationships?: {
                    area?: components["schemas"]["_toOneRelationship"];
                    npc?: null | components["schemas"]["_toOneRelationship"];
                    mob?: null | components["schemas"]["_toOneRelationship"];
                    connectedArea?: null | components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Input for updating a "Location" */
        LocationUpdateRequest: {
            /** @description The "Location" model */
            data: {
                id: string;
                type: string;
                attributes: {
                    areaId?: string;
                    x?: number;
                    y?: number;
                    npcId?: null | string;
                    mobId?: null | string;
                    connectedAreaId?: null | string;
                };
                relationships?: {
                    area?: components["schemas"]["_toOneRelationship"];
                    npc?: null | components["schemas"]["_toOneRelationship"];
                    mob?: null | components["schemas"]["_toOneRelationship"];
                    connectedArea?: null | components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Response for a "Location" */
        LocationResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: components["schemas"]["Location"] & {
                relationships?: {
                    area?: components["schemas"]["_toOneRelationship"];
                    npc?: components["schemas"]["_toOneRelationship"];
                    mob?: components["schemas"]["_toOneRelationship"];
                    connectedArea?: components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links?: components["schemas"]["_links"];
        };
        /** @description Response for a list of "Location" */
        LocationListResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: (components["schemas"]["Location"] & {
                relationships?: {
                    area?: components["schemas"]["_toOneRelationship"];
                    npc?: components["schemas"]["_toOneRelationship"];
                    mob?: components["schemas"]["_toOneRelationship"];
                    connectedArea?: components["schemas"]["_toOneRelationship"];
                };
            })[];
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links: components["schemas"]["_links"] & components["schemas"]["_pagination"];
        };
        /** @description The "Area" model */
        Area: {
            id: string;
            type: string;
            attributes: {
                /** Format: date-time */
                createdAt?: string;
                spriteUrl?: string;
                /** Format: date-time */
                updatedAt?: string;
                name?: string;
                slug?: string;
                note?: null | string;
                height?: number;
                width?: number;
                region?: number;
                originXGlobal?: number;
                originYGlobal?: number;
                inGameId?: null | number;
            };
            relationships?: {
                locations?: components["schemas"]["_toManyRelationshipWithLinks"];
                portals?: components["schemas"]["_toManyRelationshipWithLinks"];
                items?: components["schemas"]["_toManyRelationshipWithLinks"];
                skills?: components["schemas"]["_toManyRelationshipWithLinks"];
                npcs?: components["schemas"]["_toManyRelationshipWithLinks"];
            };
        };
        /** @description Input for creating a "Area" */
        AreaCreateRequest: {
            /** @description The "Area" model */
            data: {
                type: string;
                attributes: {
                    /** Format: date-time */
                    createdAt?: string;
                    spriteUrl: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    name: string;
                    slug: string;
                    note?: null | string;
                    height: number;
                    width: number;
                    region: number;
                    originXGlobal: number;
                    originYGlobal: number;
                    inGameId?: null | number;
                };
                relationships?: {
                    locations?: components["schemas"]["_toManyRelationship"];
                    portals?: components["schemas"]["_toManyRelationship"];
                    items?: components["schemas"]["_toManyRelationship"];
                    skills?: components["schemas"]["_toManyRelationship"];
                    npcs?: components["schemas"]["_toManyRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Input for updating a "Area" */
        AreaUpdateRequest: {
            /** @description The "Area" model */
            data: {
                id: string;
                type: string;
                attributes: {
                    /** Format: date-time */
                    createdAt?: string;
                    spriteUrl?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    name?: string;
                    slug?: string;
                    note?: null | string;
                    height?: number;
                    width?: number;
                    region?: number;
                    originXGlobal?: number;
                    originYGlobal?: number;
                    inGameId?: null | number;
                };
                relationships?: {
                    locations?: components["schemas"]["_toManyRelationship"];
                    portals?: components["schemas"]["_toManyRelationship"];
                    items?: components["schemas"]["_toManyRelationship"];
                    skills?: components["schemas"]["_toManyRelationship"];
                    npcs?: components["schemas"]["_toManyRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Response for a "Area" */
        AreaResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: components["schemas"]["Area"] & {
                relationships?: {
                    locations?: components["schemas"]["_toManyRelationship"];
                    portals?: components["schemas"]["_toManyRelationship"];
                    items?: components["schemas"]["_toManyRelationship"];
                    skills?: components["schemas"]["_toManyRelationship"];
                    npcs?: components["schemas"]["_toManyRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links?: components["schemas"]["_links"];
        };
        /** @description Response for a list of "Area" */
        AreaListResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: (components["schemas"]["Area"] & {
                relationships?: {
                    locations?: components["schemas"]["_toManyRelationship"];
                    portals?: components["schemas"]["_toManyRelationship"];
                    items?: components["schemas"]["_toManyRelationship"];
                    skills?: components["schemas"]["_toManyRelationship"];
                    npcs?: components["schemas"]["_toManyRelationship"];
                };
            })[];
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links: components["schemas"]["_links"] & components["schemas"]["_pagination"];
        };
        /** @description The "Skill" model */
        Skill: {
            id: string;
            type: string;
            attributes: {
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                name?: string;
                slug?: string;
                rank?: number;
                desc?: null | string;
                note?: null | string;
                spriteUrl?: string;
                type?: null | components["schemas"]["SkillType"];
                levelReq?: number;
                reqStr?: null | number;
                reqSta?: null | number;
                reqAgi?: null | number;
                reqInt?: null | number;
                range?: null | number;
                atkPower?: null | number;
                str?: null | number;
                sta?: null | number;
                agi?: null | number;
                int?: null | number;
                armor?: null | number;
                crit?: null | number;
                dodge?: null | number;
                health?: null | number;
                energy?: null | number;
                atkSpeed?: null | number;
                minValue?: null | number;
                maxValue?: null | number;
                value?: null | number;
                castCooldownTimeSec?: null | number;
                castTimeSec?: null | number;
                durationMins?: null | number;
                energyCost?: null | number;
                tickDurationSec?: null | number;
                inGameId?: null | number;
                areaId?: null | string;
            };
            relationships?: {
                area?: null | components["schemas"]["_toOneRelationshipWithLinks"];
                items?: components["schemas"]["_toManyRelationshipWithLinks"];
            };
        };
        /** @description Input for creating a "Skill" */
        SkillCreateRequest: {
            /** @description The "Skill" model */
            data: {
                type: string;
                attributes: {
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    name: string;
                    slug: string;
                    rank: number;
                    desc?: null | string;
                    note?: null | string;
                    spriteUrl: string;
                    type?: null | components["schemas"]["SkillType"];
                    levelReq?: number;
                    reqStr?: null | number;
                    reqSta?: null | number;
                    reqAgi?: null | number;
                    reqInt?: null | number;
                    range?: null | number;
                    atkPower?: null | number;
                    str?: null | number;
                    sta?: null | number;
                    agi?: null | number;
                    int?: null | number;
                    armor?: null | number;
                    crit?: null | number;
                    dodge?: null | number;
                    health?: null | number;
                    energy?: null | number;
                    atkSpeed?: null | number;
                    minValue?: null | number;
                    maxValue?: null | number;
                    value?: null | number;
                    castCooldownTimeSec?: null | number;
                    castTimeSec?: null | number;
                    durationMins?: null | number;
                    energyCost?: null | number;
                    tickDurationSec?: null | number;
                    inGameId?: null | number;
                    areaId?: null | string;
                };
                relationships?: {
                    area?: null | components["schemas"]["_toOneRelationship"];
                    items?: components["schemas"]["_toManyRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Input for updating a "Skill" */
        SkillUpdateRequest: {
            /** @description The "Skill" model */
            data: {
                id: string;
                type: string;
                attributes: {
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    name?: string;
                    slug?: string;
                    rank?: number;
                    desc?: null | string;
                    note?: null | string;
                    spriteUrl?: string;
                    type?: null | components["schemas"]["SkillType"];
                    levelReq?: number;
                    reqStr?: null | number;
                    reqSta?: null | number;
                    reqAgi?: null | number;
                    reqInt?: null | number;
                    range?: null | number;
                    atkPower?: null | number;
                    str?: null | number;
                    sta?: null | number;
                    agi?: null | number;
                    int?: null | number;
                    armor?: null | number;
                    crit?: null | number;
                    dodge?: null | number;
                    health?: null | number;
                    energy?: null | number;
                    atkSpeed?: null | number;
                    minValue?: null | number;
                    maxValue?: null | number;
                    value?: null | number;
                    castCooldownTimeSec?: null | number;
                    castTimeSec?: null | number;
                    durationMins?: null | number;
                    energyCost?: null | number;
                    tickDurationSec?: null | number;
                    inGameId?: null | number;
                    areaId?: null | string;
                };
                relationships?: {
                    area?: null | components["schemas"]["_toOneRelationship"];
                    items?: components["schemas"]["_toManyRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Response for a "Skill" */
        SkillResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: components["schemas"]["Skill"] & {
                relationships?: {
                    area?: components["schemas"]["_toOneRelationship"];
                    items?: components["schemas"]["_toManyRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links?: components["schemas"]["_links"];
        };
        /** @description Response for a list of "Skill" */
        SkillListResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: (components["schemas"]["Skill"] & {
                relationships?: {
                    area?: components["schemas"]["_toOneRelationship"];
                    items?: components["schemas"]["_toManyRelationship"];
                };
            })[];
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links: components["schemas"]["_links"] & components["schemas"]["_pagination"];
        };
        /** @description The "Faction" model */
        Faction: {
            id: string;
            type: string;
            attributes: {
                /** Format: date-time */
                createdAt?: string;
                spriteUrl?: null | string;
                /** Format: date-time */
                updatedAt?: string;
                name?: string;
                slug?: string;
                note?: null | string;
                inGameId?: null | number;
            };
            relationships?: {
                mobs?: components["schemas"]["_toManyRelationshipWithLinks"];
            };
        };
        /** @description Input for creating a "Faction" */
        FactionCreateRequest: {
            /** @description The "Faction" model */
            data: {
                type: string;
                attributes: {
                    /** Format: date-time */
                    createdAt?: string;
                    spriteUrl?: null | string;
                    /** Format: date-time */
                    updatedAt?: string;
                    name: string;
                    slug: string;
                    note?: null | string;
                    inGameId?: null | number;
                };
                relationships?: {
                    mobs?: components["schemas"]["_toManyRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Input for updating a "Faction" */
        FactionUpdateRequest: {
            /** @description The "Faction" model */
            data: {
                id: string;
                type: string;
                attributes: {
                    /** Format: date-time */
                    createdAt?: string;
                    spriteUrl?: null | string;
                    /** Format: date-time */
                    updatedAt?: string;
                    name?: string;
                    slug?: string;
                    note?: null | string;
                    inGameId?: null | number;
                };
                relationships?: {
                    mobs?: components["schemas"]["_toManyRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Response for a "Faction" */
        FactionResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: components["schemas"]["Faction"] & {
                relationships?: {
                    mobs?: components["schemas"]["_toManyRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links?: components["schemas"]["_links"];
        };
        /** @description Response for a list of "Faction" */
        FactionListResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: (components["schemas"]["Faction"] & {
                relationships?: {
                    mobs?: components["schemas"]["_toManyRelationship"];
                };
            })[];
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links: components["schemas"]["_links"] & components["schemas"]["_pagination"];
        };
        /** @description The "Account" model */
        Account: {
            id: string;
            type: string;
            attributes: {
                userId?: string;
                type?: string;
                provider?: string;
                providerAccountId?: string;
                refresh_token?: null | string;
                access_token?: null | string;
                expires_at?: null | number;
                token_type?: null | string;
                scope?: null | string;
                id_token?: null | string;
                session_state?: null | string;
            };
            relationships?: {
                user?: components["schemas"]["_toOneRelationshipWithLinks"];
            };
        };
        /** @description Input for creating a "Account" */
        AccountCreateRequest: {
            /** @description The "Account" model */
            data: {
                type: string;
                attributes: {
                    userId: string;
                    type: string;
                    provider: string;
                    providerAccountId: string;
                    refresh_token?: null | string;
                    access_token?: null | string;
                    expires_at?: null | number;
                    token_type?: null | string;
                    scope?: null | string;
                    id_token?: null | string;
                    session_state?: null | string;
                };
                relationships?: {
                    user?: components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Input for updating a "Account" */
        AccountUpdateRequest: {
            /** @description The "Account" model */
            data: {
                id: string;
                type: string;
                attributes: {
                    userId?: string;
                    type?: string;
                    provider?: string;
                    providerAccountId?: string;
                    refresh_token?: null | string;
                    access_token?: null | string;
                    expires_at?: null | number;
                    token_type?: null | string;
                    scope?: null | string;
                    id_token?: null | string;
                    session_state?: null | string;
                };
                relationships?: {
                    user?: components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Response for a "Account" */
        AccountResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: components["schemas"]["Account"] & {
                relationships?: {
                    user?: components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links?: components["schemas"]["_links"];
        };
        /** @description Response for a list of "Account" */
        AccountListResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: (components["schemas"]["Account"] & {
                relationships?: {
                    user?: components["schemas"]["_toOneRelationship"];
                };
            })[];
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links: components["schemas"]["_links"] & components["schemas"]["_pagination"];
        };
        /** @description The "Session" model */
        Session: {
            id: string;
            type: string;
            attributes: {
                sessionToken?: string;
                userId?: string;
                /** Format: date-time */
                expires?: string;
            };
            relationships?: {
                user?: components["schemas"]["_toOneRelationshipWithLinks"];
            };
        };
        /** @description Input for creating a "Session" */
        SessionCreateRequest: {
            /** @description The "Session" model */
            data: {
                type: string;
                attributes: {
                    sessionToken: string;
                    userId: string;
                    /** Format: date-time */
                    expires: string;
                };
                relationships?: {
                    user?: components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Input for updating a "Session" */
        SessionUpdateRequest: {
            /** @description The "Session" model */
            data: {
                id: string;
                type: string;
                attributes: {
                    sessionToken?: string;
                    userId?: string;
                    /** Format: date-time */
                    expires?: string;
                };
                relationships?: {
                    user?: components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Response for a "Session" */
        SessionResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: components["schemas"]["Session"] & {
                relationships?: {
                    user?: components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links?: components["schemas"]["_links"];
        };
        /** @description Response for a list of "Session" */
        SessionListResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: (components["schemas"]["Session"] & {
                relationships?: {
                    user?: components["schemas"]["_toOneRelationship"];
                };
            })[];
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links: components["schemas"]["_links"] & components["schemas"]["_pagination"];
        };
        /** @description The "User" model */
        User: {
            id: string;
            type: string;
            attributes: {
                name?: null | string;
                email?: null | string;
                emailVerified?: null | string;
                image?: null | string;
                role?: components["schemas"]["Role"];
            };
            relationships?: {
                accounts?: components["schemas"]["_toManyRelationshipWithLinks"];
                sessions?: components["schemas"]["_toManyRelationshipWithLinks"];
                collection?: components["schemas"]["_toManyRelationshipWithLinks"];
            };
        };
        /** @description Input for creating a "User" */
        UserCreateRequest: {
            /** @description The "User" model */
            data: {
                type: string;
                attributes: {
                    name?: null | string;
                    email?: null | string;
                    emailVerified?: null | string;
                    image?: null | string;
                    role?: components["schemas"]["Role"];
                };
                relationships?: {
                    accounts?: components["schemas"]["_toManyRelationship"];
                    sessions?: components["schemas"]["_toManyRelationship"];
                    collection?: components["schemas"]["_toManyRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Input for updating a "User" */
        UserUpdateRequest: {
            /** @description The "User" model */
            data: {
                id: string;
                type: string;
                attributes: {
                    name?: null | string;
                    email?: null | string;
                    emailVerified?: null | string;
                    image?: null | string;
                    role?: components["schemas"]["Role"];
                };
                relationships?: {
                    accounts?: components["schemas"]["_toManyRelationship"];
                    sessions?: components["schemas"]["_toManyRelationship"];
                    collection?: components["schemas"]["_toManyRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Response for a "User" */
        UserResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: components["schemas"]["User"] & {
                relationships?: {
                    accounts?: components["schemas"]["_toManyRelationship"];
                    sessions?: components["schemas"]["_toManyRelationship"];
                    collection?: components["schemas"]["_toManyRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links?: components["schemas"]["_links"];
        };
        /** @description Response for a list of "User" */
        UserListResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: (components["schemas"]["User"] & {
                relationships?: {
                    accounts?: components["schemas"]["_toManyRelationship"];
                    sessions?: components["schemas"]["_toManyRelationship"];
                    collection?: components["schemas"]["_toManyRelationship"];
                };
            })[];
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links: components["schemas"]["_links"] & components["schemas"]["_pagination"];
        };
        /** @description The "VerificationToken" model */
        VerificationToken: {
            id: string;
            type: string;
            attributes: {
                identifier?: string;
                /** Format: date-time */
                expires?: string;
            };
        };
        /** @description Input for creating a "VerificationToken" */
        VerificationTokenCreateRequest: {
            /** @description The "VerificationToken" model */
            data: {
                id: string;
                type: string;
                attributes: {
                    identifier: string;
                    /** Format: date-time */
                    expires: string;
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Input for updating a "VerificationToken" */
        VerificationTokenUpdateRequest: {
            /** @description The "VerificationToken" model */
            data: {
                id: string;
                type: string;
                attributes: {
                    identifier?: string;
                    /** Format: date-time */
                    expires?: string;
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Response for a "VerificationToken" */
        VerificationTokenResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: components["schemas"]["VerificationToken"] & {
                relationships?: Record<string, never>;
            };
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links?: components["schemas"]["_links"];
        };
        /** @description Response for a list of "VerificationToken" */
        VerificationTokenListResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: (components["schemas"]["VerificationToken"] & {
                relationships?: Record<string, never>;
            })[];
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links: components["schemas"]["_links"] & components["schemas"]["_pagination"];
        };
        /** @description The "CollectionItem" model */
        CollectionItem: {
            id: string;
            type: string;
            attributes: {
                /** Format: date-time */
                addedAt?: string;
                quantity?: number;
            };
            relationships?: {
                user?: components["schemas"]["_toOneRelationshipWithLinks"];
                item?: components["schemas"]["_toOneRelationshipWithLinks"];
            };
        };
        /** @description Input for creating a "CollectionItem" */
        CollectionItemCreateRequest: {
            /** @description The "CollectionItem" model */
            data: {
                id: string;
                type: string;
                attributes: {
                    /** Format: date-time */
                    addedAt?: string;
                    quantity?: number;
                };
                relationships?: {
                    user?: components["schemas"]["_toOneRelationship"];
                    item?: components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Input for updating a "CollectionItem" */
        CollectionItemUpdateRequest: {
            /** @description The "CollectionItem" model */
            data: {
                id: string;
                type: string;
                attributes: {
                    /** Format: date-time */
                    addedAt?: string;
                    quantity?: number;
                };
                relationships?: {
                    user?: components["schemas"]["_toOneRelationship"];
                    item?: components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
        };
        /** @description Response for a "CollectionItem" */
        CollectionItemResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: components["schemas"]["CollectionItem"] & {
                relationships?: {
                    user?: components["schemas"]["_toOneRelationship"];
                    item?: components["schemas"]["_toOneRelationship"];
                };
            };
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links?: components["schemas"]["_links"];
        };
        /** @description Response for a list of "CollectionItem" */
        CollectionItemListResponse: {
            jsonapi?: components["schemas"]["_jsonapi"];
            data: (components["schemas"]["CollectionItem"] & {
                relationships?: {
                    user?: components["schemas"]["_toOneRelationship"];
                    item?: components["schemas"]["_toOneRelationship"];
                };
            })[];
            meta?: components["schemas"]["_meta"];
            included?: components["schemas"]["_resource"][];
            links: components["schemas"]["_links"] & components["schemas"]["_pagination"];
        };
    };
    responses: never;
    parameters: {
        /** @description The resource id */
        id: string;
        /** @description Relationships to include */
        include: string;
        /** @description Fields to sort by */
        sort: string;
        /** @description Offset for pagination */
        "page-offset": number;
        /** @description Limit for pagination */
        "page-limit": number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "list-Mob": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "desc" */
                "filter[desc]"?: string;
                /** @description String contains filter for "desc" */
                "filter[desc$contains]"?: string;
                /** @description String case-insensitive contains filter for "desc" */
                "filter[desc$icontains]"?: string;
                /** @description String full-text search filter for "desc" */
                "filter[desc$search]"?: string;
                /** @description String startsWith filter for "desc" */
                "filter[desc$startsWith]"?: string;
                /** @description String endsWith filter for "desc" */
                "filter[desc$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "level" */
                "filter[level]"?: number;
                /** @description Less-than filter for "level" */
                "filter[level$lt]"?: number;
                /** @description Less-than or equal filter for "level" */
                "filter[level$lte]"?: number;
                /** @description Greater-than filter for "level" */
                "filter[level$gt]"?: number;
                /** @description Greater-than or equal filter for "level" */
                "filter[level$gte]"?: number;
                /** @description Equality filter for "health" */
                "filter[health]"?: number;
                /** @description Less-than filter for "health" */
                "filter[health$lt]"?: number;
                /** @description Less-than or equal filter for "health" */
                "filter[health$lte]"?: number;
                /** @description Greater-than filter for "health" */
                "filter[health$gt]"?: number;
                /** @description Greater-than or equal filter for "health" */
                "filter[health$gte]"?: number;
                /** @description Equality filter for "goldMin" */
                "filter[goldMin]"?: number;
                /** @description Less-than filter for "goldMin" */
                "filter[goldMin$lt]"?: number;
                /** @description Less-than or equal filter for "goldMin" */
                "filter[goldMin$lte]"?: number;
                /** @description Greater-than filter for "goldMin" */
                "filter[goldMin$gt]"?: number;
                /** @description Greater-than or equal filter for "goldMin" */
                "filter[goldMin$gte]"?: number;
                /** @description Equality filter for "goldMax" */
                "filter[goldMax]"?: number;
                /** @description Less-than filter for "goldMax" */
                "filter[goldMax$lt]"?: number;
                /** @description Less-than or equal filter for "goldMax" */
                "filter[goldMax$lte]"?: number;
                /** @description Greater-than filter for "goldMax" */
                "filter[goldMax$gt]"?: number;
                /** @description Greater-than or equal filter for "goldMax" */
                "filter[goldMax$gte]"?: number;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "boss" */
                "filter[boss]"?: boolean;
                /** @description Equality filter for "drops" */
                "filter[drops]"?: string[];
                /** @description Equality filter for "locations" */
                "filter[locations]"?: string[];
                /** @description Equality filter for "atkSpeed" */
                "filter[atkSpeed]"?: number;
                /** @description Less-than filter for "atkSpeed" */
                "filter[atkSpeed$lt]"?: number;
                /** @description Less-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$lte]"?: number;
                /** @description Greater-than filter for "atkSpeed" */
                "filter[atkSpeed$gt]"?: number;
                /** @description Greater-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$gte]"?: number;
                /** @description Equality filter for "dmgMin" */
                "filter[dmgMin]"?: number;
                /** @description Less-than filter for "dmgMin" */
                "filter[dmgMin$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMin" */
                "filter[dmgMin$lte]"?: number;
                /** @description Greater-than filter for "dmgMin" */
                "filter[dmgMin$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMin" */
                "filter[dmgMin$gte]"?: number;
                /** @description Equality filter for "dmgMax" */
                "filter[dmgMax]"?: number;
                /** @description Less-than filter for "dmgMax" */
                "filter[dmgMax$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMax" */
                "filter[dmgMax$lte]"?: number;
                /** @description Greater-than filter for "dmgMax" */
                "filter[dmgMax$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMax" */
                "filter[dmgMax$gte]"?: number;
                /** @description Equality filter for "numSpawns" */
                "filter[numSpawns]"?: number;
                /** @description Less-than filter for "numSpawns" */
                "filter[numSpawns$lt]"?: number;
                /** @description Less-than or equal filter for "numSpawns" */
                "filter[numSpawns$lte]"?: number;
                /** @description Greater-than filter for "numSpawns" */
                "filter[numSpawns$gt]"?: number;
                /** @description Greater-than or equal filter for "numSpawns" */
                "filter[numSpawns$gte]"?: number;
                /** @description Equality filter for "spawnTimeSec" */
                "filter[spawnTimeSec]"?: number;
                /** @description Less-than filter for "spawnTimeSec" */
                "filter[spawnTimeSec$lt]"?: number;
                /** @description Less-than or equal filter for "spawnTimeSec" */
                "filter[spawnTimeSec$lte]"?: number;
                /** @description Greater-than filter for "spawnTimeSec" */
                "filter[spawnTimeSec$gt]"?: number;
                /** @description Greater-than or equal filter for "spawnTimeSec" */
                "filter[spawnTimeSec$gte]"?: number;
                /** @description Equality filter for "range" */
                "filter[range]"?: number;
                /** @description Less-than filter for "range" */
                "filter[range$lt]"?: number;
                /** @description Less-than or equal filter for "range" */
                "filter[range$lte]"?: number;
                /** @description Greater-than filter for "range" */
                "filter[range$gt]"?: number;
                /** @description Greater-than or equal filter for "range" */
                "filter[range$gte]"?: number;
                /** @description Equality filter for "str" */
                "filter[str]"?: number;
                /** @description Less-than filter for "str" */
                "filter[str$lt]"?: number;
                /** @description Less-than or equal filter for "str" */
                "filter[str$lte]"?: number;
                /** @description Greater-than filter for "str" */
                "filter[str$gt]"?: number;
                /** @description Greater-than or equal filter for "str" */
                "filter[str$gte]"?: number;
                /** @description Equality filter for "sta" */
                "filter[sta]"?: number;
                /** @description Less-than filter for "sta" */
                "filter[sta$lt]"?: number;
                /** @description Less-than or equal filter for "sta" */
                "filter[sta$lte]"?: number;
                /** @description Greater-than filter for "sta" */
                "filter[sta$gt]"?: number;
                /** @description Greater-than or equal filter for "sta" */
                "filter[sta$gte]"?: number;
                /** @description Equality filter for "agi" */
                "filter[agi]"?: number;
                /** @description Less-than filter for "agi" */
                "filter[agi$lt]"?: number;
                /** @description Less-than or equal filter for "agi" */
                "filter[agi$lte]"?: number;
                /** @description Greater-than filter for "agi" */
                "filter[agi$gt]"?: number;
                /** @description Greater-than or equal filter for "agi" */
                "filter[agi$gte]"?: number;
                /** @description Equality filter for "int" */
                "filter[int]"?: number;
                /** @description Less-than filter for "int" */
                "filter[int$lt]"?: number;
                /** @description Less-than or equal filter for "int" */
                "filter[int$lte]"?: number;
                /** @description Greater-than filter for "int" */
                "filter[int$gt]"?: number;
                /** @description Greater-than or equal filter for "int" */
                "filter[int$gte]"?: number;
                /** @description Equality filter for "armor" */
                "filter[armor]"?: number;
                /** @description Less-than filter for "armor" */
                "filter[armor$lt]"?: number;
                /** @description Less-than or equal filter for "armor" */
                "filter[armor$lte]"?: number;
                /** @description Greater-than filter for "armor" */
                "filter[armor$gt]"?: number;
                /** @description Greater-than or equal filter for "armor" */
                "filter[armor$gte]"?: number;
                /** @description Equality filter for "crit" */
                "filter[crit]"?: number;
                /** @description Less-than filter for "crit" */
                "filter[crit$lt]"?: number;
                /** @description Less-than or equal filter for "crit" */
                "filter[crit$lte]"?: number;
                /** @description Greater-than filter for "crit" */
                "filter[crit$gt]"?: number;
                /** @description Greater-than or equal filter for "crit" */
                "filter[crit$gte]"?: number;
                /** @description Equality filter for "dodge" */
                "filter[dodge]"?: number;
                /** @description Less-than filter for "dodge" */
                "filter[dodge$lt]"?: number;
                /** @description Less-than or equal filter for "dodge" */
                "filter[dodge$lte]"?: number;
                /** @description Greater-than filter for "dodge" */
                "filter[dodge$gt]"?: number;
                /** @description Greater-than or equal filter for "dodge" */
                "filter[dodge$gte]"?: number;
                /** @description Equality filter for "factionXp" */
                "filter[factionXp]"?: number;
                /** @description Less-than filter for "factionXp" */
                "filter[factionXp$lt]"?: number;
                /** @description Less-than or equal filter for "factionXp" */
                "filter[factionXp$lte]"?: number;
                /** @description Greater-than filter for "factionXp" */
                "filter[factionXp$gt]"?: number;
                /** @description Greater-than or equal filter for "factionXp" */
                "filter[factionXp$gte]"?: number;
                /** @description Equality filter for "faction" */
                "filter[faction]"?: string;
                /** @description Equality filter for "artist" */
                "filter[artist]"?: string;
                /** @description String contains filter for "artist" */
                "filter[artist$contains]"?: string;
                /** @description String case-insensitive contains filter for "artist" */
                "filter[artist$icontains]"?: string;
                /** @description String full-text search filter for "artist" */
                "filter[artist$search]"?: string;
                /** @description String startsWith filter for "artist" */
                "filter[artist$startsWith]"?: string;
                /** @description String endsWith filter for "artist" */
                "filter[artist$endsWith]"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["MobListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Mob": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["MobCreateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["MobResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Mob": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["MobResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Mob-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["MobUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["MobResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "delete-Mob": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Mob-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["MobUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["MobResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Mob-related-drops": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "desc" */
                "filter[desc]"?: string;
                /** @description String contains filter for "desc" */
                "filter[desc$contains]"?: string;
                /** @description String case-insensitive contains filter for "desc" */
                "filter[desc$icontains]"?: string;
                /** @description String full-text search filter for "desc" */
                "filter[desc$search]"?: string;
                /** @description String startsWith filter for "desc" */
                "filter[desc$startsWith]"?: string;
                /** @description String endsWith filter for "desc" */
                "filter[desc$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "level" */
                "filter[level]"?: number;
                /** @description Less-than filter for "level" */
                "filter[level$lt]"?: number;
                /** @description Less-than or equal filter for "level" */
                "filter[level$lte]"?: number;
                /** @description Greater-than filter for "level" */
                "filter[level$gt]"?: number;
                /** @description Greater-than or equal filter for "level" */
                "filter[level$gte]"?: number;
                /** @description Equality filter for "health" */
                "filter[health]"?: number;
                /** @description Less-than filter for "health" */
                "filter[health$lt]"?: number;
                /** @description Less-than or equal filter for "health" */
                "filter[health$lte]"?: number;
                /** @description Greater-than filter for "health" */
                "filter[health$gt]"?: number;
                /** @description Greater-than or equal filter for "health" */
                "filter[health$gte]"?: number;
                /** @description Equality filter for "goldMin" */
                "filter[goldMin]"?: number;
                /** @description Less-than filter for "goldMin" */
                "filter[goldMin$lt]"?: number;
                /** @description Less-than or equal filter for "goldMin" */
                "filter[goldMin$lte]"?: number;
                /** @description Greater-than filter for "goldMin" */
                "filter[goldMin$gt]"?: number;
                /** @description Greater-than or equal filter for "goldMin" */
                "filter[goldMin$gte]"?: number;
                /** @description Equality filter for "goldMax" */
                "filter[goldMax]"?: number;
                /** @description Less-than filter for "goldMax" */
                "filter[goldMax$lt]"?: number;
                /** @description Less-than or equal filter for "goldMax" */
                "filter[goldMax$lte]"?: number;
                /** @description Greater-than filter for "goldMax" */
                "filter[goldMax$gt]"?: number;
                /** @description Greater-than or equal filter for "goldMax" */
                "filter[goldMax$gte]"?: number;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "boss" */
                "filter[boss]"?: boolean;
                /** @description Equality filter for "drops" */
                "filter[drops]"?: string[];
                /** @description Equality filter for "locations" */
                "filter[locations]"?: string[];
                /** @description Equality filter for "atkSpeed" */
                "filter[atkSpeed]"?: number;
                /** @description Less-than filter for "atkSpeed" */
                "filter[atkSpeed$lt]"?: number;
                /** @description Less-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$lte]"?: number;
                /** @description Greater-than filter for "atkSpeed" */
                "filter[atkSpeed$gt]"?: number;
                /** @description Greater-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$gte]"?: number;
                /** @description Equality filter for "dmgMin" */
                "filter[dmgMin]"?: number;
                /** @description Less-than filter for "dmgMin" */
                "filter[dmgMin$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMin" */
                "filter[dmgMin$lte]"?: number;
                /** @description Greater-than filter for "dmgMin" */
                "filter[dmgMin$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMin" */
                "filter[dmgMin$gte]"?: number;
                /** @description Equality filter for "dmgMax" */
                "filter[dmgMax]"?: number;
                /** @description Less-than filter for "dmgMax" */
                "filter[dmgMax$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMax" */
                "filter[dmgMax$lte]"?: number;
                /** @description Greater-than filter for "dmgMax" */
                "filter[dmgMax$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMax" */
                "filter[dmgMax$gte]"?: number;
                /** @description Equality filter for "numSpawns" */
                "filter[numSpawns]"?: number;
                /** @description Less-than filter for "numSpawns" */
                "filter[numSpawns$lt]"?: number;
                /** @description Less-than or equal filter for "numSpawns" */
                "filter[numSpawns$lte]"?: number;
                /** @description Greater-than filter for "numSpawns" */
                "filter[numSpawns$gt]"?: number;
                /** @description Greater-than or equal filter for "numSpawns" */
                "filter[numSpawns$gte]"?: number;
                /** @description Equality filter for "spawnTimeSec" */
                "filter[spawnTimeSec]"?: number;
                /** @description Less-than filter for "spawnTimeSec" */
                "filter[spawnTimeSec$lt]"?: number;
                /** @description Less-than or equal filter for "spawnTimeSec" */
                "filter[spawnTimeSec$lte]"?: number;
                /** @description Greater-than filter for "spawnTimeSec" */
                "filter[spawnTimeSec$gt]"?: number;
                /** @description Greater-than or equal filter for "spawnTimeSec" */
                "filter[spawnTimeSec$gte]"?: number;
                /** @description Equality filter for "range" */
                "filter[range]"?: number;
                /** @description Less-than filter for "range" */
                "filter[range$lt]"?: number;
                /** @description Less-than or equal filter for "range" */
                "filter[range$lte]"?: number;
                /** @description Greater-than filter for "range" */
                "filter[range$gt]"?: number;
                /** @description Greater-than or equal filter for "range" */
                "filter[range$gte]"?: number;
                /** @description Equality filter for "str" */
                "filter[str]"?: number;
                /** @description Less-than filter for "str" */
                "filter[str$lt]"?: number;
                /** @description Less-than or equal filter for "str" */
                "filter[str$lte]"?: number;
                /** @description Greater-than filter for "str" */
                "filter[str$gt]"?: number;
                /** @description Greater-than or equal filter for "str" */
                "filter[str$gte]"?: number;
                /** @description Equality filter for "sta" */
                "filter[sta]"?: number;
                /** @description Less-than filter for "sta" */
                "filter[sta$lt]"?: number;
                /** @description Less-than or equal filter for "sta" */
                "filter[sta$lte]"?: number;
                /** @description Greater-than filter for "sta" */
                "filter[sta$gt]"?: number;
                /** @description Greater-than or equal filter for "sta" */
                "filter[sta$gte]"?: number;
                /** @description Equality filter for "agi" */
                "filter[agi]"?: number;
                /** @description Less-than filter for "agi" */
                "filter[agi$lt]"?: number;
                /** @description Less-than or equal filter for "agi" */
                "filter[agi$lte]"?: number;
                /** @description Greater-than filter for "agi" */
                "filter[agi$gt]"?: number;
                /** @description Greater-than or equal filter for "agi" */
                "filter[agi$gte]"?: number;
                /** @description Equality filter for "int" */
                "filter[int]"?: number;
                /** @description Less-than filter for "int" */
                "filter[int$lt]"?: number;
                /** @description Less-than or equal filter for "int" */
                "filter[int$lte]"?: number;
                /** @description Greater-than filter for "int" */
                "filter[int$gt]"?: number;
                /** @description Greater-than or equal filter for "int" */
                "filter[int$gte]"?: number;
                /** @description Equality filter for "armor" */
                "filter[armor]"?: number;
                /** @description Less-than filter for "armor" */
                "filter[armor$lt]"?: number;
                /** @description Less-than or equal filter for "armor" */
                "filter[armor$lte]"?: number;
                /** @description Greater-than filter for "armor" */
                "filter[armor$gt]"?: number;
                /** @description Greater-than or equal filter for "armor" */
                "filter[armor$gte]"?: number;
                /** @description Equality filter for "crit" */
                "filter[crit]"?: number;
                /** @description Less-than filter for "crit" */
                "filter[crit$lt]"?: number;
                /** @description Less-than or equal filter for "crit" */
                "filter[crit$lte]"?: number;
                /** @description Greater-than filter for "crit" */
                "filter[crit$gt]"?: number;
                /** @description Greater-than or equal filter for "crit" */
                "filter[crit$gte]"?: number;
                /** @description Equality filter for "dodge" */
                "filter[dodge]"?: number;
                /** @description Less-than filter for "dodge" */
                "filter[dodge$lt]"?: number;
                /** @description Less-than or equal filter for "dodge" */
                "filter[dodge$lte]"?: number;
                /** @description Greater-than filter for "dodge" */
                "filter[dodge$gt]"?: number;
                /** @description Greater-than or equal filter for "dodge" */
                "filter[dodge$gte]"?: number;
                /** @description Equality filter for "factionXp" */
                "filter[factionXp]"?: number;
                /** @description Less-than filter for "factionXp" */
                "filter[factionXp$lt]"?: number;
                /** @description Less-than or equal filter for "factionXp" */
                "filter[factionXp$lte]"?: number;
                /** @description Greater-than filter for "factionXp" */
                "filter[factionXp$gt]"?: number;
                /** @description Greater-than or equal filter for "factionXp" */
                "filter[factionXp$gte]"?: number;
                /** @description Equality filter for "faction" */
                "filter[faction]"?: string;
                /** @description Equality filter for "artist" */
                "filter[artist]"?: string;
                /** @description String contains filter for "artist" */
                "filter[artist$contains]"?: string;
                /** @description String case-insensitive contains filter for "artist" */
                "filter[artist$icontains]"?: string;
                /** @description String full-text search filter for "artist" */
                "filter[artist$search]"?: string;
                /** @description String startsWith filter for "artist" */
                "filter[artist$startsWith]"?: string;
                /** @description String endsWith filter for "artist" */
                "filter[artist$endsWith]"?: string;
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["LootListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Mob-relationship-drops": {
        parameters: {
            query?: {
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "desc" */
                "filter[desc]"?: string;
                /** @description String contains filter for "desc" */
                "filter[desc$contains]"?: string;
                /** @description String case-insensitive contains filter for "desc" */
                "filter[desc$icontains]"?: string;
                /** @description String full-text search filter for "desc" */
                "filter[desc$search]"?: string;
                /** @description String startsWith filter for "desc" */
                "filter[desc$startsWith]"?: string;
                /** @description String endsWith filter for "desc" */
                "filter[desc$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "level" */
                "filter[level]"?: number;
                /** @description Less-than filter for "level" */
                "filter[level$lt]"?: number;
                /** @description Less-than or equal filter for "level" */
                "filter[level$lte]"?: number;
                /** @description Greater-than filter for "level" */
                "filter[level$gt]"?: number;
                /** @description Greater-than or equal filter for "level" */
                "filter[level$gte]"?: number;
                /** @description Equality filter for "health" */
                "filter[health]"?: number;
                /** @description Less-than filter for "health" */
                "filter[health$lt]"?: number;
                /** @description Less-than or equal filter for "health" */
                "filter[health$lte]"?: number;
                /** @description Greater-than filter for "health" */
                "filter[health$gt]"?: number;
                /** @description Greater-than or equal filter for "health" */
                "filter[health$gte]"?: number;
                /** @description Equality filter for "goldMin" */
                "filter[goldMin]"?: number;
                /** @description Less-than filter for "goldMin" */
                "filter[goldMin$lt]"?: number;
                /** @description Less-than or equal filter for "goldMin" */
                "filter[goldMin$lte]"?: number;
                /** @description Greater-than filter for "goldMin" */
                "filter[goldMin$gt]"?: number;
                /** @description Greater-than or equal filter for "goldMin" */
                "filter[goldMin$gte]"?: number;
                /** @description Equality filter for "goldMax" */
                "filter[goldMax]"?: number;
                /** @description Less-than filter for "goldMax" */
                "filter[goldMax$lt]"?: number;
                /** @description Less-than or equal filter for "goldMax" */
                "filter[goldMax$lte]"?: number;
                /** @description Greater-than filter for "goldMax" */
                "filter[goldMax$gt]"?: number;
                /** @description Greater-than or equal filter for "goldMax" */
                "filter[goldMax$gte]"?: number;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "boss" */
                "filter[boss]"?: boolean;
                /** @description Equality filter for "drops" */
                "filter[drops]"?: string[];
                /** @description Equality filter for "locations" */
                "filter[locations]"?: string[];
                /** @description Equality filter for "atkSpeed" */
                "filter[atkSpeed]"?: number;
                /** @description Less-than filter for "atkSpeed" */
                "filter[atkSpeed$lt]"?: number;
                /** @description Less-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$lte]"?: number;
                /** @description Greater-than filter for "atkSpeed" */
                "filter[atkSpeed$gt]"?: number;
                /** @description Greater-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$gte]"?: number;
                /** @description Equality filter for "dmgMin" */
                "filter[dmgMin]"?: number;
                /** @description Less-than filter for "dmgMin" */
                "filter[dmgMin$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMin" */
                "filter[dmgMin$lte]"?: number;
                /** @description Greater-than filter for "dmgMin" */
                "filter[dmgMin$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMin" */
                "filter[dmgMin$gte]"?: number;
                /** @description Equality filter for "dmgMax" */
                "filter[dmgMax]"?: number;
                /** @description Less-than filter for "dmgMax" */
                "filter[dmgMax$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMax" */
                "filter[dmgMax$lte]"?: number;
                /** @description Greater-than filter for "dmgMax" */
                "filter[dmgMax$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMax" */
                "filter[dmgMax$gte]"?: number;
                /** @description Equality filter for "numSpawns" */
                "filter[numSpawns]"?: number;
                /** @description Less-than filter for "numSpawns" */
                "filter[numSpawns$lt]"?: number;
                /** @description Less-than or equal filter for "numSpawns" */
                "filter[numSpawns$lte]"?: number;
                /** @description Greater-than filter for "numSpawns" */
                "filter[numSpawns$gt]"?: number;
                /** @description Greater-than or equal filter for "numSpawns" */
                "filter[numSpawns$gte]"?: number;
                /** @description Equality filter for "spawnTimeSec" */
                "filter[spawnTimeSec]"?: number;
                /** @description Less-than filter for "spawnTimeSec" */
                "filter[spawnTimeSec$lt]"?: number;
                /** @description Less-than or equal filter for "spawnTimeSec" */
                "filter[spawnTimeSec$lte]"?: number;
                /** @description Greater-than filter for "spawnTimeSec" */
                "filter[spawnTimeSec$gt]"?: number;
                /** @description Greater-than or equal filter for "spawnTimeSec" */
                "filter[spawnTimeSec$gte]"?: number;
                /** @description Equality filter for "range" */
                "filter[range]"?: number;
                /** @description Less-than filter for "range" */
                "filter[range$lt]"?: number;
                /** @description Less-than or equal filter for "range" */
                "filter[range$lte]"?: number;
                /** @description Greater-than filter for "range" */
                "filter[range$gt]"?: number;
                /** @description Greater-than or equal filter for "range" */
                "filter[range$gte]"?: number;
                /** @description Equality filter for "str" */
                "filter[str]"?: number;
                /** @description Less-than filter for "str" */
                "filter[str$lt]"?: number;
                /** @description Less-than or equal filter for "str" */
                "filter[str$lte]"?: number;
                /** @description Greater-than filter for "str" */
                "filter[str$gt]"?: number;
                /** @description Greater-than or equal filter for "str" */
                "filter[str$gte]"?: number;
                /** @description Equality filter for "sta" */
                "filter[sta]"?: number;
                /** @description Less-than filter for "sta" */
                "filter[sta$lt]"?: number;
                /** @description Less-than or equal filter for "sta" */
                "filter[sta$lte]"?: number;
                /** @description Greater-than filter for "sta" */
                "filter[sta$gt]"?: number;
                /** @description Greater-than or equal filter for "sta" */
                "filter[sta$gte]"?: number;
                /** @description Equality filter for "agi" */
                "filter[agi]"?: number;
                /** @description Less-than filter for "agi" */
                "filter[agi$lt]"?: number;
                /** @description Less-than or equal filter for "agi" */
                "filter[agi$lte]"?: number;
                /** @description Greater-than filter for "agi" */
                "filter[agi$gt]"?: number;
                /** @description Greater-than or equal filter for "agi" */
                "filter[agi$gte]"?: number;
                /** @description Equality filter for "int" */
                "filter[int]"?: number;
                /** @description Less-than filter for "int" */
                "filter[int$lt]"?: number;
                /** @description Less-than or equal filter for "int" */
                "filter[int$lte]"?: number;
                /** @description Greater-than filter for "int" */
                "filter[int$gt]"?: number;
                /** @description Greater-than or equal filter for "int" */
                "filter[int$gte]"?: number;
                /** @description Equality filter for "armor" */
                "filter[armor]"?: number;
                /** @description Less-than filter for "armor" */
                "filter[armor$lt]"?: number;
                /** @description Less-than or equal filter for "armor" */
                "filter[armor$lte]"?: number;
                /** @description Greater-than filter for "armor" */
                "filter[armor$gt]"?: number;
                /** @description Greater-than or equal filter for "armor" */
                "filter[armor$gte]"?: number;
                /** @description Equality filter for "crit" */
                "filter[crit]"?: number;
                /** @description Less-than filter for "crit" */
                "filter[crit$lt]"?: number;
                /** @description Less-than or equal filter for "crit" */
                "filter[crit$lte]"?: number;
                /** @description Greater-than filter for "crit" */
                "filter[crit$gt]"?: number;
                /** @description Greater-than or equal filter for "crit" */
                "filter[crit$gte]"?: number;
                /** @description Equality filter for "dodge" */
                "filter[dodge]"?: number;
                /** @description Less-than filter for "dodge" */
                "filter[dodge$lt]"?: number;
                /** @description Less-than or equal filter for "dodge" */
                "filter[dodge$lte]"?: number;
                /** @description Greater-than filter for "dodge" */
                "filter[dodge$gt]"?: number;
                /** @description Greater-than or equal filter for "dodge" */
                "filter[dodge$gte]"?: number;
                /** @description Equality filter for "factionXp" */
                "filter[factionXp]"?: number;
                /** @description Less-than filter for "factionXp" */
                "filter[factionXp$lt]"?: number;
                /** @description Less-than or equal filter for "factionXp" */
                "filter[factionXp$lte]"?: number;
                /** @description Greater-than filter for "factionXp" */
                "filter[factionXp$gt]"?: number;
                /** @description Greater-than or equal filter for "factionXp" */
                "filter[factionXp$gte]"?: number;
                /** @description Equality filter for "faction" */
                "filter[faction]"?: string;
                /** @description Equality filter for "artist" */
                "filter[artist]"?: string;
                /** @description String contains filter for "artist" */
                "filter[artist$contains]"?: string;
                /** @description String case-insensitive contains filter for "artist" */
                "filter[artist$icontains]"?: string;
                /** @description String full-text search filter for "artist" */
                "filter[artist$search]"?: string;
                /** @description String startsWith filter for "artist" */
                "filter[artist$startsWith]"?: string;
                /** @description String endsWith filter for "artist" */
                "filter[artist$endsWith]"?: string;
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Mob-relationship-drops-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Mob-relationship-drops": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Mob-relationship-drops-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Mob-related-locations": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "desc" */
                "filter[desc]"?: string;
                /** @description String contains filter for "desc" */
                "filter[desc$contains]"?: string;
                /** @description String case-insensitive contains filter for "desc" */
                "filter[desc$icontains]"?: string;
                /** @description String full-text search filter for "desc" */
                "filter[desc$search]"?: string;
                /** @description String startsWith filter for "desc" */
                "filter[desc$startsWith]"?: string;
                /** @description String endsWith filter for "desc" */
                "filter[desc$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "level" */
                "filter[level]"?: number;
                /** @description Less-than filter for "level" */
                "filter[level$lt]"?: number;
                /** @description Less-than or equal filter for "level" */
                "filter[level$lte]"?: number;
                /** @description Greater-than filter for "level" */
                "filter[level$gt]"?: number;
                /** @description Greater-than or equal filter for "level" */
                "filter[level$gte]"?: number;
                /** @description Equality filter for "health" */
                "filter[health]"?: number;
                /** @description Less-than filter for "health" */
                "filter[health$lt]"?: number;
                /** @description Less-than or equal filter for "health" */
                "filter[health$lte]"?: number;
                /** @description Greater-than filter for "health" */
                "filter[health$gt]"?: number;
                /** @description Greater-than or equal filter for "health" */
                "filter[health$gte]"?: number;
                /** @description Equality filter for "goldMin" */
                "filter[goldMin]"?: number;
                /** @description Less-than filter for "goldMin" */
                "filter[goldMin$lt]"?: number;
                /** @description Less-than or equal filter for "goldMin" */
                "filter[goldMin$lte]"?: number;
                /** @description Greater-than filter for "goldMin" */
                "filter[goldMin$gt]"?: number;
                /** @description Greater-than or equal filter for "goldMin" */
                "filter[goldMin$gte]"?: number;
                /** @description Equality filter for "goldMax" */
                "filter[goldMax]"?: number;
                /** @description Less-than filter for "goldMax" */
                "filter[goldMax$lt]"?: number;
                /** @description Less-than or equal filter for "goldMax" */
                "filter[goldMax$lte]"?: number;
                /** @description Greater-than filter for "goldMax" */
                "filter[goldMax$gt]"?: number;
                /** @description Greater-than or equal filter for "goldMax" */
                "filter[goldMax$gte]"?: number;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "boss" */
                "filter[boss]"?: boolean;
                /** @description Equality filter for "drops" */
                "filter[drops]"?: string[];
                /** @description Equality filter for "locations" */
                "filter[locations]"?: string[];
                /** @description Equality filter for "atkSpeed" */
                "filter[atkSpeed]"?: number;
                /** @description Less-than filter for "atkSpeed" */
                "filter[atkSpeed$lt]"?: number;
                /** @description Less-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$lte]"?: number;
                /** @description Greater-than filter for "atkSpeed" */
                "filter[atkSpeed$gt]"?: number;
                /** @description Greater-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$gte]"?: number;
                /** @description Equality filter for "dmgMin" */
                "filter[dmgMin]"?: number;
                /** @description Less-than filter for "dmgMin" */
                "filter[dmgMin$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMin" */
                "filter[dmgMin$lte]"?: number;
                /** @description Greater-than filter for "dmgMin" */
                "filter[dmgMin$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMin" */
                "filter[dmgMin$gte]"?: number;
                /** @description Equality filter for "dmgMax" */
                "filter[dmgMax]"?: number;
                /** @description Less-than filter for "dmgMax" */
                "filter[dmgMax$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMax" */
                "filter[dmgMax$lte]"?: number;
                /** @description Greater-than filter for "dmgMax" */
                "filter[dmgMax$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMax" */
                "filter[dmgMax$gte]"?: number;
                /** @description Equality filter for "numSpawns" */
                "filter[numSpawns]"?: number;
                /** @description Less-than filter for "numSpawns" */
                "filter[numSpawns$lt]"?: number;
                /** @description Less-than or equal filter for "numSpawns" */
                "filter[numSpawns$lte]"?: number;
                /** @description Greater-than filter for "numSpawns" */
                "filter[numSpawns$gt]"?: number;
                /** @description Greater-than or equal filter for "numSpawns" */
                "filter[numSpawns$gte]"?: number;
                /** @description Equality filter for "spawnTimeSec" */
                "filter[spawnTimeSec]"?: number;
                /** @description Less-than filter for "spawnTimeSec" */
                "filter[spawnTimeSec$lt]"?: number;
                /** @description Less-than or equal filter for "spawnTimeSec" */
                "filter[spawnTimeSec$lte]"?: number;
                /** @description Greater-than filter for "spawnTimeSec" */
                "filter[spawnTimeSec$gt]"?: number;
                /** @description Greater-than or equal filter for "spawnTimeSec" */
                "filter[spawnTimeSec$gte]"?: number;
                /** @description Equality filter for "range" */
                "filter[range]"?: number;
                /** @description Less-than filter for "range" */
                "filter[range$lt]"?: number;
                /** @description Less-than or equal filter for "range" */
                "filter[range$lte]"?: number;
                /** @description Greater-than filter for "range" */
                "filter[range$gt]"?: number;
                /** @description Greater-than or equal filter for "range" */
                "filter[range$gte]"?: number;
                /** @description Equality filter for "str" */
                "filter[str]"?: number;
                /** @description Less-than filter for "str" */
                "filter[str$lt]"?: number;
                /** @description Less-than or equal filter for "str" */
                "filter[str$lte]"?: number;
                /** @description Greater-than filter for "str" */
                "filter[str$gt]"?: number;
                /** @description Greater-than or equal filter for "str" */
                "filter[str$gte]"?: number;
                /** @description Equality filter for "sta" */
                "filter[sta]"?: number;
                /** @description Less-than filter for "sta" */
                "filter[sta$lt]"?: number;
                /** @description Less-than or equal filter for "sta" */
                "filter[sta$lte]"?: number;
                /** @description Greater-than filter for "sta" */
                "filter[sta$gt]"?: number;
                /** @description Greater-than or equal filter for "sta" */
                "filter[sta$gte]"?: number;
                /** @description Equality filter for "agi" */
                "filter[agi]"?: number;
                /** @description Less-than filter for "agi" */
                "filter[agi$lt]"?: number;
                /** @description Less-than or equal filter for "agi" */
                "filter[agi$lte]"?: number;
                /** @description Greater-than filter for "agi" */
                "filter[agi$gt]"?: number;
                /** @description Greater-than or equal filter for "agi" */
                "filter[agi$gte]"?: number;
                /** @description Equality filter for "int" */
                "filter[int]"?: number;
                /** @description Less-than filter for "int" */
                "filter[int$lt]"?: number;
                /** @description Less-than or equal filter for "int" */
                "filter[int$lte]"?: number;
                /** @description Greater-than filter for "int" */
                "filter[int$gt]"?: number;
                /** @description Greater-than or equal filter for "int" */
                "filter[int$gte]"?: number;
                /** @description Equality filter for "armor" */
                "filter[armor]"?: number;
                /** @description Less-than filter for "armor" */
                "filter[armor$lt]"?: number;
                /** @description Less-than or equal filter for "armor" */
                "filter[armor$lte]"?: number;
                /** @description Greater-than filter for "armor" */
                "filter[armor$gt]"?: number;
                /** @description Greater-than or equal filter for "armor" */
                "filter[armor$gte]"?: number;
                /** @description Equality filter for "crit" */
                "filter[crit]"?: number;
                /** @description Less-than filter for "crit" */
                "filter[crit$lt]"?: number;
                /** @description Less-than or equal filter for "crit" */
                "filter[crit$lte]"?: number;
                /** @description Greater-than filter for "crit" */
                "filter[crit$gt]"?: number;
                /** @description Greater-than or equal filter for "crit" */
                "filter[crit$gte]"?: number;
                /** @description Equality filter for "dodge" */
                "filter[dodge]"?: number;
                /** @description Less-than filter for "dodge" */
                "filter[dodge$lt]"?: number;
                /** @description Less-than or equal filter for "dodge" */
                "filter[dodge$lte]"?: number;
                /** @description Greater-than filter for "dodge" */
                "filter[dodge$gt]"?: number;
                /** @description Greater-than or equal filter for "dodge" */
                "filter[dodge$gte]"?: number;
                /** @description Equality filter for "factionXp" */
                "filter[factionXp]"?: number;
                /** @description Less-than filter for "factionXp" */
                "filter[factionXp$lt]"?: number;
                /** @description Less-than or equal filter for "factionXp" */
                "filter[factionXp$lte]"?: number;
                /** @description Greater-than filter for "factionXp" */
                "filter[factionXp$gt]"?: number;
                /** @description Greater-than or equal filter for "factionXp" */
                "filter[factionXp$gte]"?: number;
                /** @description Equality filter for "faction" */
                "filter[faction]"?: string;
                /** @description Equality filter for "artist" */
                "filter[artist]"?: string;
                /** @description String contains filter for "artist" */
                "filter[artist$contains]"?: string;
                /** @description String case-insensitive contains filter for "artist" */
                "filter[artist$icontains]"?: string;
                /** @description String full-text search filter for "artist" */
                "filter[artist$search]"?: string;
                /** @description String startsWith filter for "artist" */
                "filter[artist$startsWith]"?: string;
                /** @description String endsWith filter for "artist" */
                "filter[artist$endsWith]"?: string;
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["LocationListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Mob-relationship-locations": {
        parameters: {
            query?: {
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "desc" */
                "filter[desc]"?: string;
                /** @description String contains filter for "desc" */
                "filter[desc$contains]"?: string;
                /** @description String case-insensitive contains filter for "desc" */
                "filter[desc$icontains]"?: string;
                /** @description String full-text search filter for "desc" */
                "filter[desc$search]"?: string;
                /** @description String startsWith filter for "desc" */
                "filter[desc$startsWith]"?: string;
                /** @description String endsWith filter for "desc" */
                "filter[desc$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "level" */
                "filter[level]"?: number;
                /** @description Less-than filter for "level" */
                "filter[level$lt]"?: number;
                /** @description Less-than or equal filter for "level" */
                "filter[level$lte]"?: number;
                /** @description Greater-than filter for "level" */
                "filter[level$gt]"?: number;
                /** @description Greater-than or equal filter for "level" */
                "filter[level$gte]"?: number;
                /** @description Equality filter for "health" */
                "filter[health]"?: number;
                /** @description Less-than filter for "health" */
                "filter[health$lt]"?: number;
                /** @description Less-than or equal filter for "health" */
                "filter[health$lte]"?: number;
                /** @description Greater-than filter for "health" */
                "filter[health$gt]"?: number;
                /** @description Greater-than or equal filter for "health" */
                "filter[health$gte]"?: number;
                /** @description Equality filter for "goldMin" */
                "filter[goldMin]"?: number;
                /** @description Less-than filter for "goldMin" */
                "filter[goldMin$lt]"?: number;
                /** @description Less-than or equal filter for "goldMin" */
                "filter[goldMin$lte]"?: number;
                /** @description Greater-than filter for "goldMin" */
                "filter[goldMin$gt]"?: number;
                /** @description Greater-than or equal filter for "goldMin" */
                "filter[goldMin$gte]"?: number;
                /** @description Equality filter for "goldMax" */
                "filter[goldMax]"?: number;
                /** @description Less-than filter for "goldMax" */
                "filter[goldMax$lt]"?: number;
                /** @description Less-than or equal filter for "goldMax" */
                "filter[goldMax$lte]"?: number;
                /** @description Greater-than filter for "goldMax" */
                "filter[goldMax$gt]"?: number;
                /** @description Greater-than or equal filter for "goldMax" */
                "filter[goldMax$gte]"?: number;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "boss" */
                "filter[boss]"?: boolean;
                /** @description Equality filter for "drops" */
                "filter[drops]"?: string[];
                /** @description Equality filter for "locations" */
                "filter[locations]"?: string[];
                /** @description Equality filter for "atkSpeed" */
                "filter[atkSpeed]"?: number;
                /** @description Less-than filter for "atkSpeed" */
                "filter[atkSpeed$lt]"?: number;
                /** @description Less-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$lte]"?: number;
                /** @description Greater-than filter for "atkSpeed" */
                "filter[atkSpeed$gt]"?: number;
                /** @description Greater-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$gte]"?: number;
                /** @description Equality filter for "dmgMin" */
                "filter[dmgMin]"?: number;
                /** @description Less-than filter for "dmgMin" */
                "filter[dmgMin$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMin" */
                "filter[dmgMin$lte]"?: number;
                /** @description Greater-than filter for "dmgMin" */
                "filter[dmgMin$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMin" */
                "filter[dmgMin$gte]"?: number;
                /** @description Equality filter for "dmgMax" */
                "filter[dmgMax]"?: number;
                /** @description Less-than filter for "dmgMax" */
                "filter[dmgMax$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMax" */
                "filter[dmgMax$lte]"?: number;
                /** @description Greater-than filter for "dmgMax" */
                "filter[dmgMax$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMax" */
                "filter[dmgMax$gte]"?: number;
                /** @description Equality filter for "numSpawns" */
                "filter[numSpawns]"?: number;
                /** @description Less-than filter for "numSpawns" */
                "filter[numSpawns$lt]"?: number;
                /** @description Less-than or equal filter for "numSpawns" */
                "filter[numSpawns$lte]"?: number;
                /** @description Greater-than filter for "numSpawns" */
                "filter[numSpawns$gt]"?: number;
                /** @description Greater-than or equal filter for "numSpawns" */
                "filter[numSpawns$gte]"?: number;
                /** @description Equality filter for "spawnTimeSec" */
                "filter[spawnTimeSec]"?: number;
                /** @description Less-than filter for "spawnTimeSec" */
                "filter[spawnTimeSec$lt]"?: number;
                /** @description Less-than or equal filter for "spawnTimeSec" */
                "filter[spawnTimeSec$lte]"?: number;
                /** @description Greater-than filter for "spawnTimeSec" */
                "filter[spawnTimeSec$gt]"?: number;
                /** @description Greater-than or equal filter for "spawnTimeSec" */
                "filter[spawnTimeSec$gte]"?: number;
                /** @description Equality filter for "range" */
                "filter[range]"?: number;
                /** @description Less-than filter for "range" */
                "filter[range$lt]"?: number;
                /** @description Less-than or equal filter for "range" */
                "filter[range$lte]"?: number;
                /** @description Greater-than filter for "range" */
                "filter[range$gt]"?: number;
                /** @description Greater-than or equal filter for "range" */
                "filter[range$gte]"?: number;
                /** @description Equality filter for "str" */
                "filter[str]"?: number;
                /** @description Less-than filter for "str" */
                "filter[str$lt]"?: number;
                /** @description Less-than or equal filter for "str" */
                "filter[str$lte]"?: number;
                /** @description Greater-than filter for "str" */
                "filter[str$gt]"?: number;
                /** @description Greater-than or equal filter for "str" */
                "filter[str$gte]"?: number;
                /** @description Equality filter for "sta" */
                "filter[sta]"?: number;
                /** @description Less-than filter for "sta" */
                "filter[sta$lt]"?: number;
                /** @description Less-than or equal filter for "sta" */
                "filter[sta$lte]"?: number;
                /** @description Greater-than filter for "sta" */
                "filter[sta$gt]"?: number;
                /** @description Greater-than or equal filter for "sta" */
                "filter[sta$gte]"?: number;
                /** @description Equality filter for "agi" */
                "filter[agi]"?: number;
                /** @description Less-than filter for "agi" */
                "filter[agi$lt]"?: number;
                /** @description Less-than or equal filter for "agi" */
                "filter[agi$lte]"?: number;
                /** @description Greater-than filter for "agi" */
                "filter[agi$gt]"?: number;
                /** @description Greater-than or equal filter for "agi" */
                "filter[agi$gte]"?: number;
                /** @description Equality filter for "int" */
                "filter[int]"?: number;
                /** @description Less-than filter for "int" */
                "filter[int$lt]"?: number;
                /** @description Less-than or equal filter for "int" */
                "filter[int$lte]"?: number;
                /** @description Greater-than filter for "int" */
                "filter[int$gt]"?: number;
                /** @description Greater-than or equal filter for "int" */
                "filter[int$gte]"?: number;
                /** @description Equality filter for "armor" */
                "filter[armor]"?: number;
                /** @description Less-than filter for "armor" */
                "filter[armor$lt]"?: number;
                /** @description Less-than or equal filter for "armor" */
                "filter[armor$lte]"?: number;
                /** @description Greater-than filter for "armor" */
                "filter[armor$gt]"?: number;
                /** @description Greater-than or equal filter for "armor" */
                "filter[armor$gte]"?: number;
                /** @description Equality filter for "crit" */
                "filter[crit]"?: number;
                /** @description Less-than filter for "crit" */
                "filter[crit$lt]"?: number;
                /** @description Less-than or equal filter for "crit" */
                "filter[crit$lte]"?: number;
                /** @description Greater-than filter for "crit" */
                "filter[crit$gt]"?: number;
                /** @description Greater-than or equal filter for "crit" */
                "filter[crit$gte]"?: number;
                /** @description Equality filter for "dodge" */
                "filter[dodge]"?: number;
                /** @description Less-than filter for "dodge" */
                "filter[dodge$lt]"?: number;
                /** @description Less-than or equal filter for "dodge" */
                "filter[dodge$lte]"?: number;
                /** @description Greater-than filter for "dodge" */
                "filter[dodge$gt]"?: number;
                /** @description Greater-than or equal filter for "dodge" */
                "filter[dodge$gte]"?: number;
                /** @description Equality filter for "factionXp" */
                "filter[factionXp]"?: number;
                /** @description Less-than filter for "factionXp" */
                "filter[factionXp$lt]"?: number;
                /** @description Less-than or equal filter for "factionXp" */
                "filter[factionXp$lte]"?: number;
                /** @description Greater-than filter for "factionXp" */
                "filter[factionXp$gt]"?: number;
                /** @description Greater-than or equal filter for "factionXp" */
                "filter[factionXp$gte]"?: number;
                /** @description Equality filter for "faction" */
                "filter[faction]"?: string;
                /** @description Equality filter for "artist" */
                "filter[artist]"?: string;
                /** @description String contains filter for "artist" */
                "filter[artist$contains]"?: string;
                /** @description String case-insensitive contains filter for "artist" */
                "filter[artist$icontains]"?: string;
                /** @description String full-text search filter for "artist" */
                "filter[artist$search]"?: string;
                /** @description String startsWith filter for "artist" */
                "filter[artist$startsWith]"?: string;
                /** @description String endsWith filter for "artist" */
                "filter[artist$endsWith]"?: string;
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Mob-relationship-locations-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Mob-relationship-locations": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Mob-relationship-locations-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Mob-related-faction": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["FactionResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Mob-relationship-faction": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Mob-relationship-faction-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Mob-relationship-faction-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "list-Npc": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "type" */
                "filter[type]"?: string;
                /** @description String contains filter for "type" */
                "filter[type$contains]"?: string;
                /** @description String case-insensitive contains filter for "type" */
                "filter[type$icontains]"?: string;
                /** @description String full-text search filter for "type" */
                "filter[type$search]"?: string;
                /** @description String startsWith filter for "type" */
                "filter[type$startsWith]"?: string;
                /** @description String endsWith filter for "type" */
                "filter[type$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "items" */
                "filter[items]"?: string[];
                /** @description Equality filter for "crafts" */
                "filter[crafts]"?: string[];
                /** @description Equality filter for "locations" */
                "filter[locations]"?: string[];
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "area" */
                "filter[area]"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["NpcListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Npc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["NpcCreateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["NpcResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Npc": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["NpcResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Npc-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["NpcUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["NpcResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "delete-Npc": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Npc-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["NpcUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["NpcResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Npc-related-items": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "type" */
                "filter[type]"?: string;
                /** @description String contains filter for "type" */
                "filter[type$contains]"?: string;
                /** @description String case-insensitive contains filter for "type" */
                "filter[type$icontains]"?: string;
                /** @description String full-text search filter for "type" */
                "filter[type$search]"?: string;
                /** @description String startsWith filter for "type" */
                "filter[type$startsWith]"?: string;
                /** @description String endsWith filter for "type" */
                "filter[type$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "items" */
                "filter[items]"?: string[];
                /** @description Equality filter for "crafts" */
                "filter[crafts]"?: string[];
                /** @description Equality filter for "locations" */
                "filter[locations]"?: string[];
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "area" */
                "filter[area]"?: string;
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["NpcSaleListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Npc-relationship-items": {
        parameters: {
            query?: {
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "type" */
                "filter[type]"?: string;
                /** @description String contains filter for "type" */
                "filter[type$contains]"?: string;
                /** @description String case-insensitive contains filter for "type" */
                "filter[type$icontains]"?: string;
                /** @description String full-text search filter for "type" */
                "filter[type$search]"?: string;
                /** @description String startsWith filter for "type" */
                "filter[type$startsWith]"?: string;
                /** @description String endsWith filter for "type" */
                "filter[type$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "items" */
                "filter[items]"?: string[];
                /** @description Equality filter for "crafts" */
                "filter[crafts]"?: string[];
                /** @description Equality filter for "locations" */
                "filter[locations]"?: string[];
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "area" */
                "filter[area]"?: string;
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Npc-relationship-items-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Npc-relationship-items": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Npc-relationship-items-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Npc-related-crafts": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "type" */
                "filter[type]"?: string;
                /** @description String contains filter for "type" */
                "filter[type$contains]"?: string;
                /** @description String case-insensitive contains filter for "type" */
                "filter[type$icontains]"?: string;
                /** @description String full-text search filter for "type" */
                "filter[type$search]"?: string;
                /** @description String startsWith filter for "type" */
                "filter[type$startsWith]"?: string;
                /** @description String endsWith filter for "type" */
                "filter[type$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "items" */
                "filter[items]"?: string[];
                /** @description Equality filter for "crafts" */
                "filter[crafts]"?: string[];
                /** @description Equality filter for "locations" */
                "filter[locations]"?: string[];
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "area" */
                "filter[area]"?: string;
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["NpcCraftListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Npc-relationship-crafts": {
        parameters: {
            query?: {
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "type" */
                "filter[type]"?: string;
                /** @description String contains filter for "type" */
                "filter[type$contains]"?: string;
                /** @description String case-insensitive contains filter for "type" */
                "filter[type$icontains]"?: string;
                /** @description String full-text search filter for "type" */
                "filter[type$search]"?: string;
                /** @description String startsWith filter for "type" */
                "filter[type$startsWith]"?: string;
                /** @description String endsWith filter for "type" */
                "filter[type$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "items" */
                "filter[items]"?: string[];
                /** @description Equality filter for "crafts" */
                "filter[crafts]"?: string[];
                /** @description Equality filter for "locations" */
                "filter[locations]"?: string[];
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "area" */
                "filter[area]"?: string;
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Npc-relationship-crafts-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Npc-relationship-crafts": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Npc-relationship-crafts-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Npc-related-locations": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "type" */
                "filter[type]"?: string;
                /** @description String contains filter for "type" */
                "filter[type$contains]"?: string;
                /** @description String case-insensitive contains filter for "type" */
                "filter[type$icontains]"?: string;
                /** @description String full-text search filter for "type" */
                "filter[type$search]"?: string;
                /** @description String startsWith filter for "type" */
                "filter[type$startsWith]"?: string;
                /** @description String endsWith filter for "type" */
                "filter[type$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "items" */
                "filter[items]"?: string[];
                /** @description Equality filter for "crafts" */
                "filter[crafts]"?: string[];
                /** @description Equality filter for "locations" */
                "filter[locations]"?: string[];
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "area" */
                "filter[area]"?: string;
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["LocationListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Npc-relationship-locations": {
        parameters: {
            query?: {
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "type" */
                "filter[type]"?: string;
                /** @description String contains filter for "type" */
                "filter[type$contains]"?: string;
                /** @description String case-insensitive contains filter for "type" */
                "filter[type$icontains]"?: string;
                /** @description String full-text search filter for "type" */
                "filter[type$search]"?: string;
                /** @description String startsWith filter for "type" */
                "filter[type$startsWith]"?: string;
                /** @description String endsWith filter for "type" */
                "filter[type$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "items" */
                "filter[items]"?: string[];
                /** @description Equality filter for "crafts" */
                "filter[crafts]"?: string[];
                /** @description Equality filter for "locations" */
                "filter[locations]"?: string[];
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "area" */
                "filter[area]"?: string;
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Npc-relationship-locations-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Npc-relationship-locations": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Npc-relationship-locations-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Npc-related-area": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["AreaResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Npc-relationship-area": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Npc-relationship-area-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Npc-relationship-area-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "list-NpcSale": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Equality filter for "npc" */
                "filter[npc]"?: string;
                /** @description Equality filter for "item" */
                "filter[item]"?: string;
                /** @description Equality filter for "unit" */
                "filter[unit]"?: components["schemas"]["Unit"];
                /** @description Equality filter for "price" */
                "filter[price]"?: number;
                /** @description Less-than filter for "price" */
                "filter[price$lt]"?: number;
                /** @description Less-than or equal filter for "price" */
                "filter[price$lte]"?: number;
                /** @description Greater-than filter for "price" */
                "filter[price$gt]"?: number;
                /** @description Greater-than or equal filter for "price" */
                "filter[price$gte]"?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["NpcSaleListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-NpcSale": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["NpcSaleCreateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["NpcSaleResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-NpcSale": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["NpcSaleResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-NpcSale-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["NpcSaleUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["NpcSaleResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "delete-NpcSale": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-NpcSale-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["NpcSaleUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["NpcSaleResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-NpcSale-related-npc": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["NpcResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-NpcSale-relationship-npc": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-NpcSale-relationship-npc-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-NpcSale-relationship-npc-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-NpcSale-related-item": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["ItemResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-NpcSale-relationship-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-NpcSale-relationship-item-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-NpcSale-relationship-item-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "list-NpcCraft": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: number;
                /** @description Equality filter for "npc" */
                "filter[npc]"?: string;
                /** @description Equality filter for "item" */
                "filter[item]"?: string;
                /** @description Equality filter for "ingredients" */
                "filter[ingredients]"?: string[];
                /** @description Equality filter for "price" */
                "filter[price]"?: number;
                /** @description Less-than filter for "price" */
                "filter[price$lt]"?: number;
                /** @description Less-than or equal filter for "price" */
                "filter[price$lte]"?: number;
                /** @description Greater-than filter for "price" */
                "filter[price$gt]"?: number;
                /** @description Greater-than or equal filter for "price" */
                "filter[price$gte]"?: number;
                /** @description Equality filter for "unit" */
                "filter[unit]"?: components["schemas"]["Unit"];
                /** @description Equality filter for "durationMinutes" */
                "filter[durationMinutes]"?: number;
                /** @description Less-than filter for "durationMinutes" */
                "filter[durationMinutes$lt]"?: number;
                /** @description Less-than or equal filter for "durationMinutes" */
                "filter[durationMinutes$lte]"?: number;
                /** @description Greater-than filter for "durationMinutes" */
                "filter[durationMinutes$gt]"?: number;
                /** @description Greater-than or equal filter for "durationMinutes" */
                "filter[durationMinutes$gte]"?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["NpcCraftListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-NpcCraft": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["NpcCraftCreateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["NpcCraftResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-NpcCraft": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["NpcCraftResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-NpcCraft-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["NpcCraftUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["NpcCraftResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "delete-NpcCraft": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-NpcCraft-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["NpcCraftUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["NpcCraftResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-NpcCraft-related-npc": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["NpcResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-NpcCraft-relationship-npc": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-NpcCraft-relationship-npc-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-NpcCraft-relationship-npc-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-NpcCraft-related-item": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["ItemResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-NpcCraft-relationship-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-NpcCraft-relationship-item-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-NpcCraft-relationship-item-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-NpcCraft-related-ingredients": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: number;
                /** @description Equality filter for "npc" */
                "filter[npc]"?: string;
                /** @description Equality filter for "item" */
                "filter[item]"?: string;
                /** @description Equality filter for "ingredients" */
                "filter[ingredients]"?: string[];
                /** @description Equality filter for "price" */
                "filter[price]"?: number;
                /** @description Less-than filter for "price" */
                "filter[price$lt]"?: number;
                /** @description Less-than or equal filter for "price" */
                "filter[price$lte]"?: number;
                /** @description Greater-than filter for "price" */
                "filter[price$gt]"?: number;
                /** @description Greater-than or equal filter for "price" */
                "filter[price$gte]"?: number;
                /** @description Equality filter for "unit" */
                "filter[unit]"?: components["schemas"]["Unit"];
                /** @description Equality filter for "durationMinutes" */
                "filter[durationMinutes]"?: number;
                /** @description Less-than filter for "durationMinutes" */
                "filter[durationMinutes$lt]"?: number;
                /** @description Less-than or equal filter for "durationMinutes" */
                "filter[durationMinutes$lte]"?: number;
                /** @description Greater-than filter for "durationMinutes" */
                "filter[durationMinutes$gt]"?: number;
                /** @description Greater-than or equal filter for "durationMinutes" */
                "filter[durationMinutes$gte]"?: number;
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["ItemQuantityListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-NpcCraft-relationship-ingredients": {
        parameters: {
            query?: {
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: number;
                /** @description Equality filter for "npc" */
                "filter[npc]"?: string;
                /** @description Equality filter for "item" */
                "filter[item]"?: string;
                /** @description Equality filter for "ingredients" */
                "filter[ingredients]"?: string[];
                /** @description Equality filter for "price" */
                "filter[price]"?: number;
                /** @description Less-than filter for "price" */
                "filter[price$lt]"?: number;
                /** @description Less-than or equal filter for "price" */
                "filter[price$lte]"?: number;
                /** @description Greater-than filter for "price" */
                "filter[price$gt]"?: number;
                /** @description Greater-than or equal filter for "price" */
                "filter[price$gte]"?: number;
                /** @description Equality filter for "unit" */
                "filter[unit]"?: components["schemas"]["Unit"];
                /** @description Equality filter for "durationMinutes" */
                "filter[durationMinutes]"?: number;
                /** @description Less-than filter for "durationMinutes" */
                "filter[durationMinutes$lt]"?: number;
                /** @description Less-than or equal filter for "durationMinutes" */
                "filter[durationMinutes$lte]"?: number;
                /** @description Greater-than filter for "durationMinutes" */
                "filter[durationMinutes$gt]"?: number;
                /** @description Greater-than or equal filter for "durationMinutes" */
                "filter[durationMinutes$gte]"?: number;
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-NpcCraft-relationship-ingredients-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-NpcCraft-relationship-ingredients": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-NpcCraft-relationship-ingredients-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "list-ItemQuantity": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: number;
                /** @description Equality filter for "item" */
                "filter[item]"?: string;
                /** @description Equality filter for "quantity" */
                "filter[quantity]"?: number;
                /** @description Less-than filter for "quantity" */
                "filter[quantity$lt]"?: number;
                /** @description Less-than or equal filter for "quantity" */
                "filter[quantity$lte]"?: number;
                /** @description Greater-than filter for "quantity" */
                "filter[quantity$gt]"?: number;
                /** @description Greater-than or equal filter for "quantity" */
                "filter[quantity$gte]"?: number;
                /** @description Equality filter for "craftsInto" */
                "filter[craftsInto]"?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["ItemQuantityListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-ItemQuantity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["ItemQuantityCreateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["ItemQuantityResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-ItemQuantity": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["ItemQuantityResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-ItemQuantity-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["ItemQuantityUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["ItemQuantityResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "delete-ItemQuantity": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-ItemQuantity-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["ItemQuantityUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["ItemQuantityResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-ItemQuantity-related-item": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["ItemResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-ItemQuantity-relationship-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-ItemQuantity-relationship-item-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-ItemQuantity-relationship-item-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-ItemQuantity-related-craftsInto": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: number;
                /** @description Equality filter for "item" */
                "filter[item]"?: string;
                /** @description Equality filter for "quantity" */
                "filter[quantity]"?: number;
                /** @description Less-than filter for "quantity" */
                "filter[quantity$lt]"?: number;
                /** @description Less-than or equal filter for "quantity" */
                "filter[quantity$lte]"?: number;
                /** @description Greater-than filter for "quantity" */
                "filter[quantity$gt]"?: number;
                /** @description Greater-than or equal filter for "quantity" */
                "filter[quantity$gte]"?: number;
                /** @description Equality filter for "craftsInto" */
                "filter[craftsInto]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["NpcCraftListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-ItemQuantity-relationship-craftsInto": {
        parameters: {
            query?: {
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: number;
                /** @description Equality filter for "item" */
                "filter[item]"?: string;
                /** @description Equality filter for "quantity" */
                "filter[quantity]"?: number;
                /** @description Less-than filter for "quantity" */
                "filter[quantity$lt]"?: number;
                /** @description Less-than or equal filter for "quantity" */
                "filter[quantity$lte]"?: number;
                /** @description Greater-than filter for "quantity" */
                "filter[quantity$gt]"?: number;
                /** @description Greater-than or equal filter for "quantity" */
                "filter[quantity$gte]"?: number;
                /** @description Equality filter for "craftsInto" */
                "filter[craftsInto]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-ItemQuantity-relationship-craftsInto-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-ItemQuantity-relationship-craftsInto": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-ItemQuantity-relationship-craftsInto-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "list-BattlePass": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "durationDays" */
                "filter[durationDays]"?: number;
                /** @description Less-than filter for "durationDays" */
                "filter[durationDays$lt]"?: number;
                /** @description Less-than or equal filter for "durationDays" */
                "filter[durationDays$lte]"?: number;
                /** @description Greater-than filter for "durationDays" */
                "filter[durationDays$gt]"?: number;
                /** @description Greater-than or equal filter for "durationDays" */
                "filter[durationDays$gte]"?: number;
                /** @description Equality filter for "xpPerTier" */
                "filter[xpPerTier]"?: number;
                /** @description Less-than filter for "xpPerTier" */
                "filter[xpPerTier$lt]"?: number;
                /** @description Less-than or equal filter for "xpPerTier" */
                "filter[xpPerTier$lte]"?: number;
                /** @description Greater-than filter for "xpPerTier" */
                "filter[xpPerTier$gt]"?: number;
                /** @description Greater-than or equal filter for "xpPerTier" */
                "filter[xpPerTier$gte]"?: number;
                /** @description Equality filter for "item" */
                "filter[item]"?: string;
                /** @description Equality filter for "desc" */
                "filter[desc]"?: string;
                /** @description String contains filter for "desc" */
                "filter[desc$contains]"?: string;
                /** @description String case-insensitive contains filter for "desc" */
                "filter[desc$icontains]"?: string;
                /** @description String full-text search filter for "desc" */
                "filter[desc$search]"?: string;
                /** @description String startsWith filter for "desc" */
                "filter[desc$startsWith]"?: string;
                /** @description String endsWith filter for "desc" */
                "filter[desc$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "tiers" */
                "filter[tiers]"?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["BattlePassListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-BattlePass": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["BattlePassCreateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["BattlePassResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-BattlePass": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["BattlePassResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-BattlePass-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["BattlePassUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["BattlePassResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "delete-BattlePass": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-BattlePass-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["BattlePassUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["BattlePassResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-BattlePass-related-item": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["ItemResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-BattlePass-relationship-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-BattlePass-relationship-item-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-BattlePass-relationship-item-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-BattlePass-related-tiers": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "durationDays" */
                "filter[durationDays]"?: number;
                /** @description Less-than filter for "durationDays" */
                "filter[durationDays$lt]"?: number;
                /** @description Less-than or equal filter for "durationDays" */
                "filter[durationDays$lte]"?: number;
                /** @description Greater-than filter for "durationDays" */
                "filter[durationDays$gt]"?: number;
                /** @description Greater-than or equal filter for "durationDays" */
                "filter[durationDays$gte]"?: number;
                /** @description Equality filter for "xpPerTier" */
                "filter[xpPerTier]"?: number;
                /** @description Less-than filter for "xpPerTier" */
                "filter[xpPerTier$lt]"?: number;
                /** @description Less-than or equal filter for "xpPerTier" */
                "filter[xpPerTier$lte]"?: number;
                /** @description Greater-than filter for "xpPerTier" */
                "filter[xpPerTier$gt]"?: number;
                /** @description Greater-than or equal filter for "xpPerTier" */
                "filter[xpPerTier$gte]"?: number;
                /** @description Equality filter for "item" */
                "filter[item]"?: string;
                /** @description Equality filter for "desc" */
                "filter[desc]"?: string;
                /** @description String contains filter for "desc" */
                "filter[desc$contains]"?: string;
                /** @description String case-insensitive contains filter for "desc" */
                "filter[desc$icontains]"?: string;
                /** @description String full-text search filter for "desc" */
                "filter[desc$search]"?: string;
                /** @description String startsWith filter for "desc" */
                "filter[desc$startsWith]"?: string;
                /** @description String endsWith filter for "desc" */
                "filter[desc$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "tiers" */
                "filter[tiers]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["BattlePassTierListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-BattlePass-relationship-tiers": {
        parameters: {
            query?: {
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "durationDays" */
                "filter[durationDays]"?: number;
                /** @description Less-than filter for "durationDays" */
                "filter[durationDays$lt]"?: number;
                /** @description Less-than or equal filter for "durationDays" */
                "filter[durationDays$lte]"?: number;
                /** @description Greater-than filter for "durationDays" */
                "filter[durationDays$gt]"?: number;
                /** @description Greater-than or equal filter for "durationDays" */
                "filter[durationDays$gte]"?: number;
                /** @description Equality filter for "xpPerTier" */
                "filter[xpPerTier]"?: number;
                /** @description Less-than filter for "xpPerTier" */
                "filter[xpPerTier$lt]"?: number;
                /** @description Less-than or equal filter for "xpPerTier" */
                "filter[xpPerTier$lte]"?: number;
                /** @description Greater-than filter for "xpPerTier" */
                "filter[xpPerTier$gt]"?: number;
                /** @description Greater-than or equal filter for "xpPerTier" */
                "filter[xpPerTier$gte]"?: number;
                /** @description Equality filter for "item" */
                "filter[item]"?: string;
                /** @description Equality filter for "desc" */
                "filter[desc]"?: string;
                /** @description String contains filter for "desc" */
                "filter[desc$contains]"?: string;
                /** @description String case-insensitive contains filter for "desc" */
                "filter[desc$icontains]"?: string;
                /** @description String full-text search filter for "desc" */
                "filter[desc$search]"?: string;
                /** @description String startsWith filter for "desc" */
                "filter[desc$startsWith]"?: string;
                /** @description String endsWith filter for "desc" */
                "filter[desc$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "tiers" */
                "filter[tiers]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-BattlePass-relationship-tiers-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-BattlePass-relationship-tiers": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-BattlePass-relationship-tiers-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "list-BattlePassTier": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Equality filter for "battlePass" */
                "filter[battlePass]"?: string;
                /** @description Id filter */
                "filter[id]"?: number;
                /** @description Equality filter for "item" */
                "filter[item]"?: string;
                /** @description Equality filter for "amount" */
                "filter[amount]"?: number;
                /** @description Less-than filter for "amount" */
                "filter[amount$lt]"?: number;
                /** @description Less-than or equal filter for "amount" */
                "filter[amount$lte]"?: number;
                /** @description Greater-than filter for "amount" */
                "filter[amount$gt]"?: number;
                /** @description Greater-than or equal filter for "amount" */
                "filter[amount$gte]"?: number;
                /** @description Equality filter for "unit" */
                "filter[unit]"?: components["schemas"]["Unit"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["BattlePassTierListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-BattlePassTier": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["BattlePassTierCreateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["BattlePassTierResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-BattlePassTier": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["BattlePassTierResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-BattlePassTier-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["BattlePassTierUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["BattlePassTierResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "delete-BattlePassTier": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-BattlePassTier-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["BattlePassTierUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["BattlePassTierResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-BattlePassTier-related-battlePass": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["BattlePassResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-BattlePassTier-relationship-battlePass": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-BattlePassTier-relationship-battlePass-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-BattlePassTier-relationship-battlePass-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-BattlePassTier-related-item": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["ItemResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-BattlePassTier-relationship-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-BattlePassTier-relationship-item-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-BattlePassTier-relationship-item-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "list-Loot": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Equality filter for "mob" */
                "filter[mob]"?: string;
                /** @description Equality filter for "item" */
                "filter[item]"?: string;
                /** @description Equality filter for "dropRate" */
                "filter[dropRate]"?: number;
                /** @description Less-than filter for "dropRate" */
                "filter[dropRate$lt]"?: number;
                /** @description Less-than or equal filter for "dropRate" */
                "filter[dropRate$lte]"?: number;
                /** @description Greater-than filter for "dropRate" */
                "filter[dropRate$gt]"?: number;
                /** @description Greater-than or equal filter for "dropRate" */
                "filter[dropRate$gte]"?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["LootListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Loot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["LootCreateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["LootResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Loot": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["LootResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Loot-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["LootUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["LootResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "delete-Loot": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Loot-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["LootUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["LootResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Loot-related-mob": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["MobResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Loot-relationship-mob": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Loot-relationship-mob-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Loot-relationship-mob-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Loot-related-item": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["ItemResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Loot-relationship-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Loot-relationship-item-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Loot-relationship-item-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "list-Item": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "desc" */
                "filter[desc]"?: string;
                /** @description String contains filter for "desc" */
                "filter[desc$contains]"?: string;
                /** @description String case-insensitive contains filter for "desc" */
                "filter[desc$icontains]"?: string;
                /** @description String full-text search filter for "desc" */
                "filter[desc$search]"?: string;
                /** @description String startsWith filter for "desc" */
                "filter[desc$startsWith]"?: string;
                /** @description String endsWith filter for "desc" */
                "filter[desc$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "equip" */
                "filter[equip]"?: components["schemas"]["EquippableType"];
                /** @description Equality filter for "levelReq" */
                "filter[levelReq]"?: number;
                /** @description Less-than filter for "levelReq" */
                "filter[levelReq$lt]"?: number;
                /** @description Less-than or equal filter for "levelReq" */
                "filter[levelReq$lte]"?: number;
                /** @description Greater-than filter for "levelReq" */
                "filter[levelReq$gt]"?: number;
                /** @description Greater-than or equal filter for "levelReq" */
                "filter[levelReq$gte]"?: number;
                /** @description Equality filter for "globalLoot" */
                "filter[globalLoot]"?: boolean;
                /** @description Equality filter for "twoHand" */
                "filter[twoHand]"?: boolean;
                /** @description Equality filter for "consumable" */
                "filter[consumable]"?: boolean;
                /** @description Equality filter for "sellPrice" */
                "filter[sellPrice]"?: number;
                /** @description Less-than filter for "sellPrice" */
                "filter[sellPrice$lt]"?: number;
                /** @description Less-than or equal filter for "sellPrice" */
                "filter[sellPrice$lte]"?: number;
                /** @description Greater-than filter for "sellPrice" */
                "filter[sellPrice$gt]"?: number;
                /** @description Greater-than or equal filter for "sellPrice" */
                "filter[sellPrice$gte]"?: number;
                /** @description Equality filter for "stackSize" */
                "filter[stackSize]"?: number;
                /** @description Less-than filter for "stackSize" */
                "filter[stackSize$lt]"?: number;
                /** @description Less-than or equal filter for "stackSize" */
                "filter[stackSize$lte]"?: number;
                /** @description Greater-than filter for "stackSize" */
                "filter[stackSize$gt]"?: number;
                /** @description Greater-than or equal filter for "stackSize" */
                "filter[stackSize$gte]"?: number;
                /** @description Equality filter for "droppedBy" */
                "filter[droppedBy]"?: string[];
                /** @description Equality filter for "soldBy" */
                "filter[soldBy]"?: string[];
                /** @description Equality filter for "craftedBy" */
                "filter[craftedBy]"?: string[];
                /** @description Equality filter for "usages" */
                "filter[usages]"?: string[];
                /** @description Equality filter for "battlePassTiers" */
                "filter[battlePassTiers]"?: string[];
                /** @description Equality filter for "battlePass" */
                "filter[battlePass]"?: string;
                /** @description Equality filter for "skillInfo" */
                "filter[skillInfo]"?: string;
                /** @description Equality filter for "area" */
                "filter[area]"?: string;
                /** @description Equality filter for "availableStart" */
                "filter[availableStart]"?: string;
                /** @description Less-than filter for "availableStart" */
                "filter[availableStart$lt]"?: string;
                /** @description Less-than or equal filter for "availableStart" */
                "filter[availableStart$lte]"?: string;
                /** @description Greater-than filter for "availableStart" */
                "filter[availableStart$gt]"?: string;
                /** @description Greater-than or equal filter for "availableStart" */
                "filter[availableStart$gte]"?: string;
                /** @description Equality filter for "availableEnd" */
                "filter[availableEnd]"?: string;
                /** @description Less-than filter for "availableEnd" */
                "filter[availableEnd$lt]"?: string;
                /** @description Less-than or equal filter for "availableEnd" */
                "filter[availableEnd$lte]"?: string;
                /** @description Greater-than filter for "availableEnd" */
                "filter[availableEnd$gt]"?: string;
                /** @description Greater-than or equal filter for "availableEnd" */
                "filter[availableEnd$gte]"?: string;
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "reqStr" */
                "filter[reqStr]"?: number;
                /** @description Less-than filter for "reqStr" */
                "filter[reqStr$lt]"?: number;
                /** @description Less-than or equal filter for "reqStr" */
                "filter[reqStr$lte]"?: number;
                /** @description Greater-than filter for "reqStr" */
                "filter[reqStr$gt]"?: number;
                /** @description Greater-than or equal filter for "reqStr" */
                "filter[reqStr$gte]"?: number;
                /** @description Equality filter for "reqSta" */
                "filter[reqSta]"?: number;
                /** @description Less-than filter for "reqSta" */
                "filter[reqSta$lt]"?: number;
                /** @description Less-than or equal filter for "reqSta" */
                "filter[reqSta$lte]"?: number;
                /** @description Greater-than filter for "reqSta" */
                "filter[reqSta$gt]"?: number;
                /** @description Greater-than or equal filter for "reqSta" */
                "filter[reqSta$gte]"?: number;
                /** @description Equality filter for "reqAgi" */
                "filter[reqAgi]"?: number;
                /** @description Less-than filter for "reqAgi" */
                "filter[reqAgi$lt]"?: number;
                /** @description Less-than or equal filter for "reqAgi" */
                "filter[reqAgi$lte]"?: number;
                /** @description Greater-than filter for "reqAgi" */
                "filter[reqAgi$gt]"?: number;
                /** @description Greater-than or equal filter for "reqAgi" */
                "filter[reqAgi$gte]"?: number;
                /** @description Equality filter for "reqInt" */
                "filter[reqInt]"?: number;
                /** @description Less-than filter for "reqInt" */
                "filter[reqInt$lt]"?: number;
                /** @description Less-than or equal filter for "reqInt" */
                "filter[reqInt$lte]"?: number;
                /** @description Greater-than filter for "reqInt" */
                "filter[reqInt$gt]"?: number;
                /** @description Greater-than or equal filter for "reqInt" */
                "filter[reqInt$gte]"?: number;
                /** @description Equality filter for "range" */
                "filter[range]"?: number;
                /** @description Less-than filter for "range" */
                "filter[range$lt]"?: number;
                /** @description Less-than or equal filter for "range" */
                "filter[range$lte]"?: number;
                /** @description Greater-than filter for "range" */
                "filter[range$gt]"?: number;
                /** @description Greater-than or equal filter for "range" */
                "filter[range$gte]"?: number;
                /** @description Equality filter for "str" */
                "filter[str]"?: number;
                /** @description Less-than filter for "str" */
                "filter[str$lt]"?: number;
                /** @description Less-than or equal filter for "str" */
                "filter[str$lte]"?: number;
                /** @description Greater-than filter for "str" */
                "filter[str$gt]"?: number;
                /** @description Greater-than or equal filter for "str" */
                "filter[str$gte]"?: number;
                /** @description Equality filter for "sta" */
                "filter[sta]"?: number;
                /** @description Less-than filter for "sta" */
                "filter[sta$lt]"?: number;
                /** @description Less-than or equal filter for "sta" */
                "filter[sta$lte]"?: number;
                /** @description Greater-than filter for "sta" */
                "filter[sta$gt]"?: number;
                /** @description Greater-than or equal filter for "sta" */
                "filter[sta$gte]"?: number;
                /** @description Equality filter for "agi" */
                "filter[agi]"?: number;
                /** @description Less-than filter for "agi" */
                "filter[agi$lt]"?: number;
                /** @description Less-than or equal filter for "agi" */
                "filter[agi$lte]"?: number;
                /** @description Greater-than filter for "agi" */
                "filter[agi$gt]"?: number;
                /** @description Greater-than or equal filter for "agi" */
                "filter[agi$gte]"?: number;
                /** @description Equality filter for "int" */
                "filter[int]"?: number;
                /** @description Less-than filter for "int" */
                "filter[int$lt]"?: number;
                /** @description Less-than or equal filter for "int" */
                "filter[int$lte]"?: number;
                /** @description Greater-than filter for "int" */
                "filter[int$gt]"?: number;
                /** @description Greater-than or equal filter for "int" */
                "filter[int$gte]"?: number;
                /** @description Equality filter for "armor" */
                "filter[armor]"?: number;
                /** @description Less-than filter for "armor" */
                "filter[armor$lt]"?: number;
                /** @description Less-than or equal filter for "armor" */
                "filter[armor$lte]"?: number;
                /** @description Greater-than filter for "armor" */
                "filter[armor$gt]"?: number;
                /** @description Greater-than or equal filter for "armor" */
                "filter[armor$gte]"?: number;
                /** @description Equality filter for "atkSpeed" */
                "filter[atkSpeed]"?: number;
                /** @description Less-than filter for "atkSpeed" */
                "filter[atkSpeed$lt]"?: number;
                /** @description Less-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$lte]"?: number;
                /** @description Greater-than filter for "atkSpeed" */
                "filter[atkSpeed$gt]"?: number;
                /** @description Greater-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$gte]"?: number;
                /** @description Equality filter for "dmgMin" */
                "filter[dmgMin]"?: number;
                /** @description Less-than filter for "dmgMin" */
                "filter[dmgMin$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMin" */
                "filter[dmgMin$lte]"?: number;
                /** @description Greater-than filter for "dmgMin" */
                "filter[dmgMin$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMin" */
                "filter[dmgMin$gte]"?: number;
                /** @description Equality filter for "dmgMax" */
                "filter[dmgMax]"?: number;
                /** @description Less-than filter for "dmgMax" */
                "filter[dmgMax$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMax" */
                "filter[dmgMax$lte]"?: number;
                /** @description Greater-than filter for "dmgMax" */
                "filter[dmgMax$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMax" */
                "filter[dmgMax$gte]"?: number;
                /** @description Equality filter for "artist" */
                "filter[artist]"?: string;
                /** @description String contains filter for "artist" */
                "filter[artist$contains]"?: string;
                /** @description String case-insensitive contains filter for "artist" */
                "filter[artist$icontains]"?: string;
                /** @description String full-text search filter for "artist" */
                "filter[artist$search]"?: string;
                /** @description String startsWith filter for "artist" */
                "filter[artist$startsWith]"?: string;
                /** @description String endsWith filter for "artist" */
                "filter[artist$endsWith]"?: string;
                /** @description Equality filter for "collections" */
                "filter[collections]"?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["ItemListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["ItemCreateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["ItemResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Item": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["ItemResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Item-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["ItemUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["ItemResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "delete-Item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Item-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["ItemUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["ItemResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Item-related-droppedBy": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "desc" */
                "filter[desc]"?: string;
                /** @description String contains filter for "desc" */
                "filter[desc$contains]"?: string;
                /** @description String case-insensitive contains filter for "desc" */
                "filter[desc$icontains]"?: string;
                /** @description String full-text search filter for "desc" */
                "filter[desc$search]"?: string;
                /** @description String startsWith filter for "desc" */
                "filter[desc$startsWith]"?: string;
                /** @description String endsWith filter for "desc" */
                "filter[desc$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "equip" */
                "filter[equip]"?: components["schemas"]["EquippableType"];
                /** @description Equality filter for "levelReq" */
                "filter[levelReq]"?: number;
                /** @description Less-than filter for "levelReq" */
                "filter[levelReq$lt]"?: number;
                /** @description Less-than or equal filter for "levelReq" */
                "filter[levelReq$lte]"?: number;
                /** @description Greater-than filter for "levelReq" */
                "filter[levelReq$gt]"?: number;
                /** @description Greater-than or equal filter for "levelReq" */
                "filter[levelReq$gte]"?: number;
                /** @description Equality filter for "globalLoot" */
                "filter[globalLoot]"?: boolean;
                /** @description Equality filter for "twoHand" */
                "filter[twoHand]"?: boolean;
                /** @description Equality filter for "consumable" */
                "filter[consumable]"?: boolean;
                /** @description Equality filter for "sellPrice" */
                "filter[sellPrice]"?: number;
                /** @description Less-than filter for "sellPrice" */
                "filter[sellPrice$lt]"?: number;
                /** @description Less-than or equal filter for "sellPrice" */
                "filter[sellPrice$lte]"?: number;
                /** @description Greater-than filter for "sellPrice" */
                "filter[sellPrice$gt]"?: number;
                /** @description Greater-than or equal filter for "sellPrice" */
                "filter[sellPrice$gte]"?: number;
                /** @description Equality filter for "stackSize" */
                "filter[stackSize]"?: number;
                /** @description Less-than filter for "stackSize" */
                "filter[stackSize$lt]"?: number;
                /** @description Less-than or equal filter for "stackSize" */
                "filter[stackSize$lte]"?: number;
                /** @description Greater-than filter for "stackSize" */
                "filter[stackSize$gt]"?: number;
                /** @description Greater-than or equal filter for "stackSize" */
                "filter[stackSize$gte]"?: number;
                /** @description Equality filter for "droppedBy" */
                "filter[droppedBy]"?: string[];
                /** @description Equality filter for "soldBy" */
                "filter[soldBy]"?: string[];
                /** @description Equality filter for "craftedBy" */
                "filter[craftedBy]"?: string[];
                /** @description Equality filter for "usages" */
                "filter[usages]"?: string[];
                /** @description Equality filter for "battlePassTiers" */
                "filter[battlePassTiers]"?: string[];
                /** @description Equality filter for "battlePass" */
                "filter[battlePass]"?: string;
                /** @description Equality filter for "skillInfo" */
                "filter[skillInfo]"?: string;
                /** @description Equality filter for "area" */
                "filter[area]"?: string;
                /** @description Equality filter for "availableStart" */
                "filter[availableStart]"?: string;
                /** @description Less-than filter for "availableStart" */
                "filter[availableStart$lt]"?: string;
                /** @description Less-than or equal filter for "availableStart" */
                "filter[availableStart$lte]"?: string;
                /** @description Greater-than filter for "availableStart" */
                "filter[availableStart$gt]"?: string;
                /** @description Greater-than or equal filter for "availableStart" */
                "filter[availableStart$gte]"?: string;
                /** @description Equality filter for "availableEnd" */
                "filter[availableEnd]"?: string;
                /** @description Less-than filter for "availableEnd" */
                "filter[availableEnd$lt]"?: string;
                /** @description Less-than or equal filter for "availableEnd" */
                "filter[availableEnd$lte]"?: string;
                /** @description Greater-than filter for "availableEnd" */
                "filter[availableEnd$gt]"?: string;
                /** @description Greater-than or equal filter for "availableEnd" */
                "filter[availableEnd$gte]"?: string;
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "reqStr" */
                "filter[reqStr]"?: number;
                /** @description Less-than filter for "reqStr" */
                "filter[reqStr$lt]"?: number;
                /** @description Less-than or equal filter for "reqStr" */
                "filter[reqStr$lte]"?: number;
                /** @description Greater-than filter for "reqStr" */
                "filter[reqStr$gt]"?: number;
                /** @description Greater-than or equal filter for "reqStr" */
                "filter[reqStr$gte]"?: number;
                /** @description Equality filter for "reqSta" */
                "filter[reqSta]"?: number;
                /** @description Less-than filter for "reqSta" */
                "filter[reqSta$lt]"?: number;
                /** @description Less-than or equal filter for "reqSta" */
                "filter[reqSta$lte]"?: number;
                /** @description Greater-than filter for "reqSta" */
                "filter[reqSta$gt]"?: number;
                /** @description Greater-than or equal filter for "reqSta" */
                "filter[reqSta$gte]"?: number;
                /** @description Equality filter for "reqAgi" */
                "filter[reqAgi]"?: number;
                /** @description Less-than filter for "reqAgi" */
                "filter[reqAgi$lt]"?: number;
                /** @description Less-than or equal filter for "reqAgi" */
                "filter[reqAgi$lte]"?: number;
                /** @description Greater-than filter for "reqAgi" */
                "filter[reqAgi$gt]"?: number;
                /** @description Greater-than or equal filter for "reqAgi" */
                "filter[reqAgi$gte]"?: number;
                /** @description Equality filter for "reqInt" */
                "filter[reqInt]"?: number;
                /** @description Less-than filter for "reqInt" */
                "filter[reqInt$lt]"?: number;
                /** @description Less-than or equal filter for "reqInt" */
                "filter[reqInt$lte]"?: number;
                /** @description Greater-than filter for "reqInt" */
                "filter[reqInt$gt]"?: number;
                /** @description Greater-than or equal filter for "reqInt" */
                "filter[reqInt$gte]"?: number;
                /** @description Equality filter for "range" */
                "filter[range]"?: number;
                /** @description Less-than filter for "range" */
                "filter[range$lt]"?: number;
                /** @description Less-than or equal filter for "range" */
                "filter[range$lte]"?: number;
                /** @description Greater-than filter for "range" */
                "filter[range$gt]"?: number;
                /** @description Greater-than or equal filter for "range" */
                "filter[range$gte]"?: number;
                /** @description Equality filter for "str" */
                "filter[str]"?: number;
                /** @description Less-than filter for "str" */
                "filter[str$lt]"?: number;
                /** @description Less-than or equal filter for "str" */
                "filter[str$lte]"?: number;
                /** @description Greater-than filter for "str" */
                "filter[str$gt]"?: number;
                /** @description Greater-than or equal filter for "str" */
                "filter[str$gte]"?: number;
                /** @description Equality filter for "sta" */
                "filter[sta]"?: number;
                /** @description Less-than filter for "sta" */
                "filter[sta$lt]"?: number;
                /** @description Less-than or equal filter for "sta" */
                "filter[sta$lte]"?: number;
                /** @description Greater-than filter for "sta" */
                "filter[sta$gt]"?: number;
                /** @description Greater-than or equal filter for "sta" */
                "filter[sta$gte]"?: number;
                /** @description Equality filter for "agi" */
                "filter[agi]"?: number;
                /** @description Less-than filter for "agi" */
                "filter[agi$lt]"?: number;
                /** @description Less-than or equal filter for "agi" */
                "filter[agi$lte]"?: number;
                /** @description Greater-than filter for "agi" */
                "filter[agi$gt]"?: number;
                /** @description Greater-than or equal filter for "agi" */
                "filter[agi$gte]"?: number;
                /** @description Equality filter for "int" */
                "filter[int]"?: number;
                /** @description Less-than filter for "int" */
                "filter[int$lt]"?: number;
                /** @description Less-than or equal filter for "int" */
                "filter[int$lte]"?: number;
                /** @description Greater-than filter for "int" */
                "filter[int$gt]"?: number;
                /** @description Greater-than or equal filter for "int" */
                "filter[int$gte]"?: number;
                /** @description Equality filter for "armor" */
                "filter[armor]"?: number;
                /** @description Less-than filter for "armor" */
                "filter[armor$lt]"?: number;
                /** @description Less-than or equal filter for "armor" */
                "filter[armor$lte]"?: number;
                /** @description Greater-than filter for "armor" */
                "filter[armor$gt]"?: number;
                /** @description Greater-than or equal filter for "armor" */
                "filter[armor$gte]"?: number;
                /** @description Equality filter for "atkSpeed" */
                "filter[atkSpeed]"?: number;
                /** @description Less-than filter for "atkSpeed" */
                "filter[atkSpeed$lt]"?: number;
                /** @description Less-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$lte]"?: number;
                /** @description Greater-than filter for "atkSpeed" */
                "filter[atkSpeed$gt]"?: number;
                /** @description Greater-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$gte]"?: number;
                /** @description Equality filter for "dmgMin" */
                "filter[dmgMin]"?: number;
                /** @description Less-than filter for "dmgMin" */
                "filter[dmgMin$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMin" */
                "filter[dmgMin$lte]"?: number;
                /** @description Greater-than filter for "dmgMin" */
                "filter[dmgMin$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMin" */
                "filter[dmgMin$gte]"?: number;
                /** @description Equality filter for "dmgMax" */
                "filter[dmgMax]"?: number;
                /** @description Less-than filter for "dmgMax" */
                "filter[dmgMax$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMax" */
                "filter[dmgMax$lte]"?: number;
                /** @description Greater-than filter for "dmgMax" */
                "filter[dmgMax$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMax" */
                "filter[dmgMax$gte]"?: number;
                /** @description Equality filter for "artist" */
                "filter[artist]"?: string;
                /** @description String contains filter for "artist" */
                "filter[artist$contains]"?: string;
                /** @description String case-insensitive contains filter for "artist" */
                "filter[artist$icontains]"?: string;
                /** @description String full-text search filter for "artist" */
                "filter[artist$search]"?: string;
                /** @description String startsWith filter for "artist" */
                "filter[artist$startsWith]"?: string;
                /** @description String endsWith filter for "artist" */
                "filter[artist$endsWith]"?: string;
                /** @description Equality filter for "collections" */
                "filter[collections]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["LootListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Item-relationship-droppedBy": {
        parameters: {
            query?: {
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "desc" */
                "filter[desc]"?: string;
                /** @description String contains filter for "desc" */
                "filter[desc$contains]"?: string;
                /** @description String case-insensitive contains filter for "desc" */
                "filter[desc$icontains]"?: string;
                /** @description String full-text search filter for "desc" */
                "filter[desc$search]"?: string;
                /** @description String startsWith filter for "desc" */
                "filter[desc$startsWith]"?: string;
                /** @description String endsWith filter for "desc" */
                "filter[desc$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "equip" */
                "filter[equip]"?: components["schemas"]["EquippableType"];
                /** @description Equality filter for "levelReq" */
                "filter[levelReq]"?: number;
                /** @description Less-than filter for "levelReq" */
                "filter[levelReq$lt]"?: number;
                /** @description Less-than or equal filter for "levelReq" */
                "filter[levelReq$lte]"?: number;
                /** @description Greater-than filter for "levelReq" */
                "filter[levelReq$gt]"?: number;
                /** @description Greater-than or equal filter for "levelReq" */
                "filter[levelReq$gte]"?: number;
                /** @description Equality filter for "globalLoot" */
                "filter[globalLoot]"?: boolean;
                /** @description Equality filter for "twoHand" */
                "filter[twoHand]"?: boolean;
                /** @description Equality filter for "consumable" */
                "filter[consumable]"?: boolean;
                /** @description Equality filter for "sellPrice" */
                "filter[sellPrice]"?: number;
                /** @description Less-than filter for "sellPrice" */
                "filter[sellPrice$lt]"?: number;
                /** @description Less-than or equal filter for "sellPrice" */
                "filter[sellPrice$lte]"?: number;
                /** @description Greater-than filter for "sellPrice" */
                "filter[sellPrice$gt]"?: number;
                /** @description Greater-than or equal filter for "sellPrice" */
                "filter[sellPrice$gte]"?: number;
                /** @description Equality filter for "stackSize" */
                "filter[stackSize]"?: number;
                /** @description Less-than filter for "stackSize" */
                "filter[stackSize$lt]"?: number;
                /** @description Less-than or equal filter for "stackSize" */
                "filter[stackSize$lte]"?: number;
                /** @description Greater-than filter for "stackSize" */
                "filter[stackSize$gt]"?: number;
                /** @description Greater-than or equal filter for "stackSize" */
                "filter[stackSize$gte]"?: number;
                /** @description Equality filter for "droppedBy" */
                "filter[droppedBy]"?: string[];
                /** @description Equality filter for "soldBy" */
                "filter[soldBy]"?: string[];
                /** @description Equality filter for "craftedBy" */
                "filter[craftedBy]"?: string[];
                /** @description Equality filter for "usages" */
                "filter[usages]"?: string[];
                /** @description Equality filter for "battlePassTiers" */
                "filter[battlePassTiers]"?: string[];
                /** @description Equality filter for "battlePass" */
                "filter[battlePass]"?: string;
                /** @description Equality filter for "skillInfo" */
                "filter[skillInfo]"?: string;
                /** @description Equality filter for "area" */
                "filter[area]"?: string;
                /** @description Equality filter for "availableStart" */
                "filter[availableStart]"?: string;
                /** @description Less-than filter for "availableStart" */
                "filter[availableStart$lt]"?: string;
                /** @description Less-than or equal filter for "availableStart" */
                "filter[availableStart$lte]"?: string;
                /** @description Greater-than filter for "availableStart" */
                "filter[availableStart$gt]"?: string;
                /** @description Greater-than or equal filter for "availableStart" */
                "filter[availableStart$gte]"?: string;
                /** @description Equality filter for "availableEnd" */
                "filter[availableEnd]"?: string;
                /** @description Less-than filter for "availableEnd" */
                "filter[availableEnd$lt]"?: string;
                /** @description Less-than or equal filter for "availableEnd" */
                "filter[availableEnd$lte]"?: string;
                /** @description Greater-than filter for "availableEnd" */
                "filter[availableEnd$gt]"?: string;
                /** @description Greater-than or equal filter for "availableEnd" */
                "filter[availableEnd$gte]"?: string;
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "reqStr" */
                "filter[reqStr]"?: number;
                /** @description Less-than filter for "reqStr" */
                "filter[reqStr$lt]"?: number;
                /** @description Less-than or equal filter for "reqStr" */
                "filter[reqStr$lte]"?: number;
                /** @description Greater-than filter for "reqStr" */
                "filter[reqStr$gt]"?: number;
                /** @description Greater-than or equal filter for "reqStr" */
                "filter[reqStr$gte]"?: number;
                /** @description Equality filter for "reqSta" */
                "filter[reqSta]"?: number;
                /** @description Less-than filter for "reqSta" */
                "filter[reqSta$lt]"?: number;
                /** @description Less-than or equal filter for "reqSta" */
                "filter[reqSta$lte]"?: number;
                /** @description Greater-than filter for "reqSta" */
                "filter[reqSta$gt]"?: number;
                /** @description Greater-than or equal filter for "reqSta" */
                "filter[reqSta$gte]"?: number;
                /** @description Equality filter for "reqAgi" */
                "filter[reqAgi]"?: number;
                /** @description Less-than filter for "reqAgi" */
                "filter[reqAgi$lt]"?: number;
                /** @description Less-than or equal filter for "reqAgi" */
                "filter[reqAgi$lte]"?: number;
                /** @description Greater-than filter for "reqAgi" */
                "filter[reqAgi$gt]"?: number;
                /** @description Greater-than or equal filter for "reqAgi" */
                "filter[reqAgi$gte]"?: number;
                /** @description Equality filter for "reqInt" */
                "filter[reqInt]"?: number;
                /** @description Less-than filter for "reqInt" */
                "filter[reqInt$lt]"?: number;
                /** @description Less-than or equal filter for "reqInt" */
                "filter[reqInt$lte]"?: number;
                /** @description Greater-than filter for "reqInt" */
                "filter[reqInt$gt]"?: number;
                /** @description Greater-than or equal filter for "reqInt" */
                "filter[reqInt$gte]"?: number;
                /** @description Equality filter for "range" */
                "filter[range]"?: number;
                /** @description Less-than filter for "range" */
                "filter[range$lt]"?: number;
                /** @description Less-than or equal filter for "range" */
                "filter[range$lte]"?: number;
                /** @description Greater-than filter for "range" */
                "filter[range$gt]"?: number;
                /** @description Greater-than or equal filter for "range" */
                "filter[range$gte]"?: number;
                /** @description Equality filter for "str" */
                "filter[str]"?: number;
                /** @description Less-than filter for "str" */
                "filter[str$lt]"?: number;
                /** @description Less-than or equal filter for "str" */
                "filter[str$lte]"?: number;
                /** @description Greater-than filter for "str" */
                "filter[str$gt]"?: number;
                /** @description Greater-than or equal filter for "str" */
                "filter[str$gte]"?: number;
                /** @description Equality filter for "sta" */
                "filter[sta]"?: number;
                /** @description Less-than filter for "sta" */
                "filter[sta$lt]"?: number;
                /** @description Less-than or equal filter for "sta" */
                "filter[sta$lte]"?: number;
                /** @description Greater-than filter for "sta" */
                "filter[sta$gt]"?: number;
                /** @description Greater-than or equal filter for "sta" */
                "filter[sta$gte]"?: number;
                /** @description Equality filter for "agi" */
                "filter[agi]"?: number;
                /** @description Less-than filter for "agi" */
                "filter[agi$lt]"?: number;
                /** @description Less-than or equal filter for "agi" */
                "filter[agi$lte]"?: number;
                /** @description Greater-than filter for "agi" */
                "filter[agi$gt]"?: number;
                /** @description Greater-than or equal filter for "agi" */
                "filter[agi$gte]"?: number;
                /** @description Equality filter for "int" */
                "filter[int]"?: number;
                /** @description Less-than filter for "int" */
                "filter[int$lt]"?: number;
                /** @description Less-than or equal filter for "int" */
                "filter[int$lte]"?: number;
                /** @description Greater-than filter for "int" */
                "filter[int$gt]"?: number;
                /** @description Greater-than or equal filter for "int" */
                "filter[int$gte]"?: number;
                /** @description Equality filter for "armor" */
                "filter[armor]"?: number;
                /** @description Less-than filter for "armor" */
                "filter[armor$lt]"?: number;
                /** @description Less-than or equal filter for "armor" */
                "filter[armor$lte]"?: number;
                /** @description Greater-than filter for "armor" */
                "filter[armor$gt]"?: number;
                /** @description Greater-than or equal filter for "armor" */
                "filter[armor$gte]"?: number;
                /** @description Equality filter for "atkSpeed" */
                "filter[atkSpeed]"?: number;
                /** @description Less-than filter for "atkSpeed" */
                "filter[atkSpeed$lt]"?: number;
                /** @description Less-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$lte]"?: number;
                /** @description Greater-than filter for "atkSpeed" */
                "filter[atkSpeed$gt]"?: number;
                /** @description Greater-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$gte]"?: number;
                /** @description Equality filter for "dmgMin" */
                "filter[dmgMin]"?: number;
                /** @description Less-than filter for "dmgMin" */
                "filter[dmgMin$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMin" */
                "filter[dmgMin$lte]"?: number;
                /** @description Greater-than filter for "dmgMin" */
                "filter[dmgMin$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMin" */
                "filter[dmgMin$gte]"?: number;
                /** @description Equality filter for "dmgMax" */
                "filter[dmgMax]"?: number;
                /** @description Less-than filter for "dmgMax" */
                "filter[dmgMax$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMax" */
                "filter[dmgMax$lte]"?: number;
                /** @description Greater-than filter for "dmgMax" */
                "filter[dmgMax$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMax" */
                "filter[dmgMax$gte]"?: number;
                /** @description Equality filter for "artist" */
                "filter[artist]"?: string;
                /** @description String contains filter for "artist" */
                "filter[artist$contains]"?: string;
                /** @description String case-insensitive contains filter for "artist" */
                "filter[artist$icontains]"?: string;
                /** @description String full-text search filter for "artist" */
                "filter[artist$search]"?: string;
                /** @description String startsWith filter for "artist" */
                "filter[artist$startsWith]"?: string;
                /** @description String endsWith filter for "artist" */
                "filter[artist$endsWith]"?: string;
                /** @description Equality filter for "collections" */
                "filter[collections]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Item-relationship-droppedBy-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Item-relationship-droppedBy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Item-relationship-droppedBy-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Item-related-soldBy": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "desc" */
                "filter[desc]"?: string;
                /** @description String contains filter for "desc" */
                "filter[desc$contains]"?: string;
                /** @description String case-insensitive contains filter for "desc" */
                "filter[desc$icontains]"?: string;
                /** @description String full-text search filter for "desc" */
                "filter[desc$search]"?: string;
                /** @description String startsWith filter for "desc" */
                "filter[desc$startsWith]"?: string;
                /** @description String endsWith filter for "desc" */
                "filter[desc$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "equip" */
                "filter[equip]"?: components["schemas"]["EquippableType"];
                /** @description Equality filter for "levelReq" */
                "filter[levelReq]"?: number;
                /** @description Less-than filter for "levelReq" */
                "filter[levelReq$lt]"?: number;
                /** @description Less-than or equal filter for "levelReq" */
                "filter[levelReq$lte]"?: number;
                /** @description Greater-than filter for "levelReq" */
                "filter[levelReq$gt]"?: number;
                /** @description Greater-than or equal filter for "levelReq" */
                "filter[levelReq$gte]"?: number;
                /** @description Equality filter for "globalLoot" */
                "filter[globalLoot]"?: boolean;
                /** @description Equality filter for "twoHand" */
                "filter[twoHand]"?: boolean;
                /** @description Equality filter for "consumable" */
                "filter[consumable]"?: boolean;
                /** @description Equality filter for "sellPrice" */
                "filter[sellPrice]"?: number;
                /** @description Less-than filter for "sellPrice" */
                "filter[sellPrice$lt]"?: number;
                /** @description Less-than or equal filter for "sellPrice" */
                "filter[sellPrice$lte]"?: number;
                /** @description Greater-than filter for "sellPrice" */
                "filter[sellPrice$gt]"?: number;
                /** @description Greater-than or equal filter for "sellPrice" */
                "filter[sellPrice$gte]"?: number;
                /** @description Equality filter for "stackSize" */
                "filter[stackSize]"?: number;
                /** @description Less-than filter for "stackSize" */
                "filter[stackSize$lt]"?: number;
                /** @description Less-than or equal filter for "stackSize" */
                "filter[stackSize$lte]"?: number;
                /** @description Greater-than filter for "stackSize" */
                "filter[stackSize$gt]"?: number;
                /** @description Greater-than or equal filter for "stackSize" */
                "filter[stackSize$gte]"?: number;
                /** @description Equality filter for "droppedBy" */
                "filter[droppedBy]"?: string[];
                /** @description Equality filter for "soldBy" */
                "filter[soldBy]"?: string[];
                /** @description Equality filter for "craftedBy" */
                "filter[craftedBy]"?: string[];
                /** @description Equality filter for "usages" */
                "filter[usages]"?: string[];
                /** @description Equality filter for "battlePassTiers" */
                "filter[battlePassTiers]"?: string[];
                /** @description Equality filter for "battlePass" */
                "filter[battlePass]"?: string;
                /** @description Equality filter for "skillInfo" */
                "filter[skillInfo]"?: string;
                /** @description Equality filter for "area" */
                "filter[area]"?: string;
                /** @description Equality filter for "availableStart" */
                "filter[availableStart]"?: string;
                /** @description Less-than filter for "availableStart" */
                "filter[availableStart$lt]"?: string;
                /** @description Less-than or equal filter for "availableStart" */
                "filter[availableStart$lte]"?: string;
                /** @description Greater-than filter for "availableStart" */
                "filter[availableStart$gt]"?: string;
                /** @description Greater-than or equal filter for "availableStart" */
                "filter[availableStart$gte]"?: string;
                /** @description Equality filter for "availableEnd" */
                "filter[availableEnd]"?: string;
                /** @description Less-than filter for "availableEnd" */
                "filter[availableEnd$lt]"?: string;
                /** @description Less-than or equal filter for "availableEnd" */
                "filter[availableEnd$lte]"?: string;
                /** @description Greater-than filter for "availableEnd" */
                "filter[availableEnd$gt]"?: string;
                /** @description Greater-than or equal filter for "availableEnd" */
                "filter[availableEnd$gte]"?: string;
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "reqStr" */
                "filter[reqStr]"?: number;
                /** @description Less-than filter for "reqStr" */
                "filter[reqStr$lt]"?: number;
                /** @description Less-than or equal filter for "reqStr" */
                "filter[reqStr$lte]"?: number;
                /** @description Greater-than filter for "reqStr" */
                "filter[reqStr$gt]"?: number;
                /** @description Greater-than or equal filter for "reqStr" */
                "filter[reqStr$gte]"?: number;
                /** @description Equality filter for "reqSta" */
                "filter[reqSta]"?: number;
                /** @description Less-than filter for "reqSta" */
                "filter[reqSta$lt]"?: number;
                /** @description Less-than or equal filter for "reqSta" */
                "filter[reqSta$lte]"?: number;
                /** @description Greater-than filter for "reqSta" */
                "filter[reqSta$gt]"?: number;
                /** @description Greater-than or equal filter for "reqSta" */
                "filter[reqSta$gte]"?: number;
                /** @description Equality filter for "reqAgi" */
                "filter[reqAgi]"?: number;
                /** @description Less-than filter for "reqAgi" */
                "filter[reqAgi$lt]"?: number;
                /** @description Less-than or equal filter for "reqAgi" */
                "filter[reqAgi$lte]"?: number;
                /** @description Greater-than filter for "reqAgi" */
                "filter[reqAgi$gt]"?: number;
                /** @description Greater-than or equal filter for "reqAgi" */
                "filter[reqAgi$gte]"?: number;
                /** @description Equality filter for "reqInt" */
                "filter[reqInt]"?: number;
                /** @description Less-than filter for "reqInt" */
                "filter[reqInt$lt]"?: number;
                /** @description Less-than or equal filter for "reqInt" */
                "filter[reqInt$lte]"?: number;
                /** @description Greater-than filter for "reqInt" */
                "filter[reqInt$gt]"?: number;
                /** @description Greater-than or equal filter for "reqInt" */
                "filter[reqInt$gte]"?: number;
                /** @description Equality filter for "range" */
                "filter[range]"?: number;
                /** @description Less-than filter for "range" */
                "filter[range$lt]"?: number;
                /** @description Less-than or equal filter for "range" */
                "filter[range$lte]"?: number;
                /** @description Greater-than filter for "range" */
                "filter[range$gt]"?: number;
                /** @description Greater-than or equal filter for "range" */
                "filter[range$gte]"?: number;
                /** @description Equality filter for "str" */
                "filter[str]"?: number;
                /** @description Less-than filter for "str" */
                "filter[str$lt]"?: number;
                /** @description Less-than or equal filter for "str" */
                "filter[str$lte]"?: number;
                /** @description Greater-than filter for "str" */
                "filter[str$gt]"?: number;
                /** @description Greater-than or equal filter for "str" */
                "filter[str$gte]"?: number;
                /** @description Equality filter for "sta" */
                "filter[sta]"?: number;
                /** @description Less-than filter for "sta" */
                "filter[sta$lt]"?: number;
                /** @description Less-than or equal filter for "sta" */
                "filter[sta$lte]"?: number;
                /** @description Greater-than filter for "sta" */
                "filter[sta$gt]"?: number;
                /** @description Greater-than or equal filter for "sta" */
                "filter[sta$gte]"?: number;
                /** @description Equality filter for "agi" */
                "filter[agi]"?: number;
                /** @description Less-than filter for "agi" */
                "filter[agi$lt]"?: number;
                /** @description Less-than or equal filter for "agi" */
                "filter[agi$lte]"?: number;
                /** @description Greater-than filter for "agi" */
                "filter[agi$gt]"?: number;
                /** @description Greater-than or equal filter for "agi" */
                "filter[agi$gte]"?: number;
                /** @description Equality filter for "int" */
                "filter[int]"?: number;
                /** @description Less-than filter for "int" */
                "filter[int$lt]"?: number;
                /** @description Less-than or equal filter for "int" */
                "filter[int$lte]"?: number;
                /** @description Greater-than filter for "int" */
                "filter[int$gt]"?: number;
                /** @description Greater-than or equal filter for "int" */
                "filter[int$gte]"?: number;
                /** @description Equality filter for "armor" */
                "filter[armor]"?: number;
                /** @description Less-than filter for "armor" */
                "filter[armor$lt]"?: number;
                /** @description Less-than or equal filter for "armor" */
                "filter[armor$lte]"?: number;
                /** @description Greater-than filter for "armor" */
                "filter[armor$gt]"?: number;
                /** @description Greater-than or equal filter for "armor" */
                "filter[armor$gte]"?: number;
                /** @description Equality filter for "atkSpeed" */
                "filter[atkSpeed]"?: number;
                /** @description Less-than filter for "atkSpeed" */
                "filter[atkSpeed$lt]"?: number;
                /** @description Less-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$lte]"?: number;
                /** @description Greater-than filter for "atkSpeed" */
                "filter[atkSpeed$gt]"?: number;
                /** @description Greater-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$gte]"?: number;
                /** @description Equality filter for "dmgMin" */
                "filter[dmgMin]"?: number;
                /** @description Less-than filter for "dmgMin" */
                "filter[dmgMin$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMin" */
                "filter[dmgMin$lte]"?: number;
                /** @description Greater-than filter for "dmgMin" */
                "filter[dmgMin$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMin" */
                "filter[dmgMin$gte]"?: number;
                /** @description Equality filter for "dmgMax" */
                "filter[dmgMax]"?: number;
                /** @description Less-than filter for "dmgMax" */
                "filter[dmgMax$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMax" */
                "filter[dmgMax$lte]"?: number;
                /** @description Greater-than filter for "dmgMax" */
                "filter[dmgMax$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMax" */
                "filter[dmgMax$gte]"?: number;
                /** @description Equality filter for "artist" */
                "filter[artist]"?: string;
                /** @description String contains filter for "artist" */
                "filter[artist$contains]"?: string;
                /** @description String case-insensitive contains filter for "artist" */
                "filter[artist$icontains]"?: string;
                /** @description String full-text search filter for "artist" */
                "filter[artist$search]"?: string;
                /** @description String startsWith filter for "artist" */
                "filter[artist$startsWith]"?: string;
                /** @description String endsWith filter for "artist" */
                "filter[artist$endsWith]"?: string;
                /** @description Equality filter for "collections" */
                "filter[collections]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["NpcSaleListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Item-relationship-soldBy": {
        parameters: {
            query?: {
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "desc" */
                "filter[desc]"?: string;
                /** @description String contains filter for "desc" */
                "filter[desc$contains]"?: string;
                /** @description String case-insensitive contains filter for "desc" */
                "filter[desc$icontains]"?: string;
                /** @description String full-text search filter for "desc" */
                "filter[desc$search]"?: string;
                /** @description String startsWith filter for "desc" */
                "filter[desc$startsWith]"?: string;
                /** @description String endsWith filter for "desc" */
                "filter[desc$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "equip" */
                "filter[equip]"?: components["schemas"]["EquippableType"];
                /** @description Equality filter for "levelReq" */
                "filter[levelReq]"?: number;
                /** @description Less-than filter for "levelReq" */
                "filter[levelReq$lt]"?: number;
                /** @description Less-than or equal filter for "levelReq" */
                "filter[levelReq$lte]"?: number;
                /** @description Greater-than filter for "levelReq" */
                "filter[levelReq$gt]"?: number;
                /** @description Greater-than or equal filter for "levelReq" */
                "filter[levelReq$gte]"?: number;
                /** @description Equality filter for "globalLoot" */
                "filter[globalLoot]"?: boolean;
                /** @description Equality filter for "twoHand" */
                "filter[twoHand]"?: boolean;
                /** @description Equality filter for "consumable" */
                "filter[consumable]"?: boolean;
                /** @description Equality filter for "sellPrice" */
                "filter[sellPrice]"?: number;
                /** @description Less-than filter for "sellPrice" */
                "filter[sellPrice$lt]"?: number;
                /** @description Less-than or equal filter for "sellPrice" */
                "filter[sellPrice$lte]"?: number;
                /** @description Greater-than filter for "sellPrice" */
                "filter[sellPrice$gt]"?: number;
                /** @description Greater-than or equal filter for "sellPrice" */
                "filter[sellPrice$gte]"?: number;
                /** @description Equality filter for "stackSize" */
                "filter[stackSize]"?: number;
                /** @description Less-than filter for "stackSize" */
                "filter[stackSize$lt]"?: number;
                /** @description Less-than or equal filter for "stackSize" */
                "filter[stackSize$lte]"?: number;
                /** @description Greater-than filter for "stackSize" */
                "filter[stackSize$gt]"?: number;
                /** @description Greater-than or equal filter for "stackSize" */
                "filter[stackSize$gte]"?: number;
                /** @description Equality filter for "droppedBy" */
                "filter[droppedBy]"?: string[];
                /** @description Equality filter for "soldBy" */
                "filter[soldBy]"?: string[];
                /** @description Equality filter for "craftedBy" */
                "filter[craftedBy]"?: string[];
                /** @description Equality filter for "usages" */
                "filter[usages]"?: string[];
                /** @description Equality filter for "battlePassTiers" */
                "filter[battlePassTiers]"?: string[];
                /** @description Equality filter for "battlePass" */
                "filter[battlePass]"?: string;
                /** @description Equality filter for "skillInfo" */
                "filter[skillInfo]"?: string;
                /** @description Equality filter for "area" */
                "filter[area]"?: string;
                /** @description Equality filter for "availableStart" */
                "filter[availableStart]"?: string;
                /** @description Less-than filter for "availableStart" */
                "filter[availableStart$lt]"?: string;
                /** @description Less-than or equal filter for "availableStart" */
                "filter[availableStart$lte]"?: string;
                /** @description Greater-than filter for "availableStart" */
                "filter[availableStart$gt]"?: string;
                /** @description Greater-than or equal filter for "availableStart" */
                "filter[availableStart$gte]"?: string;
                /** @description Equality filter for "availableEnd" */
                "filter[availableEnd]"?: string;
                /** @description Less-than filter for "availableEnd" */
                "filter[availableEnd$lt]"?: string;
                /** @description Less-than or equal filter for "availableEnd" */
                "filter[availableEnd$lte]"?: string;
                /** @description Greater-than filter for "availableEnd" */
                "filter[availableEnd$gt]"?: string;
                /** @description Greater-than or equal filter for "availableEnd" */
                "filter[availableEnd$gte]"?: string;
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "reqStr" */
                "filter[reqStr]"?: number;
                /** @description Less-than filter for "reqStr" */
                "filter[reqStr$lt]"?: number;
                /** @description Less-than or equal filter for "reqStr" */
                "filter[reqStr$lte]"?: number;
                /** @description Greater-than filter for "reqStr" */
                "filter[reqStr$gt]"?: number;
                /** @description Greater-than or equal filter for "reqStr" */
                "filter[reqStr$gte]"?: number;
                /** @description Equality filter for "reqSta" */
                "filter[reqSta]"?: number;
                /** @description Less-than filter for "reqSta" */
                "filter[reqSta$lt]"?: number;
                /** @description Less-than or equal filter for "reqSta" */
                "filter[reqSta$lte]"?: number;
                /** @description Greater-than filter for "reqSta" */
                "filter[reqSta$gt]"?: number;
                /** @description Greater-than or equal filter for "reqSta" */
                "filter[reqSta$gte]"?: number;
                /** @description Equality filter for "reqAgi" */
                "filter[reqAgi]"?: number;
                /** @description Less-than filter for "reqAgi" */
                "filter[reqAgi$lt]"?: number;
                /** @description Less-than or equal filter for "reqAgi" */
                "filter[reqAgi$lte]"?: number;
                /** @description Greater-than filter for "reqAgi" */
                "filter[reqAgi$gt]"?: number;
                /** @description Greater-than or equal filter for "reqAgi" */
                "filter[reqAgi$gte]"?: number;
                /** @description Equality filter for "reqInt" */
                "filter[reqInt]"?: number;
                /** @description Less-than filter for "reqInt" */
                "filter[reqInt$lt]"?: number;
                /** @description Less-than or equal filter for "reqInt" */
                "filter[reqInt$lte]"?: number;
                /** @description Greater-than filter for "reqInt" */
                "filter[reqInt$gt]"?: number;
                /** @description Greater-than or equal filter for "reqInt" */
                "filter[reqInt$gte]"?: number;
                /** @description Equality filter for "range" */
                "filter[range]"?: number;
                /** @description Less-than filter for "range" */
                "filter[range$lt]"?: number;
                /** @description Less-than or equal filter for "range" */
                "filter[range$lte]"?: number;
                /** @description Greater-than filter for "range" */
                "filter[range$gt]"?: number;
                /** @description Greater-than or equal filter for "range" */
                "filter[range$gte]"?: number;
                /** @description Equality filter for "str" */
                "filter[str]"?: number;
                /** @description Less-than filter for "str" */
                "filter[str$lt]"?: number;
                /** @description Less-than or equal filter for "str" */
                "filter[str$lte]"?: number;
                /** @description Greater-than filter for "str" */
                "filter[str$gt]"?: number;
                /** @description Greater-than or equal filter for "str" */
                "filter[str$gte]"?: number;
                /** @description Equality filter for "sta" */
                "filter[sta]"?: number;
                /** @description Less-than filter for "sta" */
                "filter[sta$lt]"?: number;
                /** @description Less-than or equal filter for "sta" */
                "filter[sta$lte]"?: number;
                /** @description Greater-than filter for "sta" */
                "filter[sta$gt]"?: number;
                /** @description Greater-than or equal filter for "sta" */
                "filter[sta$gte]"?: number;
                /** @description Equality filter for "agi" */
                "filter[agi]"?: number;
                /** @description Less-than filter for "agi" */
                "filter[agi$lt]"?: number;
                /** @description Less-than or equal filter for "agi" */
                "filter[agi$lte]"?: number;
                /** @description Greater-than filter for "agi" */
                "filter[agi$gt]"?: number;
                /** @description Greater-than or equal filter for "agi" */
                "filter[agi$gte]"?: number;
                /** @description Equality filter for "int" */
                "filter[int]"?: number;
                /** @description Less-than filter for "int" */
                "filter[int$lt]"?: number;
                /** @description Less-than or equal filter for "int" */
                "filter[int$lte]"?: number;
                /** @description Greater-than filter for "int" */
                "filter[int$gt]"?: number;
                /** @description Greater-than or equal filter for "int" */
                "filter[int$gte]"?: number;
                /** @description Equality filter for "armor" */
                "filter[armor]"?: number;
                /** @description Less-than filter for "armor" */
                "filter[armor$lt]"?: number;
                /** @description Less-than or equal filter for "armor" */
                "filter[armor$lte]"?: number;
                /** @description Greater-than filter for "armor" */
                "filter[armor$gt]"?: number;
                /** @description Greater-than or equal filter for "armor" */
                "filter[armor$gte]"?: number;
                /** @description Equality filter for "atkSpeed" */
                "filter[atkSpeed]"?: number;
                /** @description Less-than filter for "atkSpeed" */
                "filter[atkSpeed$lt]"?: number;
                /** @description Less-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$lte]"?: number;
                /** @description Greater-than filter for "atkSpeed" */
                "filter[atkSpeed$gt]"?: number;
                /** @description Greater-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$gte]"?: number;
                /** @description Equality filter for "dmgMin" */
                "filter[dmgMin]"?: number;
                /** @description Less-than filter for "dmgMin" */
                "filter[dmgMin$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMin" */
                "filter[dmgMin$lte]"?: number;
                /** @description Greater-than filter for "dmgMin" */
                "filter[dmgMin$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMin" */
                "filter[dmgMin$gte]"?: number;
                /** @description Equality filter for "dmgMax" */
                "filter[dmgMax]"?: number;
                /** @description Less-than filter for "dmgMax" */
                "filter[dmgMax$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMax" */
                "filter[dmgMax$lte]"?: number;
                /** @description Greater-than filter for "dmgMax" */
                "filter[dmgMax$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMax" */
                "filter[dmgMax$gte]"?: number;
                /** @description Equality filter for "artist" */
                "filter[artist]"?: string;
                /** @description String contains filter for "artist" */
                "filter[artist$contains]"?: string;
                /** @description String case-insensitive contains filter for "artist" */
                "filter[artist$icontains]"?: string;
                /** @description String full-text search filter for "artist" */
                "filter[artist$search]"?: string;
                /** @description String startsWith filter for "artist" */
                "filter[artist$startsWith]"?: string;
                /** @description String endsWith filter for "artist" */
                "filter[artist$endsWith]"?: string;
                /** @description Equality filter for "collections" */
                "filter[collections]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Item-relationship-soldBy-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Item-relationship-soldBy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Item-relationship-soldBy-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Item-related-craftedBy": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "desc" */
                "filter[desc]"?: string;
                /** @description String contains filter for "desc" */
                "filter[desc$contains]"?: string;
                /** @description String case-insensitive contains filter for "desc" */
                "filter[desc$icontains]"?: string;
                /** @description String full-text search filter for "desc" */
                "filter[desc$search]"?: string;
                /** @description String startsWith filter for "desc" */
                "filter[desc$startsWith]"?: string;
                /** @description String endsWith filter for "desc" */
                "filter[desc$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "equip" */
                "filter[equip]"?: components["schemas"]["EquippableType"];
                /** @description Equality filter for "levelReq" */
                "filter[levelReq]"?: number;
                /** @description Less-than filter for "levelReq" */
                "filter[levelReq$lt]"?: number;
                /** @description Less-than or equal filter for "levelReq" */
                "filter[levelReq$lte]"?: number;
                /** @description Greater-than filter for "levelReq" */
                "filter[levelReq$gt]"?: number;
                /** @description Greater-than or equal filter for "levelReq" */
                "filter[levelReq$gte]"?: number;
                /** @description Equality filter for "globalLoot" */
                "filter[globalLoot]"?: boolean;
                /** @description Equality filter for "twoHand" */
                "filter[twoHand]"?: boolean;
                /** @description Equality filter for "consumable" */
                "filter[consumable]"?: boolean;
                /** @description Equality filter for "sellPrice" */
                "filter[sellPrice]"?: number;
                /** @description Less-than filter for "sellPrice" */
                "filter[sellPrice$lt]"?: number;
                /** @description Less-than or equal filter for "sellPrice" */
                "filter[sellPrice$lte]"?: number;
                /** @description Greater-than filter for "sellPrice" */
                "filter[sellPrice$gt]"?: number;
                /** @description Greater-than or equal filter for "sellPrice" */
                "filter[sellPrice$gte]"?: number;
                /** @description Equality filter for "stackSize" */
                "filter[stackSize]"?: number;
                /** @description Less-than filter for "stackSize" */
                "filter[stackSize$lt]"?: number;
                /** @description Less-than or equal filter for "stackSize" */
                "filter[stackSize$lte]"?: number;
                /** @description Greater-than filter for "stackSize" */
                "filter[stackSize$gt]"?: number;
                /** @description Greater-than or equal filter for "stackSize" */
                "filter[stackSize$gte]"?: number;
                /** @description Equality filter for "droppedBy" */
                "filter[droppedBy]"?: string[];
                /** @description Equality filter for "soldBy" */
                "filter[soldBy]"?: string[];
                /** @description Equality filter for "craftedBy" */
                "filter[craftedBy]"?: string[];
                /** @description Equality filter for "usages" */
                "filter[usages]"?: string[];
                /** @description Equality filter for "battlePassTiers" */
                "filter[battlePassTiers]"?: string[];
                /** @description Equality filter for "battlePass" */
                "filter[battlePass]"?: string;
                /** @description Equality filter for "skillInfo" */
                "filter[skillInfo]"?: string;
                /** @description Equality filter for "area" */
                "filter[area]"?: string;
                /** @description Equality filter for "availableStart" */
                "filter[availableStart]"?: string;
                /** @description Less-than filter for "availableStart" */
                "filter[availableStart$lt]"?: string;
                /** @description Less-than or equal filter for "availableStart" */
                "filter[availableStart$lte]"?: string;
                /** @description Greater-than filter for "availableStart" */
                "filter[availableStart$gt]"?: string;
                /** @description Greater-than or equal filter for "availableStart" */
                "filter[availableStart$gte]"?: string;
                /** @description Equality filter for "availableEnd" */
                "filter[availableEnd]"?: string;
                /** @description Less-than filter for "availableEnd" */
                "filter[availableEnd$lt]"?: string;
                /** @description Less-than or equal filter for "availableEnd" */
                "filter[availableEnd$lte]"?: string;
                /** @description Greater-than filter for "availableEnd" */
                "filter[availableEnd$gt]"?: string;
                /** @description Greater-than or equal filter for "availableEnd" */
                "filter[availableEnd$gte]"?: string;
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "reqStr" */
                "filter[reqStr]"?: number;
                /** @description Less-than filter for "reqStr" */
                "filter[reqStr$lt]"?: number;
                /** @description Less-than or equal filter for "reqStr" */
                "filter[reqStr$lte]"?: number;
                /** @description Greater-than filter for "reqStr" */
                "filter[reqStr$gt]"?: number;
                /** @description Greater-than or equal filter for "reqStr" */
                "filter[reqStr$gte]"?: number;
                /** @description Equality filter for "reqSta" */
                "filter[reqSta]"?: number;
                /** @description Less-than filter for "reqSta" */
                "filter[reqSta$lt]"?: number;
                /** @description Less-than or equal filter for "reqSta" */
                "filter[reqSta$lte]"?: number;
                /** @description Greater-than filter for "reqSta" */
                "filter[reqSta$gt]"?: number;
                /** @description Greater-than or equal filter for "reqSta" */
                "filter[reqSta$gte]"?: number;
                /** @description Equality filter for "reqAgi" */
                "filter[reqAgi]"?: number;
                /** @description Less-than filter for "reqAgi" */
                "filter[reqAgi$lt]"?: number;
                /** @description Less-than or equal filter for "reqAgi" */
                "filter[reqAgi$lte]"?: number;
                /** @description Greater-than filter for "reqAgi" */
                "filter[reqAgi$gt]"?: number;
                /** @description Greater-than or equal filter for "reqAgi" */
                "filter[reqAgi$gte]"?: number;
                /** @description Equality filter for "reqInt" */
                "filter[reqInt]"?: number;
                /** @description Less-than filter for "reqInt" */
                "filter[reqInt$lt]"?: number;
                /** @description Less-than or equal filter for "reqInt" */
                "filter[reqInt$lte]"?: number;
                /** @description Greater-than filter for "reqInt" */
                "filter[reqInt$gt]"?: number;
                /** @description Greater-than or equal filter for "reqInt" */
                "filter[reqInt$gte]"?: number;
                /** @description Equality filter for "range" */
                "filter[range]"?: number;
                /** @description Less-than filter for "range" */
                "filter[range$lt]"?: number;
                /** @description Less-than or equal filter for "range" */
                "filter[range$lte]"?: number;
                /** @description Greater-than filter for "range" */
                "filter[range$gt]"?: number;
                /** @description Greater-than or equal filter for "range" */
                "filter[range$gte]"?: number;
                /** @description Equality filter for "str" */
                "filter[str]"?: number;
                /** @description Less-than filter for "str" */
                "filter[str$lt]"?: number;
                /** @description Less-than or equal filter for "str" */
                "filter[str$lte]"?: number;
                /** @description Greater-than filter for "str" */
                "filter[str$gt]"?: number;
                /** @description Greater-than or equal filter for "str" */
                "filter[str$gte]"?: number;
                /** @description Equality filter for "sta" */
                "filter[sta]"?: number;
                /** @description Less-than filter for "sta" */
                "filter[sta$lt]"?: number;
                /** @description Less-than or equal filter for "sta" */
                "filter[sta$lte]"?: number;
                /** @description Greater-than filter for "sta" */
                "filter[sta$gt]"?: number;
                /** @description Greater-than or equal filter for "sta" */
                "filter[sta$gte]"?: number;
                /** @description Equality filter for "agi" */
                "filter[agi]"?: number;
                /** @description Less-than filter for "agi" */
                "filter[agi$lt]"?: number;
                /** @description Less-than or equal filter for "agi" */
                "filter[agi$lte]"?: number;
                /** @description Greater-than filter for "agi" */
                "filter[agi$gt]"?: number;
                /** @description Greater-than or equal filter for "agi" */
                "filter[agi$gte]"?: number;
                /** @description Equality filter for "int" */
                "filter[int]"?: number;
                /** @description Less-than filter for "int" */
                "filter[int$lt]"?: number;
                /** @description Less-than or equal filter for "int" */
                "filter[int$lte]"?: number;
                /** @description Greater-than filter for "int" */
                "filter[int$gt]"?: number;
                /** @description Greater-than or equal filter for "int" */
                "filter[int$gte]"?: number;
                /** @description Equality filter for "armor" */
                "filter[armor]"?: number;
                /** @description Less-than filter for "armor" */
                "filter[armor$lt]"?: number;
                /** @description Less-than or equal filter for "armor" */
                "filter[armor$lte]"?: number;
                /** @description Greater-than filter for "armor" */
                "filter[armor$gt]"?: number;
                /** @description Greater-than or equal filter for "armor" */
                "filter[armor$gte]"?: number;
                /** @description Equality filter for "atkSpeed" */
                "filter[atkSpeed]"?: number;
                /** @description Less-than filter for "atkSpeed" */
                "filter[atkSpeed$lt]"?: number;
                /** @description Less-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$lte]"?: number;
                /** @description Greater-than filter for "atkSpeed" */
                "filter[atkSpeed$gt]"?: number;
                /** @description Greater-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$gte]"?: number;
                /** @description Equality filter for "dmgMin" */
                "filter[dmgMin]"?: number;
                /** @description Less-than filter for "dmgMin" */
                "filter[dmgMin$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMin" */
                "filter[dmgMin$lte]"?: number;
                /** @description Greater-than filter for "dmgMin" */
                "filter[dmgMin$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMin" */
                "filter[dmgMin$gte]"?: number;
                /** @description Equality filter for "dmgMax" */
                "filter[dmgMax]"?: number;
                /** @description Less-than filter for "dmgMax" */
                "filter[dmgMax$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMax" */
                "filter[dmgMax$lte]"?: number;
                /** @description Greater-than filter for "dmgMax" */
                "filter[dmgMax$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMax" */
                "filter[dmgMax$gte]"?: number;
                /** @description Equality filter for "artist" */
                "filter[artist]"?: string;
                /** @description String contains filter for "artist" */
                "filter[artist$contains]"?: string;
                /** @description String case-insensitive contains filter for "artist" */
                "filter[artist$icontains]"?: string;
                /** @description String full-text search filter for "artist" */
                "filter[artist$search]"?: string;
                /** @description String startsWith filter for "artist" */
                "filter[artist$startsWith]"?: string;
                /** @description String endsWith filter for "artist" */
                "filter[artist$endsWith]"?: string;
                /** @description Equality filter for "collections" */
                "filter[collections]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["NpcCraftListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Item-relationship-craftedBy": {
        parameters: {
            query?: {
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "desc" */
                "filter[desc]"?: string;
                /** @description String contains filter for "desc" */
                "filter[desc$contains]"?: string;
                /** @description String case-insensitive contains filter for "desc" */
                "filter[desc$icontains]"?: string;
                /** @description String full-text search filter for "desc" */
                "filter[desc$search]"?: string;
                /** @description String startsWith filter for "desc" */
                "filter[desc$startsWith]"?: string;
                /** @description String endsWith filter for "desc" */
                "filter[desc$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "equip" */
                "filter[equip]"?: components["schemas"]["EquippableType"];
                /** @description Equality filter for "levelReq" */
                "filter[levelReq]"?: number;
                /** @description Less-than filter for "levelReq" */
                "filter[levelReq$lt]"?: number;
                /** @description Less-than or equal filter for "levelReq" */
                "filter[levelReq$lte]"?: number;
                /** @description Greater-than filter for "levelReq" */
                "filter[levelReq$gt]"?: number;
                /** @description Greater-than or equal filter for "levelReq" */
                "filter[levelReq$gte]"?: number;
                /** @description Equality filter for "globalLoot" */
                "filter[globalLoot]"?: boolean;
                /** @description Equality filter for "twoHand" */
                "filter[twoHand]"?: boolean;
                /** @description Equality filter for "consumable" */
                "filter[consumable]"?: boolean;
                /** @description Equality filter for "sellPrice" */
                "filter[sellPrice]"?: number;
                /** @description Less-than filter for "sellPrice" */
                "filter[sellPrice$lt]"?: number;
                /** @description Less-than or equal filter for "sellPrice" */
                "filter[sellPrice$lte]"?: number;
                /** @description Greater-than filter for "sellPrice" */
                "filter[sellPrice$gt]"?: number;
                /** @description Greater-than or equal filter for "sellPrice" */
                "filter[sellPrice$gte]"?: number;
                /** @description Equality filter for "stackSize" */
                "filter[stackSize]"?: number;
                /** @description Less-than filter for "stackSize" */
                "filter[stackSize$lt]"?: number;
                /** @description Less-than or equal filter for "stackSize" */
                "filter[stackSize$lte]"?: number;
                /** @description Greater-than filter for "stackSize" */
                "filter[stackSize$gt]"?: number;
                /** @description Greater-than or equal filter for "stackSize" */
                "filter[stackSize$gte]"?: number;
                /** @description Equality filter for "droppedBy" */
                "filter[droppedBy]"?: string[];
                /** @description Equality filter for "soldBy" */
                "filter[soldBy]"?: string[];
                /** @description Equality filter for "craftedBy" */
                "filter[craftedBy]"?: string[];
                /** @description Equality filter for "usages" */
                "filter[usages]"?: string[];
                /** @description Equality filter for "battlePassTiers" */
                "filter[battlePassTiers]"?: string[];
                /** @description Equality filter for "battlePass" */
                "filter[battlePass]"?: string;
                /** @description Equality filter for "skillInfo" */
                "filter[skillInfo]"?: string;
                /** @description Equality filter for "area" */
                "filter[area]"?: string;
                /** @description Equality filter for "availableStart" */
                "filter[availableStart]"?: string;
                /** @description Less-than filter for "availableStart" */
                "filter[availableStart$lt]"?: string;
                /** @description Less-than or equal filter for "availableStart" */
                "filter[availableStart$lte]"?: string;
                /** @description Greater-than filter for "availableStart" */
                "filter[availableStart$gt]"?: string;
                /** @description Greater-than or equal filter for "availableStart" */
                "filter[availableStart$gte]"?: string;
                /** @description Equality filter for "availableEnd" */
                "filter[availableEnd]"?: string;
                /** @description Less-than filter for "availableEnd" */
                "filter[availableEnd$lt]"?: string;
                /** @description Less-than or equal filter for "availableEnd" */
                "filter[availableEnd$lte]"?: string;
                /** @description Greater-than filter for "availableEnd" */
                "filter[availableEnd$gt]"?: string;
                /** @description Greater-than or equal filter for "availableEnd" */
                "filter[availableEnd$gte]"?: string;
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "reqStr" */
                "filter[reqStr]"?: number;
                /** @description Less-than filter for "reqStr" */
                "filter[reqStr$lt]"?: number;
                /** @description Less-than or equal filter for "reqStr" */
                "filter[reqStr$lte]"?: number;
                /** @description Greater-than filter for "reqStr" */
                "filter[reqStr$gt]"?: number;
                /** @description Greater-than or equal filter for "reqStr" */
                "filter[reqStr$gte]"?: number;
                /** @description Equality filter for "reqSta" */
                "filter[reqSta]"?: number;
                /** @description Less-than filter for "reqSta" */
                "filter[reqSta$lt]"?: number;
                /** @description Less-than or equal filter for "reqSta" */
                "filter[reqSta$lte]"?: number;
                /** @description Greater-than filter for "reqSta" */
                "filter[reqSta$gt]"?: number;
                /** @description Greater-than or equal filter for "reqSta" */
                "filter[reqSta$gte]"?: number;
                /** @description Equality filter for "reqAgi" */
                "filter[reqAgi]"?: number;
                /** @description Less-than filter for "reqAgi" */
                "filter[reqAgi$lt]"?: number;
                /** @description Less-than or equal filter for "reqAgi" */
                "filter[reqAgi$lte]"?: number;
                /** @description Greater-than filter for "reqAgi" */
                "filter[reqAgi$gt]"?: number;
                /** @description Greater-than or equal filter for "reqAgi" */
                "filter[reqAgi$gte]"?: number;
                /** @description Equality filter for "reqInt" */
                "filter[reqInt]"?: number;
                /** @description Less-than filter for "reqInt" */
                "filter[reqInt$lt]"?: number;
                /** @description Less-than or equal filter for "reqInt" */
                "filter[reqInt$lte]"?: number;
                /** @description Greater-than filter for "reqInt" */
                "filter[reqInt$gt]"?: number;
                /** @description Greater-than or equal filter for "reqInt" */
                "filter[reqInt$gte]"?: number;
                /** @description Equality filter for "range" */
                "filter[range]"?: number;
                /** @description Less-than filter for "range" */
                "filter[range$lt]"?: number;
                /** @description Less-than or equal filter for "range" */
                "filter[range$lte]"?: number;
                /** @description Greater-than filter for "range" */
                "filter[range$gt]"?: number;
                /** @description Greater-than or equal filter for "range" */
                "filter[range$gte]"?: number;
                /** @description Equality filter for "str" */
                "filter[str]"?: number;
                /** @description Less-than filter for "str" */
                "filter[str$lt]"?: number;
                /** @description Less-than or equal filter for "str" */
                "filter[str$lte]"?: number;
                /** @description Greater-than filter for "str" */
                "filter[str$gt]"?: number;
                /** @description Greater-than or equal filter for "str" */
                "filter[str$gte]"?: number;
                /** @description Equality filter for "sta" */
                "filter[sta]"?: number;
                /** @description Less-than filter for "sta" */
                "filter[sta$lt]"?: number;
                /** @description Less-than or equal filter for "sta" */
                "filter[sta$lte]"?: number;
                /** @description Greater-than filter for "sta" */
                "filter[sta$gt]"?: number;
                /** @description Greater-than or equal filter for "sta" */
                "filter[sta$gte]"?: number;
                /** @description Equality filter for "agi" */
                "filter[agi]"?: number;
                /** @description Less-than filter for "agi" */
                "filter[agi$lt]"?: number;
                /** @description Less-than or equal filter for "agi" */
                "filter[agi$lte]"?: number;
                /** @description Greater-than filter for "agi" */
                "filter[agi$gt]"?: number;
                /** @description Greater-than or equal filter for "agi" */
                "filter[agi$gte]"?: number;
                /** @description Equality filter for "int" */
                "filter[int]"?: number;
                /** @description Less-than filter for "int" */
                "filter[int$lt]"?: number;
                /** @description Less-than or equal filter for "int" */
                "filter[int$lte]"?: number;
                /** @description Greater-than filter for "int" */
                "filter[int$gt]"?: number;
                /** @description Greater-than or equal filter for "int" */
                "filter[int$gte]"?: number;
                /** @description Equality filter for "armor" */
                "filter[armor]"?: number;
                /** @description Less-than filter for "armor" */
                "filter[armor$lt]"?: number;
                /** @description Less-than or equal filter for "armor" */
                "filter[armor$lte]"?: number;
                /** @description Greater-than filter for "armor" */
                "filter[armor$gt]"?: number;
                /** @description Greater-than or equal filter for "armor" */
                "filter[armor$gte]"?: number;
                /** @description Equality filter for "atkSpeed" */
                "filter[atkSpeed]"?: number;
                /** @description Less-than filter for "atkSpeed" */
                "filter[atkSpeed$lt]"?: number;
                /** @description Less-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$lte]"?: number;
                /** @description Greater-than filter for "atkSpeed" */
                "filter[atkSpeed$gt]"?: number;
                /** @description Greater-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$gte]"?: number;
                /** @description Equality filter for "dmgMin" */
                "filter[dmgMin]"?: number;
                /** @description Less-than filter for "dmgMin" */
                "filter[dmgMin$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMin" */
                "filter[dmgMin$lte]"?: number;
                /** @description Greater-than filter for "dmgMin" */
                "filter[dmgMin$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMin" */
                "filter[dmgMin$gte]"?: number;
                /** @description Equality filter for "dmgMax" */
                "filter[dmgMax]"?: number;
                /** @description Less-than filter for "dmgMax" */
                "filter[dmgMax$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMax" */
                "filter[dmgMax$lte]"?: number;
                /** @description Greater-than filter for "dmgMax" */
                "filter[dmgMax$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMax" */
                "filter[dmgMax$gte]"?: number;
                /** @description Equality filter for "artist" */
                "filter[artist]"?: string;
                /** @description String contains filter for "artist" */
                "filter[artist$contains]"?: string;
                /** @description String case-insensitive contains filter for "artist" */
                "filter[artist$icontains]"?: string;
                /** @description String full-text search filter for "artist" */
                "filter[artist$search]"?: string;
                /** @description String startsWith filter for "artist" */
                "filter[artist$startsWith]"?: string;
                /** @description String endsWith filter for "artist" */
                "filter[artist$endsWith]"?: string;
                /** @description Equality filter for "collections" */
                "filter[collections]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Item-relationship-craftedBy-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Item-relationship-craftedBy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Item-relationship-craftedBy-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Item-related-usages": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "desc" */
                "filter[desc]"?: string;
                /** @description String contains filter for "desc" */
                "filter[desc$contains]"?: string;
                /** @description String case-insensitive contains filter for "desc" */
                "filter[desc$icontains]"?: string;
                /** @description String full-text search filter for "desc" */
                "filter[desc$search]"?: string;
                /** @description String startsWith filter for "desc" */
                "filter[desc$startsWith]"?: string;
                /** @description String endsWith filter for "desc" */
                "filter[desc$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "equip" */
                "filter[equip]"?: components["schemas"]["EquippableType"];
                /** @description Equality filter for "levelReq" */
                "filter[levelReq]"?: number;
                /** @description Less-than filter for "levelReq" */
                "filter[levelReq$lt]"?: number;
                /** @description Less-than or equal filter for "levelReq" */
                "filter[levelReq$lte]"?: number;
                /** @description Greater-than filter for "levelReq" */
                "filter[levelReq$gt]"?: number;
                /** @description Greater-than or equal filter for "levelReq" */
                "filter[levelReq$gte]"?: number;
                /** @description Equality filter for "globalLoot" */
                "filter[globalLoot]"?: boolean;
                /** @description Equality filter for "twoHand" */
                "filter[twoHand]"?: boolean;
                /** @description Equality filter for "consumable" */
                "filter[consumable]"?: boolean;
                /** @description Equality filter for "sellPrice" */
                "filter[sellPrice]"?: number;
                /** @description Less-than filter for "sellPrice" */
                "filter[sellPrice$lt]"?: number;
                /** @description Less-than or equal filter for "sellPrice" */
                "filter[sellPrice$lte]"?: number;
                /** @description Greater-than filter for "sellPrice" */
                "filter[sellPrice$gt]"?: number;
                /** @description Greater-than or equal filter for "sellPrice" */
                "filter[sellPrice$gte]"?: number;
                /** @description Equality filter for "stackSize" */
                "filter[stackSize]"?: number;
                /** @description Less-than filter for "stackSize" */
                "filter[stackSize$lt]"?: number;
                /** @description Less-than or equal filter for "stackSize" */
                "filter[stackSize$lte]"?: number;
                /** @description Greater-than filter for "stackSize" */
                "filter[stackSize$gt]"?: number;
                /** @description Greater-than or equal filter for "stackSize" */
                "filter[stackSize$gte]"?: number;
                /** @description Equality filter for "droppedBy" */
                "filter[droppedBy]"?: string[];
                /** @description Equality filter for "soldBy" */
                "filter[soldBy]"?: string[];
                /** @description Equality filter for "craftedBy" */
                "filter[craftedBy]"?: string[];
                /** @description Equality filter for "usages" */
                "filter[usages]"?: string[];
                /** @description Equality filter for "battlePassTiers" */
                "filter[battlePassTiers]"?: string[];
                /** @description Equality filter for "battlePass" */
                "filter[battlePass]"?: string;
                /** @description Equality filter for "skillInfo" */
                "filter[skillInfo]"?: string;
                /** @description Equality filter for "area" */
                "filter[area]"?: string;
                /** @description Equality filter for "availableStart" */
                "filter[availableStart]"?: string;
                /** @description Less-than filter for "availableStart" */
                "filter[availableStart$lt]"?: string;
                /** @description Less-than or equal filter for "availableStart" */
                "filter[availableStart$lte]"?: string;
                /** @description Greater-than filter for "availableStart" */
                "filter[availableStart$gt]"?: string;
                /** @description Greater-than or equal filter for "availableStart" */
                "filter[availableStart$gte]"?: string;
                /** @description Equality filter for "availableEnd" */
                "filter[availableEnd]"?: string;
                /** @description Less-than filter for "availableEnd" */
                "filter[availableEnd$lt]"?: string;
                /** @description Less-than or equal filter for "availableEnd" */
                "filter[availableEnd$lte]"?: string;
                /** @description Greater-than filter for "availableEnd" */
                "filter[availableEnd$gt]"?: string;
                /** @description Greater-than or equal filter for "availableEnd" */
                "filter[availableEnd$gte]"?: string;
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "reqStr" */
                "filter[reqStr]"?: number;
                /** @description Less-than filter for "reqStr" */
                "filter[reqStr$lt]"?: number;
                /** @description Less-than or equal filter for "reqStr" */
                "filter[reqStr$lte]"?: number;
                /** @description Greater-than filter for "reqStr" */
                "filter[reqStr$gt]"?: number;
                /** @description Greater-than or equal filter for "reqStr" */
                "filter[reqStr$gte]"?: number;
                /** @description Equality filter for "reqSta" */
                "filter[reqSta]"?: number;
                /** @description Less-than filter for "reqSta" */
                "filter[reqSta$lt]"?: number;
                /** @description Less-than or equal filter for "reqSta" */
                "filter[reqSta$lte]"?: number;
                /** @description Greater-than filter for "reqSta" */
                "filter[reqSta$gt]"?: number;
                /** @description Greater-than or equal filter for "reqSta" */
                "filter[reqSta$gte]"?: number;
                /** @description Equality filter for "reqAgi" */
                "filter[reqAgi]"?: number;
                /** @description Less-than filter for "reqAgi" */
                "filter[reqAgi$lt]"?: number;
                /** @description Less-than or equal filter for "reqAgi" */
                "filter[reqAgi$lte]"?: number;
                /** @description Greater-than filter for "reqAgi" */
                "filter[reqAgi$gt]"?: number;
                /** @description Greater-than or equal filter for "reqAgi" */
                "filter[reqAgi$gte]"?: number;
                /** @description Equality filter for "reqInt" */
                "filter[reqInt]"?: number;
                /** @description Less-than filter for "reqInt" */
                "filter[reqInt$lt]"?: number;
                /** @description Less-than or equal filter for "reqInt" */
                "filter[reqInt$lte]"?: number;
                /** @description Greater-than filter for "reqInt" */
                "filter[reqInt$gt]"?: number;
                /** @description Greater-than or equal filter for "reqInt" */
                "filter[reqInt$gte]"?: number;
                /** @description Equality filter for "range" */
                "filter[range]"?: number;
                /** @description Less-than filter for "range" */
                "filter[range$lt]"?: number;
                /** @description Less-than or equal filter for "range" */
                "filter[range$lte]"?: number;
                /** @description Greater-than filter for "range" */
                "filter[range$gt]"?: number;
                /** @description Greater-than or equal filter for "range" */
                "filter[range$gte]"?: number;
                /** @description Equality filter for "str" */
                "filter[str]"?: number;
                /** @description Less-than filter for "str" */
                "filter[str$lt]"?: number;
                /** @description Less-than or equal filter for "str" */
                "filter[str$lte]"?: number;
                /** @description Greater-than filter for "str" */
                "filter[str$gt]"?: number;
                /** @description Greater-than or equal filter for "str" */
                "filter[str$gte]"?: number;
                /** @description Equality filter for "sta" */
                "filter[sta]"?: number;
                /** @description Less-than filter for "sta" */
                "filter[sta$lt]"?: number;
                /** @description Less-than or equal filter for "sta" */
                "filter[sta$lte]"?: number;
                /** @description Greater-than filter for "sta" */
                "filter[sta$gt]"?: number;
                /** @description Greater-than or equal filter for "sta" */
                "filter[sta$gte]"?: number;
                /** @description Equality filter for "agi" */
                "filter[agi]"?: number;
                /** @description Less-than filter for "agi" */
                "filter[agi$lt]"?: number;
                /** @description Less-than or equal filter for "agi" */
                "filter[agi$lte]"?: number;
                /** @description Greater-than filter for "agi" */
                "filter[agi$gt]"?: number;
                /** @description Greater-than or equal filter for "agi" */
                "filter[agi$gte]"?: number;
                /** @description Equality filter for "int" */
                "filter[int]"?: number;
                /** @description Less-than filter for "int" */
                "filter[int$lt]"?: number;
                /** @description Less-than or equal filter for "int" */
                "filter[int$lte]"?: number;
                /** @description Greater-than filter for "int" */
                "filter[int$gt]"?: number;
                /** @description Greater-than or equal filter for "int" */
                "filter[int$gte]"?: number;
                /** @description Equality filter for "armor" */
                "filter[armor]"?: number;
                /** @description Less-than filter for "armor" */
                "filter[armor$lt]"?: number;
                /** @description Less-than or equal filter for "armor" */
                "filter[armor$lte]"?: number;
                /** @description Greater-than filter for "armor" */
                "filter[armor$gt]"?: number;
                /** @description Greater-than or equal filter for "armor" */
                "filter[armor$gte]"?: number;
                /** @description Equality filter for "atkSpeed" */
                "filter[atkSpeed]"?: number;
                /** @description Less-than filter for "atkSpeed" */
                "filter[atkSpeed$lt]"?: number;
                /** @description Less-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$lte]"?: number;
                /** @description Greater-than filter for "atkSpeed" */
                "filter[atkSpeed$gt]"?: number;
                /** @description Greater-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$gte]"?: number;
                /** @description Equality filter for "dmgMin" */
                "filter[dmgMin]"?: number;
                /** @description Less-than filter for "dmgMin" */
                "filter[dmgMin$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMin" */
                "filter[dmgMin$lte]"?: number;
                /** @description Greater-than filter for "dmgMin" */
                "filter[dmgMin$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMin" */
                "filter[dmgMin$gte]"?: number;
                /** @description Equality filter for "dmgMax" */
                "filter[dmgMax]"?: number;
                /** @description Less-than filter for "dmgMax" */
                "filter[dmgMax$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMax" */
                "filter[dmgMax$lte]"?: number;
                /** @description Greater-than filter for "dmgMax" */
                "filter[dmgMax$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMax" */
                "filter[dmgMax$gte]"?: number;
                /** @description Equality filter for "artist" */
                "filter[artist]"?: string;
                /** @description String contains filter for "artist" */
                "filter[artist$contains]"?: string;
                /** @description String case-insensitive contains filter for "artist" */
                "filter[artist$icontains]"?: string;
                /** @description String full-text search filter for "artist" */
                "filter[artist$search]"?: string;
                /** @description String startsWith filter for "artist" */
                "filter[artist$startsWith]"?: string;
                /** @description String endsWith filter for "artist" */
                "filter[artist$endsWith]"?: string;
                /** @description Equality filter for "collections" */
                "filter[collections]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["ItemQuantityListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Item-relationship-usages": {
        parameters: {
            query?: {
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "desc" */
                "filter[desc]"?: string;
                /** @description String contains filter for "desc" */
                "filter[desc$contains]"?: string;
                /** @description String case-insensitive contains filter for "desc" */
                "filter[desc$icontains]"?: string;
                /** @description String full-text search filter for "desc" */
                "filter[desc$search]"?: string;
                /** @description String startsWith filter for "desc" */
                "filter[desc$startsWith]"?: string;
                /** @description String endsWith filter for "desc" */
                "filter[desc$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "equip" */
                "filter[equip]"?: components["schemas"]["EquippableType"];
                /** @description Equality filter for "levelReq" */
                "filter[levelReq]"?: number;
                /** @description Less-than filter for "levelReq" */
                "filter[levelReq$lt]"?: number;
                /** @description Less-than or equal filter for "levelReq" */
                "filter[levelReq$lte]"?: number;
                /** @description Greater-than filter for "levelReq" */
                "filter[levelReq$gt]"?: number;
                /** @description Greater-than or equal filter for "levelReq" */
                "filter[levelReq$gte]"?: number;
                /** @description Equality filter for "globalLoot" */
                "filter[globalLoot]"?: boolean;
                /** @description Equality filter for "twoHand" */
                "filter[twoHand]"?: boolean;
                /** @description Equality filter for "consumable" */
                "filter[consumable]"?: boolean;
                /** @description Equality filter for "sellPrice" */
                "filter[sellPrice]"?: number;
                /** @description Less-than filter for "sellPrice" */
                "filter[sellPrice$lt]"?: number;
                /** @description Less-than or equal filter for "sellPrice" */
                "filter[sellPrice$lte]"?: number;
                /** @description Greater-than filter for "sellPrice" */
                "filter[sellPrice$gt]"?: number;
                /** @description Greater-than or equal filter for "sellPrice" */
                "filter[sellPrice$gte]"?: number;
                /** @description Equality filter for "stackSize" */
                "filter[stackSize]"?: number;
                /** @description Less-than filter for "stackSize" */
                "filter[stackSize$lt]"?: number;
                /** @description Less-than or equal filter for "stackSize" */
                "filter[stackSize$lte]"?: number;
                /** @description Greater-than filter for "stackSize" */
                "filter[stackSize$gt]"?: number;
                /** @description Greater-than or equal filter for "stackSize" */
                "filter[stackSize$gte]"?: number;
                /** @description Equality filter for "droppedBy" */
                "filter[droppedBy]"?: string[];
                /** @description Equality filter for "soldBy" */
                "filter[soldBy]"?: string[];
                /** @description Equality filter for "craftedBy" */
                "filter[craftedBy]"?: string[];
                /** @description Equality filter for "usages" */
                "filter[usages]"?: string[];
                /** @description Equality filter for "battlePassTiers" */
                "filter[battlePassTiers]"?: string[];
                /** @description Equality filter for "battlePass" */
                "filter[battlePass]"?: string;
                /** @description Equality filter for "skillInfo" */
                "filter[skillInfo]"?: string;
                /** @description Equality filter for "area" */
                "filter[area]"?: string;
                /** @description Equality filter for "availableStart" */
                "filter[availableStart]"?: string;
                /** @description Less-than filter for "availableStart" */
                "filter[availableStart$lt]"?: string;
                /** @description Less-than or equal filter for "availableStart" */
                "filter[availableStart$lte]"?: string;
                /** @description Greater-than filter for "availableStart" */
                "filter[availableStart$gt]"?: string;
                /** @description Greater-than or equal filter for "availableStart" */
                "filter[availableStart$gte]"?: string;
                /** @description Equality filter for "availableEnd" */
                "filter[availableEnd]"?: string;
                /** @description Less-than filter for "availableEnd" */
                "filter[availableEnd$lt]"?: string;
                /** @description Less-than or equal filter for "availableEnd" */
                "filter[availableEnd$lte]"?: string;
                /** @description Greater-than filter for "availableEnd" */
                "filter[availableEnd$gt]"?: string;
                /** @description Greater-than or equal filter for "availableEnd" */
                "filter[availableEnd$gte]"?: string;
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "reqStr" */
                "filter[reqStr]"?: number;
                /** @description Less-than filter for "reqStr" */
                "filter[reqStr$lt]"?: number;
                /** @description Less-than or equal filter for "reqStr" */
                "filter[reqStr$lte]"?: number;
                /** @description Greater-than filter for "reqStr" */
                "filter[reqStr$gt]"?: number;
                /** @description Greater-than or equal filter for "reqStr" */
                "filter[reqStr$gte]"?: number;
                /** @description Equality filter for "reqSta" */
                "filter[reqSta]"?: number;
                /** @description Less-than filter for "reqSta" */
                "filter[reqSta$lt]"?: number;
                /** @description Less-than or equal filter for "reqSta" */
                "filter[reqSta$lte]"?: number;
                /** @description Greater-than filter for "reqSta" */
                "filter[reqSta$gt]"?: number;
                /** @description Greater-than or equal filter for "reqSta" */
                "filter[reqSta$gte]"?: number;
                /** @description Equality filter for "reqAgi" */
                "filter[reqAgi]"?: number;
                /** @description Less-than filter for "reqAgi" */
                "filter[reqAgi$lt]"?: number;
                /** @description Less-than or equal filter for "reqAgi" */
                "filter[reqAgi$lte]"?: number;
                /** @description Greater-than filter for "reqAgi" */
                "filter[reqAgi$gt]"?: number;
                /** @description Greater-than or equal filter for "reqAgi" */
                "filter[reqAgi$gte]"?: number;
                /** @description Equality filter for "reqInt" */
                "filter[reqInt]"?: number;
                /** @description Less-than filter for "reqInt" */
                "filter[reqInt$lt]"?: number;
                /** @description Less-than or equal filter for "reqInt" */
                "filter[reqInt$lte]"?: number;
                /** @description Greater-than filter for "reqInt" */
                "filter[reqInt$gt]"?: number;
                /** @description Greater-than or equal filter for "reqInt" */
                "filter[reqInt$gte]"?: number;
                /** @description Equality filter for "range" */
                "filter[range]"?: number;
                /** @description Less-than filter for "range" */
                "filter[range$lt]"?: number;
                /** @description Less-than or equal filter for "range" */
                "filter[range$lte]"?: number;
                /** @description Greater-than filter for "range" */
                "filter[range$gt]"?: number;
                /** @description Greater-than or equal filter for "range" */
                "filter[range$gte]"?: number;
                /** @description Equality filter for "str" */
                "filter[str]"?: number;
                /** @description Less-than filter for "str" */
                "filter[str$lt]"?: number;
                /** @description Less-than or equal filter for "str" */
                "filter[str$lte]"?: number;
                /** @description Greater-than filter for "str" */
                "filter[str$gt]"?: number;
                /** @description Greater-than or equal filter for "str" */
                "filter[str$gte]"?: number;
                /** @description Equality filter for "sta" */
                "filter[sta]"?: number;
                /** @description Less-than filter for "sta" */
                "filter[sta$lt]"?: number;
                /** @description Less-than or equal filter for "sta" */
                "filter[sta$lte]"?: number;
                /** @description Greater-than filter for "sta" */
                "filter[sta$gt]"?: number;
                /** @description Greater-than or equal filter for "sta" */
                "filter[sta$gte]"?: number;
                /** @description Equality filter for "agi" */
                "filter[agi]"?: number;
                /** @description Less-than filter for "agi" */
                "filter[agi$lt]"?: number;
                /** @description Less-than or equal filter for "agi" */
                "filter[agi$lte]"?: number;
                /** @description Greater-than filter for "agi" */
                "filter[agi$gt]"?: number;
                /** @description Greater-than or equal filter for "agi" */
                "filter[agi$gte]"?: number;
                /** @description Equality filter for "int" */
                "filter[int]"?: number;
                /** @description Less-than filter for "int" */
                "filter[int$lt]"?: number;
                /** @description Less-than or equal filter for "int" */
                "filter[int$lte]"?: number;
                /** @description Greater-than filter for "int" */
                "filter[int$gt]"?: number;
                /** @description Greater-than or equal filter for "int" */
                "filter[int$gte]"?: number;
                /** @description Equality filter for "armor" */
                "filter[armor]"?: number;
                /** @description Less-than filter for "armor" */
                "filter[armor$lt]"?: number;
                /** @description Less-than or equal filter for "armor" */
                "filter[armor$lte]"?: number;
                /** @description Greater-than filter for "armor" */
                "filter[armor$gt]"?: number;
                /** @description Greater-than or equal filter for "armor" */
                "filter[armor$gte]"?: number;
                /** @description Equality filter for "atkSpeed" */
                "filter[atkSpeed]"?: number;
                /** @description Less-than filter for "atkSpeed" */
                "filter[atkSpeed$lt]"?: number;
                /** @description Less-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$lte]"?: number;
                /** @description Greater-than filter for "atkSpeed" */
                "filter[atkSpeed$gt]"?: number;
                /** @description Greater-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$gte]"?: number;
                /** @description Equality filter for "dmgMin" */
                "filter[dmgMin]"?: number;
                /** @description Less-than filter for "dmgMin" */
                "filter[dmgMin$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMin" */
                "filter[dmgMin$lte]"?: number;
                /** @description Greater-than filter for "dmgMin" */
                "filter[dmgMin$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMin" */
                "filter[dmgMin$gte]"?: number;
                /** @description Equality filter for "dmgMax" */
                "filter[dmgMax]"?: number;
                /** @description Less-than filter for "dmgMax" */
                "filter[dmgMax$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMax" */
                "filter[dmgMax$lte]"?: number;
                /** @description Greater-than filter for "dmgMax" */
                "filter[dmgMax$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMax" */
                "filter[dmgMax$gte]"?: number;
                /** @description Equality filter for "artist" */
                "filter[artist]"?: string;
                /** @description String contains filter for "artist" */
                "filter[artist$contains]"?: string;
                /** @description String case-insensitive contains filter for "artist" */
                "filter[artist$icontains]"?: string;
                /** @description String full-text search filter for "artist" */
                "filter[artist$search]"?: string;
                /** @description String startsWith filter for "artist" */
                "filter[artist$startsWith]"?: string;
                /** @description String endsWith filter for "artist" */
                "filter[artist$endsWith]"?: string;
                /** @description Equality filter for "collections" */
                "filter[collections]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Item-relationship-usages-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Item-relationship-usages": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Item-relationship-usages-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Item-related-battlePassTiers": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "desc" */
                "filter[desc]"?: string;
                /** @description String contains filter for "desc" */
                "filter[desc$contains]"?: string;
                /** @description String case-insensitive contains filter for "desc" */
                "filter[desc$icontains]"?: string;
                /** @description String full-text search filter for "desc" */
                "filter[desc$search]"?: string;
                /** @description String startsWith filter for "desc" */
                "filter[desc$startsWith]"?: string;
                /** @description String endsWith filter for "desc" */
                "filter[desc$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "equip" */
                "filter[equip]"?: components["schemas"]["EquippableType"];
                /** @description Equality filter for "levelReq" */
                "filter[levelReq]"?: number;
                /** @description Less-than filter for "levelReq" */
                "filter[levelReq$lt]"?: number;
                /** @description Less-than or equal filter for "levelReq" */
                "filter[levelReq$lte]"?: number;
                /** @description Greater-than filter for "levelReq" */
                "filter[levelReq$gt]"?: number;
                /** @description Greater-than or equal filter for "levelReq" */
                "filter[levelReq$gte]"?: number;
                /** @description Equality filter for "globalLoot" */
                "filter[globalLoot]"?: boolean;
                /** @description Equality filter for "twoHand" */
                "filter[twoHand]"?: boolean;
                /** @description Equality filter for "consumable" */
                "filter[consumable]"?: boolean;
                /** @description Equality filter for "sellPrice" */
                "filter[sellPrice]"?: number;
                /** @description Less-than filter for "sellPrice" */
                "filter[sellPrice$lt]"?: number;
                /** @description Less-than or equal filter for "sellPrice" */
                "filter[sellPrice$lte]"?: number;
                /** @description Greater-than filter for "sellPrice" */
                "filter[sellPrice$gt]"?: number;
                /** @description Greater-than or equal filter for "sellPrice" */
                "filter[sellPrice$gte]"?: number;
                /** @description Equality filter for "stackSize" */
                "filter[stackSize]"?: number;
                /** @description Less-than filter for "stackSize" */
                "filter[stackSize$lt]"?: number;
                /** @description Less-than or equal filter for "stackSize" */
                "filter[stackSize$lte]"?: number;
                /** @description Greater-than filter for "stackSize" */
                "filter[stackSize$gt]"?: number;
                /** @description Greater-than or equal filter for "stackSize" */
                "filter[stackSize$gte]"?: number;
                /** @description Equality filter for "droppedBy" */
                "filter[droppedBy]"?: string[];
                /** @description Equality filter for "soldBy" */
                "filter[soldBy]"?: string[];
                /** @description Equality filter for "craftedBy" */
                "filter[craftedBy]"?: string[];
                /** @description Equality filter for "usages" */
                "filter[usages]"?: string[];
                /** @description Equality filter for "battlePassTiers" */
                "filter[battlePassTiers]"?: string[];
                /** @description Equality filter for "battlePass" */
                "filter[battlePass]"?: string;
                /** @description Equality filter for "skillInfo" */
                "filter[skillInfo]"?: string;
                /** @description Equality filter for "area" */
                "filter[area]"?: string;
                /** @description Equality filter for "availableStart" */
                "filter[availableStart]"?: string;
                /** @description Less-than filter for "availableStart" */
                "filter[availableStart$lt]"?: string;
                /** @description Less-than or equal filter for "availableStart" */
                "filter[availableStart$lte]"?: string;
                /** @description Greater-than filter for "availableStart" */
                "filter[availableStart$gt]"?: string;
                /** @description Greater-than or equal filter for "availableStart" */
                "filter[availableStart$gte]"?: string;
                /** @description Equality filter for "availableEnd" */
                "filter[availableEnd]"?: string;
                /** @description Less-than filter for "availableEnd" */
                "filter[availableEnd$lt]"?: string;
                /** @description Less-than or equal filter for "availableEnd" */
                "filter[availableEnd$lte]"?: string;
                /** @description Greater-than filter for "availableEnd" */
                "filter[availableEnd$gt]"?: string;
                /** @description Greater-than or equal filter for "availableEnd" */
                "filter[availableEnd$gte]"?: string;
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "reqStr" */
                "filter[reqStr]"?: number;
                /** @description Less-than filter for "reqStr" */
                "filter[reqStr$lt]"?: number;
                /** @description Less-than or equal filter for "reqStr" */
                "filter[reqStr$lte]"?: number;
                /** @description Greater-than filter for "reqStr" */
                "filter[reqStr$gt]"?: number;
                /** @description Greater-than or equal filter for "reqStr" */
                "filter[reqStr$gte]"?: number;
                /** @description Equality filter for "reqSta" */
                "filter[reqSta]"?: number;
                /** @description Less-than filter for "reqSta" */
                "filter[reqSta$lt]"?: number;
                /** @description Less-than or equal filter for "reqSta" */
                "filter[reqSta$lte]"?: number;
                /** @description Greater-than filter for "reqSta" */
                "filter[reqSta$gt]"?: number;
                /** @description Greater-than or equal filter for "reqSta" */
                "filter[reqSta$gte]"?: number;
                /** @description Equality filter for "reqAgi" */
                "filter[reqAgi]"?: number;
                /** @description Less-than filter for "reqAgi" */
                "filter[reqAgi$lt]"?: number;
                /** @description Less-than or equal filter for "reqAgi" */
                "filter[reqAgi$lte]"?: number;
                /** @description Greater-than filter for "reqAgi" */
                "filter[reqAgi$gt]"?: number;
                /** @description Greater-than or equal filter for "reqAgi" */
                "filter[reqAgi$gte]"?: number;
                /** @description Equality filter for "reqInt" */
                "filter[reqInt]"?: number;
                /** @description Less-than filter for "reqInt" */
                "filter[reqInt$lt]"?: number;
                /** @description Less-than or equal filter for "reqInt" */
                "filter[reqInt$lte]"?: number;
                /** @description Greater-than filter for "reqInt" */
                "filter[reqInt$gt]"?: number;
                /** @description Greater-than or equal filter for "reqInt" */
                "filter[reqInt$gte]"?: number;
                /** @description Equality filter for "range" */
                "filter[range]"?: number;
                /** @description Less-than filter for "range" */
                "filter[range$lt]"?: number;
                /** @description Less-than or equal filter for "range" */
                "filter[range$lte]"?: number;
                /** @description Greater-than filter for "range" */
                "filter[range$gt]"?: number;
                /** @description Greater-than or equal filter for "range" */
                "filter[range$gte]"?: number;
                /** @description Equality filter for "str" */
                "filter[str]"?: number;
                /** @description Less-than filter for "str" */
                "filter[str$lt]"?: number;
                /** @description Less-than or equal filter for "str" */
                "filter[str$lte]"?: number;
                /** @description Greater-than filter for "str" */
                "filter[str$gt]"?: number;
                /** @description Greater-than or equal filter for "str" */
                "filter[str$gte]"?: number;
                /** @description Equality filter for "sta" */
                "filter[sta]"?: number;
                /** @description Less-than filter for "sta" */
                "filter[sta$lt]"?: number;
                /** @description Less-than or equal filter for "sta" */
                "filter[sta$lte]"?: number;
                /** @description Greater-than filter for "sta" */
                "filter[sta$gt]"?: number;
                /** @description Greater-than or equal filter for "sta" */
                "filter[sta$gte]"?: number;
                /** @description Equality filter for "agi" */
                "filter[agi]"?: number;
                /** @description Less-than filter for "agi" */
                "filter[agi$lt]"?: number;
                /** @description Less-than or equal filter for "agi" */
                "filter[agi$lte]"?: number;
                /** @description Greater-than filter for "agi" */
                "filter[agi$gt]"?: number;
                /** @description Greater-than or equal filter for "agi" */
                "filter[agi$gte]"?: number;
                /** @description Equality filter for "int" */
                "filter[int]"?: number;
                /** @description Less-than filter for "int" */
                "filter[int$lt]"?: number;
                /** @description Less-than or equal filter for "int" */
                "filter[int$lte]"?: number;
                /** @description Greater-than filter for "int" */
                "filter[int$gt]"?: number;
                /** @description Greater-than or equal filter for "int" */
                "filter[int$gte]"?: number;
                /** @description Equality filter for "armor" */
                "filter[armor]"?: number;
                /** @description Less-than filter for "armor" */
                "filter[armor$lt]"?: number;
                /** @description Less-than or equal filter for "armor" */
                "filter[armor$lte]"?: number;
                /** @description Greater-than filter for "armor" */
                "filter[armor$gt]"?: number;
                /** @description Greater-than or equal filter for "armor" */
                "filter[armor$gte]"?: number;
                /** @description Equality filter for "atkSpeed" */
                "filter[atkSpeed]"?: number;
                /** @description Less-than filter for "atkSpeed" */
                "filter[atkSpeed$lt]"?: number;
                /** @description Less-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$lte]"?: number;
                /** @description Greater-than filter for "atkSpeed" */
                "filter[atkSpeed$gt]"?: number;
                /** @description Greater-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$gte]"?: number;
                /** @description Equality filter for "dmgMin" */
                "filter[dmgMin]"?: number;
                /** @description Less-than filter for "dmgMin" */
                "filter[dmgMin$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMin" */
                "filter[dmgMin$lte]"?: number;
                /** @description Greater-than filter for "dmgMin" */
                "filter[dmgMin$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMin" */
                "filter[dmgMin$gte]"?: number;
                /** @description Equality filter for "dmgMax" */
                "filter[dmgMax]"?: number;
                /** @description Less-than filter for "dmgMax" */
                "filter[dmgMax$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMax" */
                "filter[dmgMax$lte]"?: number;
                /** @description Greater-than filter for "dmgMax" */
                "filter[dmgMax$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMax" */
                "filter[dmgMax$gte]"?: number;
                /** @description Equality filter for "artist" */
                "filter[artist]"?: string;
                /** @description String contains filter for "artist" */
                "filter[artist$contains]"?: string;
                /** @description String case-insensitive contains filter for "artist" */
                "filter[artist$icontains]"?: string;
                /** @description String full-text search filter for "artist" */
                "filter[artist$search]"?: string;
                /** @description String startsWith filter for "artist" */
                "filter[artist$startsWith]"?: string;
                /** @description String endsWith filter for "artist" */
                "filter[artist$endsWith]"?: string;
                /** @description Equality filter for "collections" */
                "filter[collections]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["BattlePassTierListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Item-relationship-battlePassTiers": {
        parameters: {
            query?: {
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "desc" */
                "filter[desc]"?: string;
                /** @description String contains filter for "desc" */
                "filter[desc$contains]"?: string;
                /** @description String case-insensitive contains filter for "desc" */
                "filter[desc$icontains]"?: string;
                /** @description String full-text search filter for "desc" */
                "filter[desc$search]"?: string;
                /** @description String startsWith filter for "desc" */
                "filter[desc$startsWith]"?: string;
                /** @description String endsWith filter for "desc" */
                "filter[desc$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "equip" */
                "filter[equip]"?: components["schemas"]["EquippableType"];
                /** @description Equality filter for "levelReq" */
                "filter[levelReq]"?: number;
                /** @description Less-than filter for "levelReq" */
                "filter[levelReq$lt]"?: number;
                /** @description Less-than or equal filter for "levelReq" */
                "filter[levelReq$lte]"?: number;
                /** @description Greater-than filter for "levelReq" */
                "filter[levelReq$gt]"?: number;
                /** @description Greater-than or equal filter for "levelReq" */
                "filter[levelReq$gte]"?: number;
                /** @description Equality filter for "globalLoot" */
                "filter[globalLoot]"?: boolean;
                /** @description Equality filter for "twoHand" */
                "filter[twoHand]"?: boolean;
                /** @description Equality filter for "consumable" */
                "filter[consumable]"?: boolean;
                /** @description Equality filter for "sellPrice" */
                "filter[sellPrice]"?: number;
                /** @description Less-than filter for "sellPrice" */
                "filter[sellPrice$lt]"?: number;
                /** @description Less-than or equal filter for "sellPrice" */
                "filter[sellPrice$lte]"?: number;
                /** @description Greater-than filter for "sellPrice" */
                "filter[sellPrice$gt]"?: number;
                /** @description Greater-than or equal filter for "sellPrice" */
                "filter[sellPrice$gte]"?: number;
                /** @description Equality filter for "stackSize" */
                "filter[stackSize]"?: number;
                /** @description Less-than filter for "stackSize" */
                "filter[stackSize$lt]"?: number;
                /** @description Less-than or equal filter for "stackSize" */
                "filter[stackSize$lte]"?: number;
                /** @description Greater-than filter for "stackSize" */
                "filter[stackSize$gt]"?: number;
                /** @description Greater-than or equal filter for "stackSize" */
                "filter[stackSize$gte]"?: number;
                /** @description Equality filter for "droppedBy" */
                "filter[droppedBy]"?: string[];
                /** @description Equality filter for "soldBy" */
                "filter[soldBy]"?: string[];
                /** @description Equality filter for "craftedBy" */
                "filter[craftedBy]"?: string[];
                /** @description Equality filter for "usages" */
                "filter[usages]"?: string[];
                /** @description Equality filter for "battlePassTiers" */
                "filter[battlePassTiers]"?: string[];
                /** @description Equality filter for "battlePass" */
                "filter[battlePass]"?: string;
                /** @description Equality filter for "skillInfo" */
                "filter[skillInfo]"?: string;
                /** @description Equality filter for "area" */
                "filter[area]"?: string;
                /** @description Equality filter for "availableStart" */
                "filter[availableStart]"?: string;
                /** @description Less-than filter for "availableStart" */
                "filter[availableStart$lt]"?: string;
                /** @description Less-than or equal filter for "availableStart" */
                "filter[availableStart$lte]"?: string;
                /** @description Greater-than filter for "availableStart" */
                "filter[availableStart$gt]"?: string;
                /** @description Greater-than or equal filter for "availableStart" */
                "filter[availableStart$gte]"?: string;
                /** @description Equality filter for "availableEnd" */
                "filter[availableEnd]"?: string;
                /** @description Less-than filter for "availableEnd" */
                "filter[availableEnd$lt]"?: string;
                /** @description Less-than or equal filter for "availableEnd" */
                "filter[availableEnd$lte]"?: string;
                /** @description Greater-than filter for "availableEnd" */
                "filter[availableEnd$gt]"?: string;
                /** @description Greater-than or equal filter for "availableEnd" */
                "filter[availableEnd$gte]"?: string;
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "reqStr" */
                "filter[reqStr]"?: number;
                /** @description Less-than filter for "reqStr" */
                "filter[reqStr$lt]"?: number;
                /** @description Less-than or equal filter for "reqStr" */
                "filter[reqStr$lte]"?: number;
                /** @description Greater-than filter for "reqStr" */
                "filter[reqStr$gt]"?: number;
                /** @description Greater-than or equal filter for "reqStr" */
                "filter[reqStr$gte]"?: number;
                /** @description Equality filter for "reqSta" */
                "filter[reqSta]"?: number;
                /** @description Less-than filter for "reqSta" */
                "filter[reqSta$lt]"?: number;
                /** @description Less-than or equal filter for "reqSta" */
                "filter[reqSta$lte]"?: number;
                /** @description Greater-than filter for "reqSta" */
                "filter[reqSta$gt]"?: number;
                /** @description Greater-than or equal filter for "reqSta" */
                "filter[reqSta$gte]"?: number;
                /** @description Equality filter for "reqAgi" */
                "filter[reqAgi]"?: number;
                /** @description Less-than filter for "reqAgi" */
                "filter[reqAgi$lt]"?: number;
                /** @description Less-than or equal filter for "reqAgi" */
                "filter[reqAgi$lte]"?: number;
                /** @description Greater-than filter for "reqAgi" */
                "filter[reqAgi$gt]"?: number;
                /** @description Greater-than or equal filter for "reqAgi" */
                "filter[reqAgi$gte]"?: number;
                /** @description Equality filter for "reqInt" */
                "filter[reqInt]"?: number;
                /** @description Less-than filter for "reqInt" */
                "filter[reqInt$lt]"?: number;
                /** @description Less-than or equal filter for "reqInt" */
                "filter[reqInt$lte]"?: number;
                /** @description Greater-than filter for "reqInt" */
                "filter[reqInt$gt]"?: number;
                /** @description Greater-than or equal filter for "reqInt" */
                "filter[reqInt$gte]"?: number;
                /** @description Equality filter for "range" */
                "filter[range]"?: number;
                /** @description Less-than filter for "range" */
                "filter[range$lt]"?: number;
                /** @description Less-than or equal filter for "range" */
                "filter[range$lte]"?: number;
                /** @description Greater-than filter for "range" */
                "filter[range$gt]"?: number;
                /** @description Greater-than or equal filter for "range" */
                "filter[range$gte]"?: number;
                /** @description Equality filter for "str" */
                "filter[str]"?: number;
                /** @description Less-than filter for "str" */
                "filter[str$lt]"?: number;
                /** @description Less-than or equal filter for "str" */
                "filter[str$lte]"?: number;
                /** @description Greater-than filter for "str" */
                "filter[str$gt]"?: number;
                /** @description Greater-than or equal filter for "str" */
                "filter[str$gte]"?: number;
                /** @description Equality filter for "sta" */
                "filter[sta]"?: number;
                /** @description Less-than filter for "sta" */
                "filter[sta$lt]"?: number;
                /** @description Less-than or equal filter for "sta" */
                "filter[sta$lte]"?: number;
                /** @description Greater-than filter for "sta" */
                "filter[sta$gt]"?: number;
                /** @description Greater-than or equal filter for "sta" */
                "filter[sta$gte]"?: number;
                /** @description Equality filter for "agi" */
                "filter[agi]"?: number;
                /** @description Less-than filter for "agi" */
                "filter[agi$lt]"?: number;
                /** @description Less-than or equal filter for "agi" */
                "filter[agi$lte]"?: number;
                /** @description Greater-than filter for "agi" */
                "filter[agi$gt]"?: number;
                /** @description Greater-than or equal filter for "agi" */
                "filter[agi$gte]"?: number;
                /** @description Equality filter for "int" */
                "filter[int]"?: number;
                /** @description Less-than filter for "int" */
                "filter[int$lt]"?: number;
                /** @description Less-than or equal filter for "int" */
                "filter[int$lte]"?: number;
                /** @description Greater-than filter for "int" */
                "filter[int$gt]"?: number;
                /** @description Greater-than or equal filter for "int" */
                "filter[int$gte]"?: number;
                /** @description Equality filter for "armor" */
                "filter[armor]"?: number;
                /** @description Less-than filter for "armor" */
                "filter[armor$lt]"?: number;
                /** @description Less-than or equal filter for "armor" */
                "filter[armor$lte]"?: number;
                /** @description Greater-than filter for "armor" */
                "filter[armor$gt]"?: number;
                /** @description Greater-than or equal filter for "armor" */
                "filter[armor$gte]"?: number;
                /** @description Equality filter for "atkSpeed" */
                "filter[atkSpeed]"?: number;
                /** @description Less-than filter for "atkSpeed" */
                "filter[atkSpeed$lt]"?: number;
                /** @description Less-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$lte]"?: number;
                /** @description Greater-than filter for "atkSpeed" */
                "filter[atkSpeed$gt]"?: number;
                /** @description Greater-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$gte]"?: number;
                /** @description Equality filter for "dmgMin" */
                "filter[dmgMin]"?: number;
                /** @description Less-than filter for "dmgMin" */
                "filter[dmgMin$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMin" */
                "filter[dmgMin$lte]"?: number;
                /** @description Greater-than filter for "dmgMin" */
                "filter[dmgMin$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMin" */
                "filter[dmgMin$gte]"?: number;
                /** @description Equality filter for "dmgMax" */
                "filter[dmgMax]"?: number;
                /** @description Less-than filter for "dmgMax" */
                "filter[dmgMax$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMax" */
                "filter[dmgMax$lte]"?: number;
                /** @description Greater-than filter for "dmgMax" */
                "filter[dmgMax$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMax" */
                "filter[dmgMax$gte]"?: number;
                /** @description Equality filter for "artist" */
                "filter[artist]"?: string;
                /** @description String contains filter for "artist" */
                "filter[artist$contains]"?: string;
                /** @description String case-insensitive contains filter for "artist" */
                "filter[artist$icontains]"?: string;
                /** @description String full-text search filter for "artist" */
                "filter[artist$search]"?: string;
                /** @description String startsWith filter for "artist" */
                "filter[artist$startsWith]"?: string;
                /** @description String endsWith filter for "artist" */
                "filter[artist$endsWith]"?: string;
                /** @description Equality filter for "collections" */
                "filter[collections]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Item-relationship-battlePassTiers-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Item-relationship-battlePassTiers": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Item-relationship-battlePassTiers-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Item-related-battlePass": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["BattlePassResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Item-relationship-battlePass": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Item-relationship-battlePass-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Item-relationship-battlePass-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Item-related-skillInfo": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["SkillResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Item-relationship-skillInfo": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Item-relationship-skillInfo-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Item-relationship-skillInfo-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Item-related-area": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["AreaResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Item-relationship-area": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Item-relationship-area-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Item-relationship-area-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Item-related-collections": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "desc" */
                "filter[desc]"?: string;
                /** @description String contains filter for "desc" */
                "filter[desc$contains]"?: string;
                /** @description String case-insensitive contains filter for "desc" */
                "filter[desc$icontains]"?: string;
                /** @description String full-text search filter for "desc" */
                "filter[desc$search]"?: string;
                /** @description String startsWith filter for "desc" */
                "filter[desc$startsWith]"?: string;
                /** @description String endsWith filter for "desc" */
                "filter[desc$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "equip" */
                "filter[equip]"?: components["schemas"]["EquippableType"];
                /** @description Equality filter for "levelReq" */
                "filter[levelReq]"?: number;
                /** @description Less-than filter for "levelReq" */
                "filter[levelReq$lt]"?: number;
                /** @description Less-than or equal filter for "levelReq" */
                "filter[levelReq$lte]"?: number;
                /** @description Greater-than filter for "levelReq" */
                "filter[levelReq$gt]"?: number;
                /** @description Greater-than or equal filter for "levelReq" */
                "filter[levelReq$gte]"?: number;
                /** @description Equality filter for "globalLoot" */
                "filter[globalLoot]"?: boolean;
                /** @description Equality filter for "twoHand" */
                "filter[twoHand]"?: boolean;
                /** @description Equality filter for "consumable" */
                "filter[consumable]"?: boolean;
                /** @description Equality filter for "sellPrice" */
                "filter[sellPrice]"?: number;
                /** @description Less-than filter for "sellPrice" */
                "filter[sellPrice$lt]"?: number;
                /** @description Less-than or equal filter for "sellPrice" */
                "filter[sellPrice$lte]"?: number;
                /** @description Greater-than filter for "sellPrice" */
                "filter[sellPrice$gt]"?: number;
                /** @description Greater-than or equal filter for "sellPrice" */
                "filter[sellPrice$gte]"?: number;
                /** @description Equality filter for "stackSize" */
                "filter[stackSize]"?: number;
                /** @description Less-than filter for "stackSize" */
                "filter[stackSize$lt]"?: number;
                /** @description Less-than or equal filter for "stackSize" */
                "filter[stackSize$lte]"?: number;
                /** @description Greater-than filter for "stackSize" */
                "filter[stackSize$gt]"?: number;
                /** @description Greater-than or equal filter for "stackSize" */
                "filter[stackSize$gte]"?: number;
                /** @description Equality filter for "droppedBy" */
                "filter[droppedBy]"?: string[];
                /** @description Equality filter for "soldBy" */
                "filter[soldBy]"?: string[];
                /** @description Equality filter for "craftedBy" */
                "filter[craftedBy]"?: string[];
                /** @description Equality filter for "usages" */
                "filter[usages]"?: string[];
                /** @description Equality filter for "battlePassTiers" */
                "filter[battlePassTiers]"?: string[];
                /** @description Equality filter for "battlePass" */
                "filter[battlePass]"?: string;
                /** @description Equality filter for "skillInfo" */
                "filter[skillInfo]"?: string;
                /** @description Equality filter for "area" */
                "filter[area]"?: string;
                /** @description Equality filter for "availableStart" */
                "filter[availableStart]"?: string;
                /** @description Less-than filter for "availableStart" */
                "filter[availableStart$lt]"?: string;
                /** @description Less-than or equal filter for "availableStart" */
                "filter[availableStart$lte]"?: string;
                /** @description Greater-than filter for "availableStart" */
                "filter[availableStart$gt]"?: string;
                /** @description Greater-than or equal filter for "availableStart" */
                "filter[availableStart$gte]"?: string;
                /** @description Equality filter for "availableEnd" */
                "filter[availableEnd]"?: string;
                /** @description Less-than filter for "availableEnd" */
                "filter[availableEnd$lt]"?: string;
                /** @description Less-than or equal filter for "availableEnd" */
                "filter[availableEnd$lte]"?: string;
                /** @description Greater-than filter for "availableEnd" */
                "filter[availableEnd$gt]"?: string;
                /** @description Greater-than or equal filter for "availableEnd" */
                "filter[availableEnd$gte]"?: string;
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "reqStr" */
                "filter[reqStr]"?: number;
                /** @description Less-than filter for "reqStr" */
                "filter[reqStr$lt]"?: number;
                /** @description Less-than or equal filter for "reqStr" */
                "filter[reqStr$lte]"?: number;
                /** @description Greater-than filter for "reqStr" */
                "filter[reqStr$gt]"?: number;
                /** @description Greater-than or equal filter for "reqStr" */
                "filter[reqStr$gte]"?: number;
                /** @description Equality filter for "reqSta" */
                "filter[reqSta]"?: number;
                /** @description Less-than filter for "reqSta" */
                "filter[reqSta$lt]"?: number;
                /** @description Less-than or equal filter for "reqSta" */
                "filter[reqSta$lte]"?: number;
                /** @description Greater-than filter for "reqSta" */
                "filter[reqSta$gt]"?: number;
                /** @description Greater-than or equal filter for "reqSta" */
                "filter[reqSta$gte]"?: number;
                /** @description Equality filter for "reqAgi" */
                "filter[reqAgi]"?: number;
                /** @description Less-than filter for "reqAgi" */
                "filter[reqAgi$lt]"?: number;
                /** @description Less-than or equal filter for "reqAgi" */
                "filter[reqAgi$lte]"?: number;
                /** @description Greater-than filter for "reqAgi" */
                "filter[reqAgi$gt]"?: number;
                /** @description Greater-than or equal filter for "reqAgi" */
                "filter[reqAgi$gte]"?: number;
                /** @description Equality filter for "reqInt" */
                "filter[reqInt]"?: number;
                /** @description Less-than filter for "reqInt" */
                "filter[reqInt$lt]"?: number;
                /** @description Less-than or equal filter for "reqInt" */
                "filter[reqInt$lte]"?: number;
                /** @description Greater-than filter for "reqInt" */
                "filter[reqInt$gt]"?: number;
                /** @description Greater-than or equal filter for "reqInt" */
                "filter[reqInt$gte]"?: number;
                /** @description Equality filter for "range" */
                "filter[range]"?: number;
                /** @description Less-than filter for "range" */
                "filter[range$lt]"?: number;
                /** @description Less-than or equal filter for "range" */
                "filter[range$lte]"?: number;
                /** @description Greater-than filter for "range" */
                "filter[range$gt]"?: number;
                /** @description Greater-than or equal filter for "range" */
                "filter[range$gte]"?: number;
                /** @description Equality filter for "str" */
                "filter[str]"?: number;
                /** @description Less-than filter for "str" */
                "filter[str$lt]"?: number;
                /** @description Less-than or equal filter for "str" */
                "filter[str$lte]"?: number;
                /** @description Greater-than filter for "str" */
                "filter[str$gt]"?: number;
                /** @description Greater-than or equal filter for "str" */
                "filter[str$gte]"?: number;
                /** @description Equality filter for "sta" */
                "filter[sta]"?: number;
                /** @description Less-than filter for "sta" */
                "filter[sta$lt]"?: number;
                /** @description Less-than or equal filter for "sta" */
                "filter[sta$lte]"?: number;
                /** @description Greater-than filter for "sta" */
                "filter[sta$gt]"?: number;
                /** @description Greater-than or equal filter for "sta" */
                "filter[sta$gte]"?: number;
                /** @description Equality filter for "agi" */
                "filter[agi]"?: number;
                /** @description Less-than filter for "agi" */
                "filter[agi$lt]"?: number;
                /** @description Less-than or equal filter for "agi" */
                "filter[agi$lte]"?: number;
                /** @description Greater-than filter for "agi" */
                "filter[agi$gt]"?: number;
                /** @description Greater-than or equal filter for "agi" */
                "filter[agi$gte]"?: number;
                /** @description Equality filter for "int" */
                "filter[int]"?: number;
                /** @description Less-than filter for "int" */
                "filter[int$lt]"?: number;
                /** @description Less-than or equal filter for "int" */
                "filter[int$lte]"?: number;
                /** @description Greater-than filter for "int" */
                "filter[int$gt]"?: number;
                /** @description Greater-than or equal filter for "int" */
                "filter[int$gte]"?: number;
                /** @description Equality filter for "armor" */
                "filter[armor]"?: number;
                /** @description Less-than filter for "armor" */
                "filter[armor$lt]"?: number;
                /** @description Less-than or equal filter for "armor" */
                "filter[armor$lte]"?: number;
                /** @description Greater-than filter for "armor" */
                "filter[armor$gt]"?: number;
                /** @description Greater-than or equal filter for "armor" */
                "filter[armor$gte]"?: number;
                /** @description Equality filter for "atkSpeed" */
                "filter[atkSpeed]"?: number;
                /** @description Less-than filter for "atkSpeed" */
                "filter[atkSpeed$lt]"?: number;
                /** @description Less-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$lte]"?: number;
                /** @description Greater-than filter for "atkSpeed" */
                "filter[atkSpeed$gt]"?: number;
                /** @description Greater-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$gte]"?: number;
                /** @description Equality filter for "dmgMin" */
                "filter[dmgMin]"?: number;
                /** @description Less-than filter for "dmgMin" */
                "filter[dmgMin$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMin" */
                "filter[dmgMin$lte]"?: number;
                /** @description Greater-than filter for "dmgMin" */
                "filter[dmgMin$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMin" */
                "filter[dmgMin$gte]"?: number;
                /** @description Equality filter for "dmgMax" */
                "filter[dmgMax]"?: number;
                /** @description Less-than filter for "dmgMax" */
                "filter[dmgMax$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMax" */
                "filter[dmgMax$lte]"?: number;
                /** @description Greater-than filter for "dmgMax" */
                "filter[dmgMax$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMax" */
                "filter[dmgMax$gte]"?: number;
                /** @description Equality filter for "artist" */
                "filter[artist]"?: string;
                /** @description String contains filter for "artist" */
                "filter[artist$contains]"?: string;
                /** @description String case-insensitive contains filter for "artist" */
                "filter[artist$icontains]"?: string;
                /** @description String full-text search filter for "artist" */
                "filter[artist$search]"?: string;
                /** @description String startsWith filter for "artist" */
                "filter[artist$startsWith]"?: string;
                /** @description String endsWith filter for "artist" */
                "filter[artist$endsWith]"?: string;
                /** @description Equality filter for "collections" */
                "filter[collections]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["CollectionItemListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Item-relationship-collections": {
        parameters: {
            query?: {
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "desc" */
                "filter[desc]"?: string;
                /** @description String contains filter for "desc" */
                "filter[desc$contains]"?: string;
                /** @description String case-insensitive contains filter for "desc" */
                "filter[desc$icontains]"?: string;
                /** @description String full-text search filter for "desc" */
                "filter[desc$search]"?: string;
                /** @description String startsWith filter for "desc" */
                "filter[desc$startsWith]"?: string;
                /** @description String endsWith filter for "desc" */
                "filter[desc$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "equip" */
                "filter[equip]"?: components["schemas"]["EquippableType"];
                /** @description Equality filter for "levelReq" */
                "filter[levelReq]"?: number;
                /** @description Less-than filter for "levelReq" */
                "filter[levelReq$lt]"?: number;
                /** @description Less-than or equal filter for "levelReq" */
                "filter[levelReq$lte]"?: number;
                /** @description Greater-than filter for "levelReq" */
                "filter[levelReq$gt]"?: number;
                /** @description Greater-than or equal filter for "levelReq" */
                "filter[levelReq$gte]"?: number;
                /** @description Equality filter for "globalLoot" */
                "filter[globalLoot]"?: boolean;
                /** @description Equality filter for "twoHand" */
                "filter[twoHand]"?: boolean;
                /** @description Equality filter for "consumable" */
                "filter[consumable]"?: boolean;
                /** @description Equality filter for "sellPrice" */
                "filter[sellPrice]"?: number;
                /** @description Less-than filter for "sellPrice" */
                "filter[sellPrice$lt]"?: number;
                /** @description Less-than or equal filter for "sellPrice" */
                "filter[sellPrice$lte]"?: number;
                /** @description Greater-than filter for "sellPrice" */
                "filter[sellPrice$gt]"?: number;
                /** @description Greater-than or equal filter for "sellPrice" */
                "filter[sellPrice$gte]"?: number;
                /** @description Equality filter for "stackSize" */
                "filter[stackSize]"?: number;
                /** @description Less-than filter for "stackSize" */
                "filter[stackSize$lt]"?: number;
                /** @description Less-than or equal filter for "stackSize" */
                "filter[stackSize$lte]"?: number;
                /** @description Greater-than filter for "stackSize" */
                "filter[stackSize$gt]"?: number;
                /** @description Greater-than or equal filter for "stackSize" */
                "filter[stackSize$gte]"?: number;
                /** @description Equality filter for "droppedBy" */
                "filter[droppedBy]"?: string[];
                /** @description Equality filter for "soldBy" */
                "filter[soldBy]"?: string[];
                /** @description Equality filter for "craftedBy" */
                "filter[craftedBy]"?: string[];
                /** @description Equality filter for "usages" */
                "filter[usages]"?: string[];
                /** @description Equality filter for "battlePassTiers" */
                "filter[battlePassTiers]"?: string[];
                /** @description Equality filter for "battlePass" */
                "filter[battlePass]"?: string;
                /** @description Equality filter for "skillInfo" */
                "filter[skillInfo]"?: string;
                /** @description Equality filter for "area" */
                "filter[area]"?: string;
                /** @description Equality filter for "availableStart" */
                "filter[availableStart]"?: string;
                /** @description Less-than filter for "availableStart" */
                "filter[availableStart$lt]"?: string;
                /** @description Less-than or equal filter for "availableStart" */
                "filter[availableStart$lte]"?: string;
                /** @description Greater-than filter for "availableStart" */
                "filter[availableStart$gt]"?: string;
                /** @description Greater-than or equal filter for "availableStart" */
                "filter[availableStart$gte]"?: string;
                /** @description Equality filter for "availableEnd" */
                "filter[availableEnd]"?: string;
                /** @description Less-than filter for "availableEnd" */
                "filter[availableEnd$lt]"?: string;
                /** @description Less-than or equal filter for "availableEnd" */
                "filter[availableEnd$lte]"?: string;
                /** @description Greater-than filter for "availableEnd" */
                "filter[availableEnd$gt]"?: string;
                /** @description Greater-than or equal filter for "availableEnd" */
                "filter[availableEnd$gte]"?: string;
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "reqStr" */
                "filter[reqStr]"?: number;
                /** @description Less-than filter for "reqStr" */
                "filter[reqStr$lt]"?: number;
                /** @description Less-than or equal filter for "reqStr" */
                "filter[reqStr$lte]"?: number;
                /** @description Greater-than filter for "reqStr" */
                "filter[reqStr$gt]"?: number;
                /** @description Greater-than or equal filter for "reqStr" */
                "filter[reqStr$gte]"?: number;
                /** @description Equality filter for "reqSta" */
                "filter[reqSta]"?: number;
                /** @description Less-than filter for "reqSta" */
                "filter[reqSta$lt]"?: number;
                /** @description Less-than or equal filter for "reqSta" */
                "filter[reqSta$lte]"?: number;
                /** @description Greater-than filter for "reqSta" */
                "filter[reqSta$gt]"?: number;
                /** @description Greater-than or equal filter for "reqSta" */
                "filter[reqSta$gte]"?: number;
                /** @description Equality filter for "reqAgi" */
                "filter[reqAgi]"?: number;
                /** @description Less-than filter for "reqAgi" */
                "filter[reqAgi$lt]"?: number;
                /** @description Less-than or equal filter for "reqAgi" */
                "filter[reqAgi$lte]"?: number;
                /** @description Greater-than filter for "reqAgi" */
                "filter[reqAgi$gt]"?: number;
                /** @description Greater-than or equal filter for "reqAgi" */
                "filter[reqAgi$gte]"?: number;
                /** @description Equality filter for "reqInt" */
                "filter[reqInt]"?: number;
                /** @description Less-than filter for "reqInt" */
                "filter[reqInt$lt]"?: number;
                /** @description Less-than or equal filter for "reqInt" */
                "filter[reqInt$lte]"?: number;
                /** @description Greater-than filter for "reqInt" */
                "filter[reqInt$gt]"?: number;
                /** @description Greater-than or equal filter for "reqInt" */
                "filter[reqInt$gte]"?: number;
                /** @description Equality filter for "range" */
                "filter[range]"?: number;
                /** @description Less-than filter for "range" */
                "filter[range$lt]"?: number;
                /** @description Less-than or equal filter for "range" */
                "filter[range$lte]"?: number;
                /** @description Greater-than filter for "range" */
                "filter[range$gt]"?: number;
                /** @description Greater-than or equal filter for "range" */
                "filter[range$gte]"?: number;
                /** @description Equality filter for "str" */
                "filter[str]"?: number;
                /** @description Less-than filter for "str" */
                "filter[str$lt]"?: number;
                /** @description Less-than or equal filter for "str" */
                "filter[str$lte]"?: number;
                /** @description Greater-than filter for "str" */
                "filter[str$gt]"?: number;
                /** @description Greater-than or equal filter for "str" */
                "filter[str$gte]"?: number;
                /** @description Equality filter for "sta" */
                "filter[sta]"?: number;
                /** @description Less-than filter for "sta" */
                "filter[sta$lt]"?: number;
                /** @description Less-than or equal filter for "sta" */
                "filter[sta$lte]"?: number;
                /** @description Greater-than filter for "sta" */
                "filter[sta$gt]"?: number;
                /** @description Greater-than or equal filter for "sta" */
                "filter[sta$gte]"?: number;
                /** @description Equality filter for "agi" */
                "filter[agi]"?: number;
                /** @description Less-than filter for "agi" */
                "filter[agi$lt]"?: number;
                /** @description Less-than or equal filter for "agi" */
                "filter[agi$lte]"?: number;
                /** @description Greater-than filter for "agi" */
                "filter[agi$gt]"?: number;
                /** @description Greater-than or equal filter for "agi" */
                "filter[agi$gte]"?: number;
                /** @description Equality filter for "int" */
                "filter[int]"?: number;
                /** @description Less-than filter for "int" */
                "filter[int$lt]"?: number;
                /** @description Less-than or equal filter for "int" */
                "filter[int$lte]"?: number;
                /** @description Greater-than filter for "int" */
                "filter[int$gt]"?: number;
                /** @description Greater-than or equal filter for "int" */
                "filter[int$gte]"?: number;
                /** @description Equality filter for "armor" */
                "filter[armor]"?: number;
                /** @description Less-than filter for "armor" */
                "filter[armor$lt]"?: number;
                /** @description Less-than or equal filter for "armor" */
                "filter[armor$lte]"?: number;
                /** @description Greater-than filter for "armor" */
                "filter[armor$gt]"?: number;
                /** @description Greater-than or equal filter for "armor" */
                "filter[armor$gte]"?: number;
                /** @description Equality filter for "atkSpeed" */
                "filter[atkSpeed]"?: number;
                /** @description Less-than filter for "atkSpeed" */
                "filter[atkSpeed$lt]"?: number;
                /** @description Less-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$lte]"?: number;
                /** @description Greater-than filter for "atkSpeed" */
                "filter[atkSpeed$gt]"?: number;
                /** @description Greater-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$gte]"?: number;
                /** @description Equality filter for "dmgMin" */
                "filter[dmgMin]"?: number;
                /** @description Less-than filter for "dmgMin" */
                "filter[dmgMin$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMin" */
                "filter[dmgMin$lte]"?: number;
                /** @description Greater-than filter for "dmgMin" */
                "filter[dmgMin$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMin" */
                "filter[dmgMin$gte]"?: number;
                /** @description Equality filter for "dmgMax" */
                "filter[dmgMax]"?: number;
                /** @description Less-than filter for "dmgMax" */
                "filter[dmgMax$lt]"?: number;
                /** @description Less-than or equal filter for "dmgMax" */
                "filter[dmgMax$lte]"?: number;
                /** @description Greater-than filter for "dmgMax" */
                "filter[dmgMax$gt]"?: number;
                /** @description Greater-than or equal filter for "dmgMax" */
                "filter[dmgMax$gte]"?: number;
                /** @description Equality filter for "artist" */
                "filter[artist]"?: string;
                /** @description String contains filter for "artist" */
                "filter[artist$contains]"?: string;
                /** @description String case-insensitive contains filter for "artist" */
                "filter[artist$icontains]"?: string;
                /** @description String full-text search filter for "artist" */
                "filter[artist$search]"?: string;
                /** @description String startsWith filter for "artist" */
                "filter[artist$startsWith]"?: string;
                /** @description String endsWith filter for "artist" */
                "filter[artist$endsWith]"?: string;
                /** @description Equality filter for "collections" */
                "filter[collections]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Item-relationship-collections-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Item-relationship-collections": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Item-relationship-collections-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "list-Location": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "area" */
                "filter[area]"?: string;
                /** @description Equality filter for "x" */
                "filter[x]"?: number;
                /** @description Less-than filter for "x" */
                "filter[x$lt]"?: number;
                /** @description Less-than or equal filter for "x" */
                "filter[x$lte]"?: number;
                /** @description Greater-than filter for "x" */
                "filter[x$gt]"?: number;
                /** @description Greater-than or equal filter for "x" */
                "filter[x$gte]"?: number;
                /** @description Equality filter for "y" */
                "filter[y]"?: number;
                /** @description Less-than filter for "y" */
                "filter[y$lt]"?: number;
                /** @description Less-than or equal filter for "y" */
                "filter[y$lte]"?: number;
                /** @description Greater-than filter for "y" */
                "filter[y$gt]"?: number;
                /** @description Greater-than or equal filter for "y" */
                "filter[y$gte]"?: number;
                /** @description Equality filter for "npc" */
                "filter[npc]"?: string;
                /** @description Equality filter for "mob" */
                "filter[mob]"?: string;
                /** @description Equality filter for "connectedArea" */
                "filter[connectedArea]"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["LocationListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["LocationCreateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["LocationResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Location": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["LocationResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Location-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["LocationUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["LocationResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "delete-Location": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Location-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["LocationUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["LocationResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Location-related-area": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["AreaResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Location-relationship-area": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Location-relationship-area-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Location-relationship-area-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Location-related-npc": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["NpcResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Location-relationship-npc": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Location-relationship-npc-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Location-relationship-npc-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Location-related-mob": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["MobResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Location-relationship-mob": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Location-relationship-mob-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Location-relationship-mob-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Location-related-connectedArea": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["AreaResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Location-relationship-connectedArea": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Location-relationship-connectedArea-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Location-relationship-connectedArea-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "list-Area": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "height" */
                "filter[height]"?: number;
                /** @description Less-than filter for "height" */
                "filter[height$lt]"?: number;
                /** @description Less-than or equal filter for "height" */
                "filter[height$lte]"?: number;
                /** @description Greater-than filter for "height" */
                "filter[height$gt]"?: number;
                /** @description Greater-than or equal filter for "height" */
                "filter[height$gte]"?: number;
                /** @description Equality filter for "width" */
                "filter[width]"?: number;
                /** @description Less-than filter for "width" */
                "filter[width$lt]"?: number;
                /** @description Less-than or equal filter for "width" */
                "filter[width$lte]"?: number;
                /** @description Greater-than filter for "width" */
                "filter[width$gt]"?: number;
                /** @description Greater-than or equal filter for "width" */
                "filter[width$gte]"?: number;
                /** @description Equality filter for "locations" */
                "filter[locations]"?: string[];
                /** @description Equality filter for "region" */
                "filter[region]"?: number;
                /** @description Less-than filter for "region" */
                "filter[region$lt]"?: number;
                /** @description Less-than or equal filter for "region" */
                "filter[region$lte]"?: number;
                /** @description Greater-than filter for "region" */
                "filter[region$gt]"?: number;
                /** @description Greater-than or equal filter for "region" */
                "filter[region$gte]"?: number;
                /** @description Equality filter for "originXGlobal" */
                "filter[originXGlobal]"?: number;
                /** @description Less-than filter for "originXGlobal" */
                "filter[originXGlobal$lt]"?: number;
                /** @description Less-than or equal filter for "originXGlobal" */
                "filter[originXGlobal$lte]"?: number;
                /** @description Greater-than filter for "originXGlobal" */
                "filter[originXGlobal$gt]"?: number;
                /** @description Greater-than or equal filter for "originXGlobal" */
                "filter[originXGlobal$gte]"?: number;
                /** @description Equality filter for "originYGlobal" */
                "filter[originYGlobal]"?: number;
                /** @description Less-than filter for "originYGlobal" */
                "filter[originYGlobal$lt]"?: number;
                /** @description Less-than or equal filter for "originYGlobal" */
                "filter[originYGlobal$lte]"?: number;
                /** @description Greater-than filter for "originYGlobal" */
                "filter[originYGlobal$gt]"?: number;
                /** @description Greater-than or equal filter for "originYGlobal" */
                "filter[originYGlobal$gte]"?: number;
                /** @description Equality filter for "portals" */
                "filter[portals]"?: string[];
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "items" */
                "filter[items]"?: string[];
                /** @description Equality filter for "skills" */
                "filter[skills]"?: string[];
                /** @description Equality filter for "npcs" */
                "filter[npcs]"?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["AreaListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Area": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["AreaCreateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["AreaResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Area": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["AreaResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Area-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["AreaUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["AreaResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "delete-Area": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Area-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["AreaUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["AreaResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Area-related-locations": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "height" */
                "filter[height]"?: number;
                /** @description Less-than filter for "height" */
                "filter[height$lt]"?: number;
                /** @description Less-than or equal filter for "height" */
                "filter[height$lte]"?: number;
                /** @description Greater-than filter for "height" */
                "filter[height$gt]"?: number;
                /** @description Greater-than or equal filter for "height" */
                "filter[height$gte]"?: number;
                /** @description Equality filter for "width" */
                "filter[width]"?: number;
                /** @description Less-than filter for "width" */
                "filter[width$lt]"?: number;
                /** @description Less-than or equal filter for "width" */
                "filter[width$lte]"?: number;
                /** @description Greater-than filter for "width" */
                "filter[width$gt]"?: number;
                /** @description Greater-than or equal filter for "width" */
                "filter[width$gte]"?: number;
                /** @description Equality filter for "locations" */
                "filter[locations]"?: string[];
                /** @description Equality filter for "region" */
                "filter[region]"?: number;
                /** @description Less-than filter for "region" */
                "filter[region$lt]"?: number;
                /** @description Less-than or equal filter for "region" */
                "filter[region$lte]"?: number;
                /** @description Greater-than filter for "region" */
                "filter[region$gt]"?: number;
                /** @description Greater-than or equal filter for "region" */
                "filter[region$gte]"?: number;
                /** @description Equality filter for "originXGlobal" */
                "filter[originXGlobal]"?: number;
                /** @description Less-than filter for "originXGlobal" */
                "filter[originXGlobal$lt]"?: number;
                /** @description Less-than or equal filter for "originXGlobal" */
                "filter[originXGlobal$lte]"?: number;
                /** @description Greater-than filter for "originXGlobal" */
                "filter[originXGlobal$gt]"?: number;
                /** @description Greater-than or equal filter for "originXGlobal" */
                "filter[originXGlobal$gte]"?: number;
                /** @description Equality filter for "originYGlobal" */
                "filter[originYGlobal]"?: number;
                /** @description Less-than filter for "originYGlobal" */
                "filter[originYGlobal$lt]"?: number;
                /** @description Less-than or equal filter for "originYGlobal" */
                "filter[originYGlobal$lte]"?: number;
                /** @description Greater-than filter for "originYGlobal" */
                "filter[originYGlobal$gt]"?: number;
                /** @description Greater-than or equal filter for "originYGlobal" */
                "filter[originYGlobal$gte]"?: number;
                /** @description Equality filter for "portals" */
                "filter[portals]"?: string[];
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "items" */
                "filter[items]"?: string[];
                /** @description Equality filter for "skills" */
                "filter[skills]"?: string[];
                /** @description Equality filter for "npcs" */
                "filter[npcs]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["LocationListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Area-relationship-locations": {
        parameters: {
            query?: {
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "height" */
                "filter[height]"?: number;
                /** @description Less-than filter for "height" */
                "filter[height$lt]"?: number;
                /** @description Less-than or equal filter for "height" */
                "filter[height$lte]"?: number;
                /** @description Greater-than filter for "height" */
                "filter[height$gt]"?: number;
                /** @description Greater-than or equal filter for "height" */
                "filter[height$gte]"?: number;
                /** @description Equality filter for "width" */
                "filter[width]"?: number;
                /** @description Less-than filter for "width" */
                "filter[width$lt]"?: number;
                /** @description Less-than or equal filter for "width" */
                "filter[width$lte]"?: number;
                /** @description Greater-than filter for "width" */
                "filter[width$gt]"?: number;
                /** @description Greater-than or equal filter for "width" */
                "filter[width$gte]"?: number;
                /** @description Equality filter for "locations" */
                "filter[locations]"?: string[];
                /** @description Equality filter for "region" */
                "filter[region]"?: number;
                /** @description Less-than filter for "region" */
                "filter[region$lt]"?: number;
                /** @description Less-than or equal filter for "region" */
                "filter[region$lte]"?: number;
                /** @description Greater-than filter for "region" */
                "filter[region$gt]"?: number;
                /** @description Greater-than or equal filter for "region" */
                "filter[region$gte]"?: number;
                /** @description Equality filter for "originXGlobal" */
                "filter[originXGlobal]"?: number;
                /** @description Less-than filter for "originXGlobal" */
                "filter[originXGlobal$lt]"?: number;
                /** @description Less-than or equal filter for "originXGlobal" */
                "filter[originXGlobal$lte]"?: number;
                /** @description Greater-than filter for "originXGlobal" */
                "filter[originXGlobal$gt]"?: number;
                /** @description Greater-than or equal filter for "originXGlobal" */
                "filter[originXGlobal$gte]"?: number;
                /** @description Equality filter for "originYGlobal" */
                "filter[originYGlobal]"?: number;
                /** @description Less-than filter for "originYGlobal" */
                "filter[originYGlobal$lt]"?: number;
                /** @description Less-than or equal filter for "originYGlobal" */
                "filter[originYGlobal$lte]"?: number;
                /** @description Greater-than filter for "originYGlobal" */
                "filter[originYGlobal$gt]"?: number;
                /** @description Greater-than or equal filter for "originYGlobal" */
                "filter[originYGlobal$gte]"?: number;
                /** @description Equality filter for "portals" */
                "filter[portals]"?: string[];
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "items" */
                "filter[items]"?: string[];
                /** @description Equality filter for "skills" */
                "filter[skills]"?: string[];
                /** @description Equality filter for "npcs" */
                "filter[npcs]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Area-relationship-locations-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Area-relationship-locations": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Area-relationship-locations-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Area-related-portals": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "height" */
                "filter[height]"?: number;
                /** @description Less-than filter for "height" */
                "filter[height$lt]"?: number;
                /** @description Less-than or equal filter for "height" */
                "filter[height$lte]"?: number;
                /** @description Greater-than filter for "height" */
                "filter[height$gt]"?: number;
                /** @description Greater-than or equal filter for "height" */
                "filter[height$gte]"?: number;
                /** @description Equality filter for "width" */
                "filter[width]"?: number;
                /** @description Less-than filter for "width" */
                "filter[width$lt]"?: number;
                /** @description Less-than or equal filter for "width" */
                "filter[width$lte]"?: number;
                /** @description Greater-than filter for "width" */
                "filter[width$gt]"?: number;
                /** @description Greater-than or equal filter for "width" */
                "filter[width$gte]"?: number;
                /** @description Equality filter for "locations" */
                "filter[locations]"?: string[];
                /** @description Equality filter for "region" */
                "filter[region]"?: number;
                /** @description Less-than filter for "region" */
                "filter[region$lt]"?: number;
                /** @description Less-than or equal filter for "region" */
                "filter[region$lte]"?: number;
                /** @description Greater-than filter for "region" */
                "filter[region$gt]"?: number;
                /** @description Greater-than or equal filter for "region" */
                "filter[region$gte]"?: number;
                /** @description Equality filter for "originXGlobal" */
                "filter[originXGlobal]"?: number;
                /** @description Less-than filter for "originXGlobal" */
                "filter[originXGlobal$lt]"?: number;
                /** @description Less-than or equal filter for "originXGlobal" */
                "filter[originXGlobal$lte]"?: number;
                /** @description Greater-than filter for "originXGlobal" */
                "filter[originXGlobal$gt]"?: number;
                /** @description Greater-than or equal filter for "originXGlobal" */
                "filter[originXGlobal$gte]"?: number;
                /** @description Equality filter for "originYGlobal" */
                "filter[originYGlobal]"?: number;
                /** @description Less-than filter for "originYGlobal" */
                "filter[originYGlobal$lt]"?: number;
                /** @description Less-than or equal filter for "originYGlobal" */
                "filter[originYGlobal$lte]"?: number;
                /** @description Greater-than filter for "originYGlobal" */
                "filter[originYGlobal$gt]"?: number;
                /** @description Greater-than or equal filter for "originYGlobal" */
                "filter[originYGlobal$gte]"?: number;
                /** @description Equality filter for "portals" */
                "filter[portals]"?: string[];
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "items" */
                "filter[items]"?: string[];
                /** @description Equality filter for "skills" */
                "filter[skills]"?: string[];
                /** @description Equality filter for "npcs" */
                "filter[npcs]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["LocationListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Area-relationship-portals": {
        parameters: {
            query?: {
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "height" */
                "filter[height]"?: number;
                /** @description Less-than filter for "height" */
                "filter[height$lt]"?: number;
                /** @description Less-than or equal filter for "height" */
                "filter[height$lte]"?: number;
                /** @description Greater-than filter for "height" */
                "filter[height$gt]"?: number;
                /** @description Greater-than or equal filter for "height" */
                "filter[height$gte]"?: number;
                /** @description Equality filter for "width" */
                "filter[width]"?: number;
                /** @description Less-than filter for "width" */
                "filter[width$lt]"?: number;
                /** @description Less-than or equal filter for "width" */
                "filter[width$lte]"?: number;
                /** @description Greater-than filter for "width" */
                "filter[width$gt]"?: number;
                /** @description Greater-than or equal filter for "width" */
                "filter[width$gte]"?: number;
                /** @description Equality filter for "locations" */
                "filter[locations]"?: string[];
                /** @description Equality filter for "region" */
                "filter[region]"?: number;
                /** @description Less-than filter for "region" */
                "filter[region$lt]"?: number;
                /** @description Less-than or equal filter for "region" */
                "filter[region$lte]"?: number;
                /** @description Greater-than filter for "region" */
                "filter[region$gt]"?: number;
                /** @description Greater-than or equal filter for "region" */
                "filter[region$gte]"?: number;
                /** @description Equality filter for "originXGlobal" */
                "filter[originXGlobal]"?: number;
                /** @description Less-than filter for "originXGlobal" */
                "filter[originXGlobal$lt]"?: number;
                /** @description Less-than or equal filter for "originXGlobal" */
                "filter[originXGlobal$lte]"?: number;
                /** @description Greater-than filter for "originXGlobal" */
                "filter[originXGlobal$gt]"?: number;
                /** @description Greater-than or equal filter for "originXGlobal" */
                "filter[originXGlobal$gte]"?: number;
                /** @description Equality filter for "originYGlobal" */
                "filter[originYGlobal]"?: number;
                /** @description Less-than filter for "originYGlobal" */
                "filter[originYGlobal$lt]"?: number;
                /** @description Less-than or equal filter for "originYGlobal" */
                "filter[originYGlobal$lte]"?: number;
                /** @description Greater-than filter for "originYGlobal" */
                "filter[originYGlobal$gt]"?: number;
                /** @description Greater-than or equal filter for "originYGlobal" */
                "filter[originYGlobal$gte]"?: number;
                /** @description Equality filter for "portals" */
                "filter[portals]"?: string[];
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "items" */
                "filter[items]"?: string[];
                /** @description Equality filter for "skills" */
                "filter[skills]"?: string[];
                /** @description Equality filter for "npcs" */
                "filter[npcs]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Area-relationship-portals-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Area-relationship-portals": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Area-relationship-portals-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Area-related-items": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "height" */
                "filter[height]"?: number;
                /** @description Less-than filter for "height" */
                "filter[height$lt]"?: number;
                /** @description Less-than or equal filter for "height" */
                "filter[height$lte]"?: number;
                /** @description Greater-than filter for "height" */
                "filter[height$gt]"?: number;
                /** @description Greater-than or equal filter for "height" */
                "filter[height$gte]"?: number;
                /** @description Equality filter for "width" */
                "filter[width]"?: number;
                /** @description Less-than filter for "width" */
                "filter[width$lt]"?: number;
                /** @description Less-than or equal filter for "width" */
                "filter[width$lte]"?: number;
                /** @description Greater-than filter for "width" */
                "filter[width$gt]"?: number;
                /** @description Greater-than or equal filter for "width" */
                "filter[width$gte]"?: number;
                /** @description Equality filter for "locations" */
                "filter[locations]"?: string[];
                /** @description Equality filter for "region" */
                "filter[region]"?: number;
                /** @description Less-than filter for "region" */
                "filter[region$lt]"?: number;
                /** @description Less-than or equal filter for "region" */
                "filter[region$lte]"?: number;
                /** @description Greater-than filter for "region" */
                "filter[region$gt]"?: number;
                /** @description Greater-than or equal filter for "region" */
                "filter[region$gte]"?: number;
                /** @description Equality filter for "originXGlobal" */
                "filter[originXGlobal]"?: number;
                /** @description Less-than filter for "originXGlobal" */
                "filter[originXGlobal$lt]"?: number;
                /** @description Less-than or equal filter for "originXGlobal" */
                "filter[originXGlobal$lte]"?: number;
                /** @description Greater-than filter for "originXGlobal" */
                "filter[originXGlobal$gt]"?: number;
                /** @description Greater-than or equal filter for "originXGlobal" */
                "filter[originXGlobal$gte]"?: number;
                /** @description Equality filter for "originYGlobal" */
                "filter[originYGlobal]"?: number;
                /** @description Less-than filter for "originYGlobal" */
                "filter[originYGlobal$lt]"?: number;
                /** @description Less-than or equal filter for "originYGlobal" */
                "filter[originYGlobal$lte]"?: number;
                /** @description Greater-than filter for "originYGlobal" */
                "filter[originYGlobal$gt]"?: number;
                /** @description Greater-than or equal filter for "originYGlobal" */
                "filter[originYGlobal$gte]"?: number;
                /** @description Equality filter for "portals" */
                "filter[portals]"?: string[];
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "items" */
                "filter[items]"?: string[];
                /** @description Equality filter for "skills" */
                "filter[skills]"?: string[];
                /** @description Equality filter for "npcs" */
                "filter[npcs]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["ItemListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Area-relationship-items": {
        parameters: {
            query?: {
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "height" */
                "filter[height]"?: number;
                /** @description Less-than filter for "height" */
                "filter[height$lt]"?: number;
                /** @description Less-than or equal filter for "height" */
                "filter[height$lte]"?: number;
                /** @description Greater-than filter for "height" */
                "filter[height$gt]"?: number;
                /** @description Greater-than or equal filter for "height" */
                "filter[height$gte]"?: number;
                /** @description Equality filter for "width" */
                "filter[width]"?: number;
                /** @description Less-than filter for "width" */
                "filter[width$lt]"?: number;
                /** @description Less-than or equal filter for "width" */
                "filter[width$lte]"?: number;
                /** @description Greater-than filter for "width" */
                "filter[width$gt]"?: number;
                /** @description Greater-than or equal filter for "width" */
                "filter[width$gte]"?: number;
                /** @description Equality filter for "locations" */
                "filter[locations]"?: string[];
                /** @description Equality filter for "region" */
                "filter[region]"?: number;
                /** @description Less-than filter for "region" */
                "filter[region$lt]"?: number;
                /** @description Less-than or equal filter for "region" */
                "filter[region$lte]"?: number;
                /** @description Greater-than filter for "region" */
                "filter[region$gt]"?: number;
                /** @description Greater-than or equal filter for "region" */
                "filter[region$gte]"?: number;
                /** @description Equality filter for "originXGlobal" */
                "filter[originXGlobal]"?: number;
                /** @description Less-than filter for "originXGlobal" */
                "filter[originXGlobal$lt]"?: number;
                /** @description Less-than or equal filter for "originXGlobal" */
                "filter[originXGlobal$lte]"?: number;
                /** @description Greater-than filter for "originXGlobal" */
                "filter[originXGlobal$gt]"?: number;
                /** @description Greater-than or equal filter for "originXGlobal" */
                "filter[originXGlobal$gte]"?: number;
                /** @description Equality filter for "originYGlobal" */
                "filter[originYGlobal]"?: number;
                /** @description Less-than filter for "originYGlobal" */
                "filter[originYGlobal$lt]"?: number;
                /** @description Less-than or equal filter for "originYGlobal" */
                "filter[originYGlobal$lte]"?: number;
                /** @description Greater-than filter for "originYGlobal" */
                "filter[originYGlobal$gt]"?: number;
                /** @description Greater-than or equal filter for "originYGlobal" */
                "filter[originYGlobal$gte]"?: number;
                /** @description Equality filter for "portals" */
                "filter[portals]"?: string[];
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "items" */
                "filter[items]"?: string[];
                /** @description Equality filter for "skills" */
                "filter[skills]"?: string[];
                /** @description Equality filter for "npcs" */
                "filter[npcs]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Area-relationship-items-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Area-relationship-items": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Area-relationship-items-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Area-related-skills": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "height" */
                "filter[height]"?: number;
                /** @description Less-than filter for "height" */
                "filter[height$lt]"?: number;
                /** @description Less-than or equal filter for "height" */
                "filter[height$lte]"?: number;
                /** @description Greater-than filter for "height" */
                "filter[height$gt]"?: number;
                /** @description Greater-than or equal filter for "height" */
                "filter[height$gte]"?: number;
                /** @description Equality filter for "width" */
                "filter[width]"?: number;
                /** @description Less-than filter for "width" */
                "filter[width$lt]"?: number;
                /** @description Less-than or equal filter for "width" */
                "filter[width$lte]"?: number;
                /** @description Greater-than filter for "width" */
                "filter[width$gt]"?: number;
                /** @description Greater-than or equal filter for "width" */
                "filter[width$gte]"?: number;
                /** @description Equality filter for "locations" */
                "filter[locations]"?: string[];
                /** @description Equality filter for "region" */
                "filter[region]"?: number;
                /** @description Less-than filter for "region" */
                "filter[region$lt]"?: number;
                /** @description Less-than or equal filter for "region" */
                "filter[region$lte]"?: number;
                /** @description Greater-than filter for "region" */
                "filter[region$gt]"?: number;
                /** @description Greater-than or equal filter for "region" */
                "filter[region$gte]"?: number;
                /** @description Equality filter for "originXGlobal" */
                "filter[originXGlobal]"?: number;
                /** @description Less-than filter for "originXGlobal" */
                "filter[originXGlobal$lt]"?: number;
                /** @description Less-than or equal filter for "originXGlobal" */
                "filter[originXGlobal$lte]"?: number;
                /** @description Greater-than filter for "originXGlobal" */
                "filter[originXGlobal$gt]"?: number;
                /** @description Greater-than or equal filter for "originXGlobal" */
                "filter[originXGlobal$gte]"?: number;
                /** @description Equality filter for "originYGlobal" */
                "filter[originYGlobal]"?: number;
                /** @description Less-than filter for "originYGlobal" */
                "filter[originYGlobal$lt]"?: number;
                /** @description Less-than or equal filter for "originYGlobal" */
                "filter[originYGlobal$lte]"?: number;
                /** @description Greater-than filter for "originYGlobal" */
                "filter[originYGlobal$gt]"?: number;
                /** @description Greater-than or equal filter for "originYGlobal" */
                "filter[originYGlobal$gte]"?: number;
                /** @description Equality filter for "portals" */
                "filter[portals]"?: string[];
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "items" */
                "filter[items]"?: string[];
                /** @description Equality filter for "skills" */
                "filter[skills]"?: string[];
                /** @description Equality filter for "npcs" */
                "filter[npcs]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["SkillListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Area-relationship-skills": {
        parameters: {
            query?: {
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "height" */
                "filter[height]"?: number;
                /** @description Less-than filter for "height" */
                "filter[height$lt]"?: number;
                /** @description Less-than or equal filter for "height" */
                "filter[height$lte]"?: number;
                /** @description Greater-than filter for "height" */
                "filter[height$gt]"?: number;
                /** @description Greater-than or equal filter for "height" */
                "filter[height$gte]"?: number;
                /** @description Equality filter for "width" */
                "filter[width]"?: number;
                /** @description Less-than filter for "width" */
                "filter[width$lt]"?: number;
                /** @description Less-than or equal filter for "width" */
                "filter[width$lte]"?: number;
                /** @description Greater-than filter for "width" */
                "filter[width$gt]"?: number;
                /** @description Greater-than or equal filter for "width" */
                "filter[width$gte]"?: number;
                /** @description Equality filter for "locations" */
                "filter[locations]"?: string[];
                /** @description Equality filter for "region" */
                "filter[region]"?: number;
                /** @description Less-than filter for "region" */
                "filter[region$lt]"?: number;
                /** @description Less-than or equal filter for "region" */
                "filter[region$lte]"?: number;
                /** @description Greater-than filter for "region" */
                "filter[region$gt]"?: number;
                /** @description Greater-than or equal filter for "region" */
                "filter[region$gte]"?: number;
                /** @description Equality filter for "originXGlobal" */
                "filter[originXGlobal]"?: number;
                /** @description Less-than filter for "originXGlobal" */
                "filter[originXGlobal$lt]"?: number;
                /** @description Less-than or equal filter for "originXGlobal" */
                "filter[originXGlobal$lte]"?: number;
                /** @description Greater-than filter for "originXGlobal" */
                "filter[originXGlobal$gt]"?: number;
                /** @description Greater-than or equal filter for "originXGlobal" */
                "filter[originXGlobal$gte]"?: number;
                /** @description Equality filter for "originYGlobal" */
                "filter[originYGlobal]"?: number;
                /** @description Less-than filter for "originYGlobal" */
                "filter[originYGlobal$lt]"?: number;
                /** @description Less-than or equal filter for "originYGlobal" */
                "filter[originYGlobal$lte]"?: number;
                /** @description Greater-than filter for "originYGlobal" */
                "filter[originYGlobal$gt]"?: number;
                /** @description Greater-than or equal filter for "originYGlobal" */
                "filter[originYGlobal$gte]"?: number;
                /** @description Equality filter for "portals" */
                "filter[portals]"?: string[];
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "items" */
                "filter[items]"?: string[];
                /** @description Equality filter for "skills" */
                "filter[skills]"?: string[];
                /** @description Equality filter for "npcs" */
                "filter[npcs]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Area-relationship-skills-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Area-relationship-skills": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Area-relationship-skills-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Area-related-npcs": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "height" */
                "filter[height]"?: number;
                /** @description Less-than filter for "height" */
                "filter[height$lt]"?: number;
                /** @description Less-than or equal filter for "height" */
                "filter[height$lte]"?: number;
                /** @description Greater-than filter for "height" */
                "filter[height$gt]"?: number;
                /** @description Greater-than or equal filter for "height" */
                "filter[height$gte]"?: number;
                /** @description Equality filter for "width" */
                "filter[width]"?: number;
                /** @description Less-than filter for "width" */
                "filter[width$lt]"?: number;
                /** @description Less-than or equal filter for "width" */
                "filter[width$lte]"?: number;
                /** @description Greater-than filter for "width" */
                "filter[width$gt]"?: number;
                /** @description Greater-than or equal filter for "width" */
                "filter[width$gte]"?: number;
                /** @description Equality filter for "locations" */
                "filter[locations]"?: string[];
                /** @description Equality filter for "region" */
                "filter[region]"?: number;
                /** @description Less-than filter for "region" */
                "filter[region$lt]"?: number;
                /** @description Less-than or equal filter for "region" */
                "filter[region$lte]"?: number;
                /** @description Greater-than filter for "region" */
                "filter[region$gt]"?: number;
                /** @description Greater-than or equal filter for "region" */
                "filter[region$gte]"?: number;
                /** @description Equality filter for "originXGlobal" */
                "filter[originXGlobal]"?: number;
                /** @description Less-than filter for "originXGlobal" */
                "filter[originXGlobal$lt]"?: number;
                /** @description Less-than or equal filter for "originXGlobal" */
                "filter[originXGlobal$lte]"?: number;
                /** @description Greater-than filter for "originXGlobal" */
                "filter[originXGlobal$gt]"?: number;
                /** @description Greater-than or equal filter for "originXGlobal" */
                "filter[originXGlobal$gte]"?: number;
                /** @description Equality filter for "originYGlobal" */
                "filter[originYGlobal]"?: number;
                /** @description Less-than filter for "originYGlobal" */
                "filter[originYGlobal$lt]"?: number;
                /** @description Less-than or equal filter for "originYGlobal" */
                "filter[originYGlobal$lte]"?: number;
                /** @description Greater-than filter for "originYGlobal" */
                "filter[originYGlobal$gt]"?: number;
                /** @description Greater-than or equal filter for "originYGlobal" */
                "filter[originYGlobal$gte]"?: number;
                /** @description Equality filter for "portals" */
                "filter[portals]"?: string[];
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "items" */
                "filter[items]"?: string[];
                /** @description Equality filter for "skills" */
                "filter[skills]"?: string[];
                /** @description Equality filter for "npcs" */
                "filter[npcs]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["NpcListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Area-relationship-npcs": {
        parameters: {
            query?: {
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "height" */
                "filter[height]"?: number;
                /** @description Less-than filter for "height" */
                "filter[height$lt]"?: number;
                /** @description Less-than or equal filter for "height" */
                "filter[height$lte]"?: number;
                /** @description Greater-than filter for "height" */
                "filter[height$gt]"?: number;
                /** @description Greater-than or equal filter for "height" */
                "filter[height$gte]"?: number;
                /** @description Equality filter for "width" */
                "filter[width]"?: number;
                /** @description Less-than filter for "width" */
                "filter[width$lt]"?: number;
                /** @description Less-than or equal filter for "width" */
                "filter[width$lte]"?: number;
                /** @description Greater-than filter for "width" */
                "filter[width$gt]"?: number;
                /** @description Greater-than or equal filter for "width" */
                "filter[width$gte]"?: number;
                /** @description Equality filter for "locations" */
                "filter[locations]"?: string[];
                /** @description Equality filter for "region" */
                "filter[region]"?: number;
                /** @description Less-than filter for "region" */
                "filter[region$lt]"?: number;
                /** @description Less-than or equal filter for "region" */
                "filter[region$lte]"?: number;
                /** @description Greater-than filter for "region" */
                "filter[region$gt]"?: number;
                /** @description Greater-than or equal filter for "region" */
                "filter[region$gte]"?: number;
                /** @description Equality filter for "originXGlobal" */
                "filter[originXGlobal]"?: number;
                /** @description Less-than filter for "originXGlobal" */
                "filter[originXGlobal$lt]"?: number;
                /** @description Less-than or equal filter for "originXGlobal" */
                "filter[originXGlobal$lte]"?: number;
                /** @description Greater-than filter for "originXGlobal" */
                "filter[originXGlobal$gt]"?: number;
                /** @description Greater-than or equal filter for "originXGlobal" */
                "filter[originXGlobal$gte]"?: number;
                /** @description Equality filter for "originYGlobal" */
                "filter[originYGlobal]"?: number;
                /** @description Less-than filter for "originYGlobal" */
                "filter[originYGlobal$lt]"?: number;
                /** @description Less-than or equal filter for "originYGlobal" */
                "filter[originYGlobal$lte]"?: number;
                /** @description Greater-than filter for "originYGlobal" */
                "filter[originYGlobal$gt]"?: number;
                /** @description Greater-than or equal filter for "originYGlobal" */
                "filter[originYGlobal$gte]"?: number;
                /** @description Equality filter for "portals" */
                "filter[portals]"?: string[];
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "items" */
                "filter[items]"?: string[];
                /** @description Equality filter for "skills" */
                "filter[skills]"?: string[];
                /** @description Equality filter for "npcs" */
                "filter[npcs]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Area-relationship-npcs-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Area-relationship-npcs": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Area-relationship-npcs-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "list-Skill": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "rank" */
                "filter[rank]"?: number;
                /** @description Less-than filter for "rank" */
                "filter[rank$lt]"?: number;
                /** @description Less-than or equal filter for "rank" */
                "filter[rank$lte]"?: number;
                /** @description Greater-than filter for "rank" */
                "filter[rank$gt]"?: number;
                /** @description Greater-than or equal filter for "rank" */
                "filter[rank$gte]"?: number;
                /** @description Equality filter for "desc" */
                "filter[desc]"?: string;
                /** @description String contains filter for "desc" */
                "filter[desc$contains]"?: string;
                /** @description String case-insensitive contains filter for "desc" */
                "filter[desc$icontains]"?: string;
                /** @description String full-text search filter for "desc" */
                "filter[desc$search]"?: string;
                /** @description String startsWith filter for "desc" */
                "filter[desc$startsWith]"?: string;
                /** @description String endsWith filter for "desc" */
                "filter[desc$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "type" */
                "filter[type]"?: components["schemas"]["SkillType"];
                /** @description Equality filter for "levelReq" */
                "filter[levelReq]"?: number;
                /** @description Less-than filter for "levelReq" */
                "filter[levelReq$lt]"?: number;
                /** @description Less-than or equal filter for "levelReq" */
                "filter[levelReq$lte]"?: number;
                /** @description Greater-than filter for "levelReq" */
                "filter[levelReq$gt]"?: number;
                /** @description Greater-than or equal filter for "levelReq" */
                "filter[levelReq$gte]"?: number;
                /** @description Equality filter for "reqStr" */
                "filter[reqStr]"?: number;
                /** @description Less-than filter for "reqStr" */
                "filter[reqStr$lt]"?: number;
                /** @description Less-than or equal filter for "reqStr" */
                "filter[reqStr$lte]"?: number;
                /** @description Greater-than filter for "reqStr" */
                "filter[reqStr$gt]"?: number;
                /** @description Greater-than or equal filter for "reqStr" */
                "filter[reqStr$gte]"?: number;
                /** @description Equality filter for "reqSta" */
                "filter[reqSta]"?: number;
                /** @description Less-than filter for "reqSta" */
                "filter[reqSta$lt]"?: number;
                /** @description Less-than or equal filter for "reqSta" */
                "filter[reqSta$lte]"?: number;
                /** @description Greater-than filter for "reqSta" */
                "filter[reqSta$gt]"?: number;
                /** @description Greater-than or equal filter for "reqSta" */
                "filter[reqSta$gte]"?: number;
                /** @description Equality filter for "reqAgi" */
                "filter[reqAgi]"?: number;
                /** @description Less-than filter for "reqAgi" */
                "filter[reqAgi$lt]"?: number;
                /** @description Less-than or equal filter for "reqAgi" */
                "filter[reqAgi$lte]"?: number;
                /** @description Greater-than filter for "reqAgi" */
                "filter[reqAgi$gt]"?: number;
                /** @description Greater-than or equal filter for "reqAgi" */
                "filter[reqAgi$gte]"?: number;
                /** @description Equality filter for "reqInt" */
                "filter[reqInt]"?: number;
                /** @description Less-than filter for "reqInt" */
                "filter[reqInt$lt]"?: number;
                /** @description Less-than or equal filter for "reqInt" */
                "filter[reqInt$lte]"?: number;
                /** @description Greater-than filter for "reqInt" */
                "filter[reqInt$gt]"?: number;
                /** @description Greater-than or equal filter for "reqInt" */
                "filter[reqInt$gte]"?: number;
                /** @description Equality filter for "range" */
                "filter[range]"?: number;
                /** @description Less-than filter for "range" */
                "filter[range$lt]"?: number;
                /** @description Less-than or equal filter for "range" */
                "filter[range$lte]"?: number;
                /** @description Greater-than filter for "range" */
                "filter[range$gt]"?: number;
                /** @description Greater-than or equal filter for "range" */
                "filter[range$gte]"?: number;
                /** @description Equality filter for "atkPower" */
                "filter[atkPower]"?: number;
                /** @description Less-than filter for "atkPower" */
                "filter[atkPower$lt]"?: number;
                /** @description Less-than or equal filter for "atkPower" */
                "filter[atkPower$lte]"?: number;
                /** @description Greater-than filter for "atkPower" */
                "filter[atkPower$gt]"?: number;
                /** @description Greater-than or equal filter for "atkPower" */
                "filter[atkPower$gte]"?: number;
                /** @description Equality filter for "str" */
                "filter[str]"?: number;
                /** @description Less-than filter for "str" */
                "filter[str$lt]"?: number;
                /** @description Less-than or equal filter for "str" */
                "filter[str$lte]"?: number;
                /** @description Greater-than filter for "str" */
                "filter[str$gt]"?: number;
                /** @description Greater-than or equal filter for "str" */
                "filter[str$gte]"?: number;
                /** @description Equality filter for "sta" */
                "filter[sta]"?: number;
                /** @description Less-than filter for "sta" */
                "filter[sta$lt]"?: number;
                /** @description Less-than or equal filter for "sta" */
                "filter[sta$lte]"?: number;
                /** @description Greater-than filter for "sta" */
                "filter[sta$gt]"?: number;
                /** @description Greater-than or equal filter for "sta" */
                "filter[sta$gte]"?: number;
                /** @description Equality filter for "agi" */
                "filter[agi]"?: number;
                /** @description Less-than filter for "agi" */
                "filter[agi$lt]"?: number;
                /** @description Less-than or equal filter for "agi" */
                "filter[agi$lte]"?: number;
                /** @description Greater-than filter for "agi" */
                "filter[agi$gt]"?: number;
                /** @description Greater-than or equal filter for "agi" */
                "filter[agi$gte]"?: number;
                /** @description Equality filter for "int" */
                "filter[int]"?: number;
                /** @description Less-than filter for "int" */
                "filter[int$lt]"?: number;
                /** @description Less-than or equal filter for "int" */
                "filter[int$lte]"?: number;
                /** @description Greater-than filter for "int" */
                "filter[int$gt]"?: number;
                /** @description Greater-than or equal filter for "int" */
                "filter[int$gte]"?: number;
                /** @description Equality filter for "armor" */
                "filter[armor]"?: number;
                /** @description Less-than filter for "armor" */
                "filter[armor$lt]"?: number;
                /** @description Less-than or equal filter for "armor" */
                "filter[armor$lte]"?: number;
                /** @description Greater-than filter for "armor" */
                "filter[armor$gt]"?: number;
                /** @description Greater-than or equal filter for "armor" */
                "filter[armor$gte]"?: number;
                /** @description Equality filter for "crit" */
                "filter[crit]"?: number;
                /** @description Less-than filter for "crit" */
                "filter[crit$lt]"?: number;
                /** @description Less-than or equal filter for "crit" */
                "filter[crit$lte]"?: number;
                /** @description Greater-than filter for "crit" */
                "filter[crit$gt]"?: number;
                /** @description Greater-than or equal filter for "crit" */
                "filter[crit$gte]"?: number;
                /** @description Equality filter for "dodge" */
                "filter[dodge]"?: number;
                /** @description Less-than filter for "dodge" */
                "filter[dodge$lt]"?: number;
                /** @description Less-than or equal filter for "dodge" */
                "filter[dodge$lte]"?: number;
                /** @description Greater-than filter for "dodge" */
                "filter[dodge$gt]"?: number;
                /** @description Greater-than or equal filter for "dodge" */
                "filter[dodge$gte]"?: number;
                /** @description Equality filter for "health" */
                "filter[health]"?: number;
                /** @description Less-than filter for "health" */
                "filter[health$lt]"?: number;
                /** @description Less-than or equal filter for "health" */
                "filter[health$lte]"?: number;
                /** @description Greater-than filter for "health" */
                "filter[health$gt]"?: number;
                /** @description Greater-than or equal filter for "health" */
                "filter[health$gte]"?: number;
                /** @description Equality filter for "energy" */
                "filter[energy]"?: number;
                /** @description Less-than filter for "energy" */
                "filter[energy$lt]"?: number;
                /** @description Less-than or equal filter for "energy" */
                "filter[energy$lte]"?: number;
                /** @description Greater-than filter for "energy" */
                "filter[energy$gt]"?: number;
                /** @description Greater-than or equal filter for "energy" */
                "filter[energy$gte]"?: number;
                /** @description Equality filter for "atkSpeed" */
                "filter[atkSpeed]"?: number;
                /** @description Less-than filter for "atkSpeed" */
                "filter[atkSpeed$lt]"?: number;
                /** @description Less-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$lte]"?: number;
                /** @description Greater-than filter for "atkSpeed" */
                "filter[atkSpeed$gt]"?: number;
                /** @description Greater-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$gte]"?: number;
                /** @description Equality filter for "minValue" */
                "filter[minValue]"?: number;
                /** @description Less-than filter for "minValue" */
                "filter[minValue$lt]"?: number;
                /** @description Less-than or equal filter for "minValue" */
                "filter[minValue$lte]"?: number;
                /** @description Greater-than filter for "minValue" */
                "filter[minValue$gt]"?: number;
                /** @description Greater-than or equal filter for "minValue" */
                "filter[minValue$gte]"?: number;
                /** @description Equality filter for "maxValue" */
                "filter[maxValue]"?: number;
                /** @description Less-than filter for "maxValue" */
                "filter[maxValue$lt]"?: number;
                /** @description Less-than or equal filter for "maxValue" */
                "filter[maxValue$lte]"?: number;
                /** @description Greater-than filter for "maxValue" */
                "filter[maxValue$gt]"?: number;
                /** @description Greater-than or equal filter for "maxValue" */
                "filter[maxValue$gte]"?: number;
                /** @description Equality filter for "value" */
                "filter[value]"?: number;
                /** @description Less-than filter for "value" */
                "filter[value$lt]"?: number;
                /** @description Less-than or equal filter for "value" */
                "filter[value$lte]"?: number;
                /** @description Greater-than filter for "value" */
                "filter[value$gt]"?: number;
                /** @description Greater-than or equal filter for "value" */
                "filter[value$gte]"?: number;
                /** @description Equality filter for "castCooldownTimeSec" */
                "filter[castCooldownTimeSec]"?: number;
                /** @description Less-than filter for "castCooldownTimeSec" */
                "filter[castCooldownTimeSec$lt]"?: number;
                /** @description Less-than or equal filter for "castCooldownTimeSec" */
                "filter[castCooldownTimeSec$lte]"?: number;
                /** @description Greater-than filter for "castCooldownTimeSec" */
                "filter[castCooldownTimeSec$gt]"?: number;
                /** @description Greater-than or equal filter for "castCooldownTimeSec" */
                "filter[castCooldownTimeSec$gte]"?: number;
                /** @description Equality filter for "castTimeSec" */
                "filter[castTimeSec]"?: number;
                /** @description Less-than filter for "castTimeSec" */
                "filter[castTimeSec$lt]"?: number;
                /** @description Less-than or equal filter for "castTimeSec" */
                "filter[castTimeSec$lte]"?: number;
                /** @description Greater-than filter for "castTimeSec" */
                "filter[castTimeSec$gt]"?: number;
                /** @description Greater-than or equal filter for "castTimeSec" */
                "filter[castTimeSec$gte]"?: number;
                /** @description Equality filter for "durationMins" */
                "filter[durationMins]"?: number;
                /** @description Less-than filter for "durationMins" */
                "filter[durationMins$lt]"?: number;
                /** @description Less-than or equal filter for "durationMins" */
                "filter[durationMins$lte]"?: number;
                /** @description Greater-than filter for "durationMins" */
                "filter[durationMins$gt]"?: number;
                /** @description Greater-than or equal filter for "durationMins" */
                "filter[durationMins$gte]"?: number;
                /** @description Equality filter for "energyCost" */
                "filter[energyCost]"?: number;
                /** @description Less-than filter for "energyCost" */
                "filter[energyCost$lt]"?: number;
                /** @description Less-than or equal filter for "energyCost" */
                "filter[energyCost$lte]"?: number;
                /** @description Greater-than filter for "energyCost" */
                "filter[energyCost$gt]"?: number;
                /** @description Greater-than or equal filter for "energyCost" */
                "filter[energyCost$gte]"?: number;
                /** @description Equality filter for "tickDurationSec" */
                "filter[tickDurationSec]"?: number;
                /** @description Less-than filter for "tickDurationSec" */
                "filter[tickDurationSec$lt]"?: number;
                /** @description Less-than or equal filter for "tickDurationSec" */
                "filter[tickDurationSec$lte]"?: number;
                /** @description Greater-than filter for "tickDurationSec" */
                "filter[tickDurationSec$gt]"?: number;
                /** @description Greater-than or equal filter for "tickDurationSec" */
                "filter[tickDurationSec$gte]"?: number;
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "area" */
                "filter[area]"?: string;
                /** @description Equality filter for "items" */
                "filter[items]"?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["SkillListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Skill": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["SkillCreateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["SkillResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Skill": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["SkillResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Skill-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["SkillUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["SkillResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "delete-Skill": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Skill-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["SkillUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["SkillResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Skill-related-area": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["AreaResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Skill-relationship-area": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Skill-relationship-area-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Skill-relationship-area-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Skill-related-items": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "rank" */
                "filter[rank]"?: number;
                /** @description Less-than filter for "rank" */
                "filter[rank$lt]"?: number;
                /** @description Less-than or equal filter for "rank" */
                "filter[rank$lte]"?: number;
                /** @description Greater-than filter for "rank" */
                "filter[rank$gt]"?: number;
                /** @description Greater-than or equal filter for "rank" */
                "filter[rank$gte]"?: number;
                /** @description Equality filter for "desc" */
                "filter[desc]"?: string;
                /** @description String contains filter for "desc" */
                "filter[desc$contains]"?: string;
                /** @description String case-insensitive contains filter for "desc" */
                "filter[desc$icontains]"?: string;
                /** @description String full-text search filter for "desc" */
                "filter[desc$search]"?: string;
                /** @description String startsWith filter for "desc" */
                "filter[desc$startsWith]"?: string;
                /** @description String endsWith filter for "desc" */
                "filter[desc$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "type" */
                "filter[type]"?: components["schemas"]["SkillType"];
                /** @description Equality filter for "levelReq" */
                "filter[levelReq]"?: number;
                /** @description Less-than filter for "levelReq" */
                "filter[levelReq$lt]"?: number;
                /** @description Less-than or equal filter for "levelReq" */
                "filter[levelReq$lte]"?: number;
                /** @description Greater-than filter for "levelReq" */
                "filter[levelReq$gt]"?: number;
                /** @description Greater-than or equal filter for "levelReq" */
                "filter[levelReq$gte]"?: number;
                /** @description Equality filter for "reqStr" */
                "filter[reqStr]"?: number;
                /** @description Less-than filter for "reqStr" */
                "filter[reqStr$lt]"?: number;
                /** @description Less-than or equal filter for "reqStr" */
                "filter[reqStr$lte]"?: number;
                /** @description Greater-than filter for "reqStr" */
                "filter[reqStr$gt]"?: number;
                /** @description Greater-than or equal filter for "reqStr" */
                "filter[reqStr$gte]"?: number;
                /** @description Equality filter for "reqSta" */
                "filter[reqSta]"?: number;
                /** @description Less-than filter for "reqSta" */
                "filter[reqSta$lt]"?: number;
                /** @description Less-than or equal filter for "reqSta" */
                "filter[reqSta$lte]"?: number;
                /** @description Greater-than filter for "reqSta" */
                "filter[reqSta$gt]"?: number;
                /** @description Greater-than or equal filter for "reqSta" */
                "filter[reqSta$gte]"?: number;
                /** @description Equality filter for "reqAgi" */
                "filter[reqAgi]"?: number;
                /** @description Less-than filter for "reqAgi" */
                "filter[reqAgi$lt]"?: number;
                /** @description Less-than or equal filter for "reqAgi" */
                "filter[reqAgi$lte]"?: number;
                /** @description Greater-than filter for "reqAgi" */
                "filter[reqAgi$gt]"?: number;
                /** @description Greater-than or equal filter for "reqAgi" */
                "filter[reqAgi$gte]"?: number;
                /** @description Equality filter for "reqInt" */
                "filter[reqInt]"?: number;
                /** @description Less-than filter for "reqInt" */
                "filter[reqInt$lt]"?: number;
                /** @description Less-than or equal filter for "reqInt" */
                "filter[reqInt$lte]"?: number;
                /** @description Greater-than filter for "reqInt" */
                "filter[reqInt$gt]"?: number;
                /** @description Greater-than or equal filter for "reqInt" */
                "filter[reqInt$gte]"?: number;
                /** @description Equality filter for "range" */
                "filter[range]"?: number;
                /** @description Less-than filter for "range" */
                "filter[range$lt]"?: number;
                /** @description Less-than or equal filter for "range" */
                "filter[range$lte]"?: number;
                /** @description Greater-than filter for "range" */
                "filter[range$gt]"?: number;
                /** @description Greater-than or equal filter for "range" */
                "filter[range$gte]"?: number;
                /** @description Equality filter for "atkPower" */
                "filter[atkPower]"?: number;
                /** @description Less-than filter for "atkPower" */
                "filter[atkPower$lt]"?: number;
                /** @description Less-than or equal filter for "atkPower" */
                "filter[atkPower$lte]"?: number;
                /** @description Greater-than filter for "atkPower" */
                "filter[atkPower$gt]"?: number;
                /** @description Greater-than or equal filter for "atkPower" */
                "filter[atkPower$gte]"?: number;
                /** @description Equality filter for "str" */
                "filter[str]"?: number;
                /** @description Less-than filter for "str" */
                "filter[str$lt]"?: number;
                /** @description Less-than or equal filter for "str" */
                "filter[str$lte]"?: number;
                /** @description Greater-than filter for "str" */
                "filter[str$gt]"?: number;
                /** @description Greater-than or equal filter for "str" */
                "filter[str$gte]"?: number;
                /** @description Equality filter for "sta" */
                "filter[sta]"?: number;
                /** @description Less-than filter for "sta" */
                "filter[sta$lt]"?: number;
                /** @description Less-than or equal filter for "sta" */
                "filter[sta$lte]"?: number;
                /** @description Greater-than filter for "sta" */
                "filter[sta$gt]"?: number;
                /** @description Greater-than or equal filter for "sta" */
                "filter[sta$gte]"?: number;
                /** @description Equality filter for "agi" */
                "filter[agi]"?: number;
                /** @description Less-than filter for "agi" */
                "filter[agi$lt]"?: number;
                /** @description Less-than or equal filter for "agi" */
                "filter[agi$lte]"?: number;
                /** @description Greater-than filter for "agi" */
                "filter[agi$gt]"?: number;
                /** @description Greater-than or equal filter for "agi" */
                "filter[agi$gte]"?: number;
                /** @description Equality filter for "int" */
                "filter[int]"?: number;
                /** @description Less-than filter for "int" */
                "filter[int$lt]"?: number;
                /** @description Less-than or equal filter for "int" */
                "filter[int$lte]"?: number;
                /** @description Greater-than filter for "int" */
                "filter[int$gt]"?: number;
                /** @description Greater-than or equal filter for "int" */
                "filter[int$gte]"?: number;
                /** @description Equality filter for "armor" */
                "filter[armor]"?: number;
                /** @description Less-than filter for "armor" */
                "filter[armor$lt]"?: number;
                /** @description Less-than or equal filter for "armor" */
                "filter[armor$lte]"?: number;
                /** @description Greater-than filter for "armor" */
                "filter[armor$gt]"?: number;
                /** @description Greater-than or equal filter for "armor" */
                "filter[armor$gte]"?: number;
                /** @description Equality filter for "crit" */
                "filter[crit]"?: number;
                /** @description Less-than filter for "crit" */
                "filter[crit$lt]"?: number;
                /** @description Less-than or equal filter for "crit" */
                "filter[crit$lte]"?: number;
                /** @description Greater-than filter for "crit" */
                "filter[crit$gt]"?: number;
                /** @description Greater-than or equal filter for "crit" */
                "filter[crit$gte]"?: number;
                /** @description Equality filter for "dodge" */
                "filter[dodge]"?: number;
                /** @description Less-than filter for "dodge" */
                "filter[dodge$lt]"?: number;
                /** @description Less-than or equal filter for "dodge" */
                "filter[dodge$lte]"?: number;
                /** @description Greater-than filter for "dodge" */
                "filter[dodge$gt]"?: number;
                /** @description Greater-than or equal filter for "dodge" */
                "filter[dodge$gte]"?: number;
                /** @description Equality filter for "health" */
                "filter[health]"?: number;
                /** @description Less-than filter for "health" */
                "filter[health$lt]"?: number;
                /** @description Less-than or equal filter for "health" */
                "filter[health$lte]"?: number;
                /** @description Greater-than filter for "health" */
                "filter[health$gt]"?: number;
                /** @description Greater-than or equal filter for "health" */
                "filter[health$gte]"?: number;
                /** @description Equality filter for "energy" */
                "filter[energy]"?: number;
                /** @description Less-than filter for "energy" */
                "filter[energy$lt]"?: number;
                /** @description Less-than or equal filter for "energy" */
                "filter[energy$lte]"?: number;
                /** @description Greater-than filter for "energy" */
                "filter[energy$gt]"?: number;
                /** @description Greater-than or equal filter for "energy" */
                "filter[energy$gte]"?: number;
                /** @description Equality filter for "atkSpeed" */
                "filter[atkSpeed]"?: number;
                /** @description Less-than filter for "atkSpeed" */
                "filter[atkSpeed$lt]"?: number;
                /** @description Less-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$lte]"?: number;
                /** @description Greater-than filter for "atkSpeed" */
                "filter[atkSpeed$gt]"?: number;
                /** @description Greater-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$gte]"?: number;
                /** @description Equality filter for "minValue" */
                "filter[minValue]"?: number;
                /** @description Less-than filter for "minValue" */
                "filter[minValue$lt]"?: number;
                /** @description Less-than or equal filter for "minValue" */
                "filter[minValue$lte]"?: number;
                /** @description Greater-than filter for "minValue" */
                "filter[minValue$gt]"?: number;
                /** @description Greater-than or equal filter for "minValue" */
                "filter[minValue$gte]"?: number;
                /** @description Equality filter for "maxValue" */
                "filter[maxValue]"?: number;
                /** @description Less-than filter for "maxValue" */
                "filter[maxValue$lt]"?: number;
                /** @description Less-than or equal filter for "maxValue" */
                "filter[maxValue$lte]"?: number;
                /** @description Greater-than filter for "maxValue" */
                "filter[maxValue$gt]"?: number;
                /** @description Greater-than or equal filter for "maxValue" */
                "filter[maxValue$gte]"?: number;
                /** @description Equality filter for "value" */
                "filter[value]"?: number;
                /** @description Less-than filter for "value" */
                "filter[value$lt]"?: number;
                /** @description Less-than or equal filter for "value" */
                "filter[value$lte]"?: number;
                /** @description Greater-than filter for "value" */
                "filter[value$gt]"?: number;
                /** @description Greater-than or equal filter for "value" */
                "filter[value$gte]"?: number;
                /** @description Equality filter for "castCooldownTimeSec" */
                "filter[castCooldownTimeSec]"?: number;
                /** @description Less-than filter for "castCooldownTimeSec" */
                "filter[castCooldownTimeSec$lt]"?: number;
                /** @description Less-than or equal filter for "castCooldownTimeSec" */
                "filter[castCooldownTimeSec$lte]"?: number;
                /** @description Greater-than filter for "castCooldownTimeSec" */
                "filter[castCooldownTimeSec$gt]"?: number;
                /** @description Greater-than or equal filter for "castCooldownTimeSec" */
                "filter[castCooldownTimeSec$gte]"?: number;
                /** @description Equality filter for "castTimeSec" */
                "filter[castTimeSec]"?: number;
                /** @description Less-than filter for "castTimeSec" */
                "filter[castTimeSec$lt]"?: number;
                /** @description Less-than or equal filter for "castTimeSec" */
                "filter[castTimeSec$lte]"?: number;
                /** @description Greater-than filter for "castTimeSec" */
                "filter[castTimeSec$gt]"?: number;
                /** @description Greater-than or equal filter for "castTimeSec" */
                "filter[castTimeSec$gte]"?: number;
                /** @description Equality filter for "durationMins" */
                "filter[durationMins]"?: number;
                /** @description Less-than filter for "durationMins" */
                "filter[durationMins$lt]"?: number;
                /** @description Less-than or equal filter for "durationMins" */
                "filter[durationMins$lte]"?: number;
                /** @description Greater-than filter for "durationMins" */
                "filter[durationMins$gt]"?: number;
                /** @description Greater-than or equal filter for "durationMins" */
                "filter[durationMins$gte]"?: number;
                /** @description Equality filter for "energyCost" */
                "filter[energyCost]"?: number;
                /** @description Less-than filter for "energyCost" */
                "filter[energyCost$lt]"?: number;
                /** @description Less-than or equal filter for "energyCost" */
                "filter[energyCost$lte]"?: number;
                /** @description Greater-than filter for "energyCost" */
                "filter[energyCost$gt]"?: number;
                /** @description Greater-than or equal filter for "energyCost" */
                "filter[energyCost$gte]"?: number;
                /** @description Equality filter for "tickDurationSec" */
                "filter[tickDurationSec]"?: number;
                /** @description Less-than filter for "tickDurationSec" */
                "filter[tickDurationSec$lt]"?: number;
                /** @description Less-than or equal filter for "tickDurationSec" */
                "filter[tickDurationSec$lte]"?: number;
                /** @description Greater-than filter for "tickDurationSec" */
                "filter[tickDurationSec$gt]"?: number;
                /** @description Greater-than or equal filter for "tickDurationSec" */
                "filter[tickDurationSec$gte]"?: number;
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "area" */
                "filter[area]"?: string;
                /** @description Equality filter for "items" */
                "filter[items]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["ItemListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Skill-relationship-items": {
        parameters: {
            query?: {
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "rank" */
                "filter[rank]"?: number;
                /** @description Less-than filter for "rank" */
                "filter[rank$lt]"?: number;
                /** @description Less-than or equal filter for "rank" */
                "filter[rank$lte]"?: number;
                /** @description Greater-than filter for "rank" */
                "filter[rank$gt]"?: number;
                /** @description Greater-than or equal filter for "rank" */
                "filter[rank$gte]"?: number;
                /** @description Equality filter for "desc" */
                "filter[desc]"?: string;
                /** @description String contains filter for "desc" */
                "filter[desc$contains]"?: string;
                /** @description String case-insensitive contains filter for "desc" */
                "filter[desc$icontains]"?: string;
                /** @description String full-text search filter for "desc" */
                "filter[desc$search]"?: string;
                /** @description String startsWith filter for "desc" */
                "filter[desc$startsWith]"?: string;
                /** @description String endsWith filter for "desc" */
                "filter[desc$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "type" */
                "filter[type]"?: components["schemas"]["SkillType"];
                /** @description Equality filter for "levelReq" */
                "filter[levelReq]"?: number;
                /** @description Less-than filter for "levelReq" */
                "filter[levelReq$lt]"?: number;
                /** @description Less-than or equal filter for "levelReq" */
                "filter[levelReq$lte]"?: number;
                /** @description Greater-than filter for "levelReq" */
                "filter[levelReq$gt]"?: number;
                /** @description Greater-than or equal filter for "levelReq" */
                "filter[levelReq$gte]"?: number;
                /** @description Equality filter for "reqStr" */
                "filter[reqStr]"?: number;
                /** @description Less-than filter for "reqStr" */
                "filter[reqStr$lt]"?: number;
                /** @description Less-than or equal filter for "reqStr" */
                "filter[reqStr$lte]"?: number;
                /** @description Greater-than filter for "reqStr" */
                "filter[reqStr$gt]"?: number;
                /** @description Greater-than or equal filter for "reqStr" */
                "filter[reqStr$gte]"?: number;
                /** @description Equality filter for "reqSta" */
                "filter[reqSta]"?: number;
                /** @description Less-than filter for "reqSta" */
                "filter[reqSta$lt]"?: number;
                /** @description Less-than or equal filter for "reqSta" */
                "filter[reqSta$lte]"?: number;
                /** @description Greater-than filter for "reqSta" */
                "filter[reqSta$gt]"?: number;
                /** @description Greater-than or equal filter for "reqSta" */
                "filter[reqSta$gte]"?: number;
                /** @description Equality filter for "reqAgi" */
                "filter[reqAgi]"?: number;
                /** @description Less-than filter for "reqAgi" */
                "filter[reqAgi$lt]"?: number;
                /** @description Less-than or equal filter for "reqAgi" */
                "filter[reqAgi$lte]"?: number;
                /** @description Greater-than filter for "reqAgi" */
                "filter[reqAgi$gt]"?: number;
                /** @description Greater-than or equal filter for "reqAgi" */
                "filter[reqAgi$gte]"?: number;
                /** @description Equality filter for "reqInt" */
                "filter[reqInt]"?: number;
                /** @description Less-than filter for "reqInt" */
                "filter[reqInt$lt]"?: number;
                /** @description Less-than or equal filter for "reqInt" */
                "filter[reqInt$lte]"?: number;
                /** @description Greater-than filter for "reqInt" */
                "filter[reqInt$gt]"?: number;
                /** @description Greater-than or equal filter for "reqInt" */
                "filter[reqInt$gte]"?: number;
                /** @description Equality filter for "range" */
                "filter[range]"?: number;
                /** @description Less-than filter for "range" */
                "filter[range$lt]"?: number;
                /** @description Less-than or equal filter for "range" */
                "filter[range$lte]"?: number;
                /** @description Greater-than filter for "range" */
                "filter[range$gt]"?: number;
                /** @description Greater-than or equal filter for "range" */
                "filter[range$gte]"?: number;
                /** @description Equality filter for "atkPower" */
                "filter[atkPower]"?: number;
                /** @description Less-than filter for "atkPower" */
                "filter[atkPower$lt]"?: number;
                /** @description Less-than or equal filter for "atkPower" */
                "filter[atkPower$lte]"?: number;
                /** @description Greater-than filter for "atkPower" */
                "filter[atkPower$gt]"?: number;
                /** @description Greater-than or equal filter for "atkPower" */
                "filter[atkPower$gte]"?: number;
                /** @description Equality filter for "str" */
                "filter[str]"?: number;
                /** @description Less-than filter for "str" */
                "filter[str$lt]"?: number;
                /** @description Less-than or equal filter for "str" */
                "filter[str$lte]"?: number;
                /** @description Greater-than filter for "str" */
                "filter[str$gt]"?: number;
                /** @description Greater-than or equal filter for "str" */
                "filter[str$gte]"?: number;
                /** @description Equality filter for "sta" */
                "filter[sta]"?: number;
                /** @description Less-than filter for "sta" */
                "filter[sta$lt]"?: number;
                /** @description Less-than or equal filter for "sta" */
                "filter[sta$lte]"?: number;
                /** @description Greater-than filter for "sta" */
                "filter[sta$gt]"?: number;
                /** @description Greater-than or equal filter for "sta" */
                "filter[sta$gte]"?: number;
                /** @description Equality filter for "agi" */
                "filter[agi]"?: number;
                /** @description Less-than filter for "agi" */
                "filter[agi$lt]"?: number;
                /** @description Less-than or equal filter for "agi" */
                "filter[agi$lte]"?: number;
                /** @description Greater-than filter for "agi" */
                "filter[agi$gt]"?: number;
                /** @description Greater-than or equal filter for "agi" */
                "filter[agi$gte]"?: number;
                /** @description Equality filter for "int" */
                "filter[int]"?: number;
                /** @description Less-than filter for "int" */
                "filter[int$lt]"?: number;
                /** @description Less-than or equal filter for "int" */
                "filter[int$lte]"?: number;
                /** @description Greater-than filter for "int" */
                "filter[int$gt]"?: number;
                /** @description Greater-than or equal filter for "int" */
                "filter[int$gte]"?: number;
                /** @description Equality filter for "armor" */
                "filter[armor]"?: number;
                /** @description Less-than filter for "armor" */
                "filter[armor$lt]"?: number;
                /** @description Less-than or equal filter for "armor" */
                "filter[armor$lte]"?: number;
                /** @description Greater-than filter for "armor" */
                "filter[armor$gt]"?: number;
                /** @description Greater-than or equal filter for "armor" */
                "filter[armor$gte]"?: number;
                /** @description Equality filter for "crit" */
                "filter[crit]"?: number;
                /** @description Less-than filter for "crit" */
                "filter[crit$lt]"?: number;
                /** @description Less-than or equal filter for "crit" */
                "filter[crit$lte]"?: number;
                /** @description Greater-than filter for "crit" */
                "filter[crit$gt]"?: number;
                /** @description Greater-than or equal filter for "crit" */
                "filter[crit$gte]"?: number;
                /** @description Equality filter for "dodge" */
                "filter[dodge]"?: number;
                /** @description Less-than filter for "dodge" */
                "filter[dodge$lt]"?: number;
                /** @description Less-than or equal filter for "dodge" */
                "filter[dodge$lte]"?: number;
                /** @description Greater-than filter for "dodge" */
                "filter[dodge$gt]"?: number;
                /** @description Greater-than or equal filter for "dodge" */
                "filter[dodge$gte]"?: number;
                /** @description Equality filter for "health" */
                "filter[health]"?: number;
                /** @description Less-than filter for "health" */
                "filter[health$lt]"?: number;
                /** @description Less-than or equal filter for "health" */
                "filter[health$lte]"?: number;
                /** @description Greater-than filter for "health" */
                "filter[health$gt]"?: number;
                /** @description Greater-than or equal filter for "health" */
                "filter[health$gte]"?: number;
                /** @description Equality filter for "energy" */
                "filter[energy]"?: number;
                /** @description Less-than filter for "energy" */
                "filter[energy$lt]"?: number;
                /** @description Less-than or equal filter for "energy" */
                "filter[energy$lte]"?: number;
                /** @description Greater-than filter for "energy" */
                "filter[energy$gt]"?: number;
                /** @description Greater-than or equal filter for "energy" */
                "filter[energy$gte]"?: number;
                /** @description Equality filter for "atkSpeed" */
                "filter[atkSpeed]"?: number;
                /** @description Less-than filter for "atkSpeed" */
                "filter[atkSpeed$lt]"?: number;
                /** @description Less-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$lte]"?: number;
                /** @description Greater-than filter for "atkSpeed" */
                "filter[atkSpeed$gt]"?: number;
                /** @description Greater-than or equal filter for "atkSpeed" */
                "filter[atkSpeed$gte]"?: number;
                /** @description Equality filter for "minValue" */
                "filter[minValue]"?: number;
                /** @description Less-than filter for "minValue" */
                "filter[minValue$lt]"?: number;
                /** @description Less-than or equal filter for "minValue" */
                "filter[minValue$lte]"?: number;
                /** @description Greater-than filter for "minValue" */
                "filter[minValue$gt]"?: number;
                /** @description Greater-than or equal filter for "minValue" */
                "filter[minValue$gte]"?: number;
                /** @description Equality filter for "maxValue" */
                "filter[maxValue]"?: number;
                /** @description Less-than filter for "maxValue" */
                "filter[maxValue$lt]"?: number;
                /** @description Less-than or equal filter for "maxValue" */
                "filter[maxValue$lte]"?: number;
                /** @description Greater-than filter for "maxValue" */
                "filter[maxValue$gt]"?: number;
                /** @description Greater-than or equal filter for "maxValue" */
                "filter[maxValue$gte]"?: number;
                /** @description Equality filter for "value" */
                "filter[value]"?: number;
                /** @description Less-than filter for "value" */
                "filter[value$lt]"?: number;
                /** @description Less-than or equal filter for "value" */
                "filter[value$lte]"?: number;
                /** @description Greater-than filter for "value" */
                "filter[value$gt]"?: number;
                /** @description Greater-than or equal filter for "value" */
                "filter[value$gte]"?: number;
                /** @description Equality filter for "castCooldownTimeSec" */
                "filter[castCooldownTimeSec]"?: number;
                /** @description Less-than filter for "castCooldownTimeSec" */
                "filter[castCooldownTimeSec$lt]"?: number;
                /** @description Less-than or equal filter for "castCooldownTimeSec" */
                "filter[castCooldownTimeSec$lte]"?: number;
                /** @description Greater-than filter for "castCooldownTimeSec" */
                "filter[castCooldownTimeSec$gt]"?: number;
                /** @description Greater-than or equal filter for "castCooldownTimeSec" */
                "filter[castCooldownTimeSec$gte]"?: number;
                /** @description Equality filter for "castTimeSec" */
                "filter[castTimeSec]"?: number;
                /** @description Less-than filter for "castTimeSec" */
                "filter[castTimeSec$lt]"?: number;
                /** @description Less-than or equal filter for "castTimeSec" */
                "filter[castTimeSec$lte]"?: number;
                /** @description Greater-than filter for "castTimeSec" */
                "filter[castTimeSec$gt]"?: number;
                /** @description Greater-than or equal filter for "castTimeSec" */
                "filter[castTimeSec$gte]"?: number;
                /** @description Equality filter for "durationMins" */
                "filter[durationMins]"?: number;
                /** @description Less-than filter for "durationMins" */
                "filter[durationMins$lt]"?: number;
                /** @description Less-than or equal filter for "durationMins" */
                "filter[durationMins$lte]"?: number;
                /** @description Greater-than filter for "durationMins" */
                "filter[durationMins$gt]"?: number;
                /** @description Greater-than or equal filter for "durationMins" */
                "filter[durationMins$gte]"?: number;
                /** @description Equality filter for "energyCost" */
                "filter[energyCost]"?: number;
                /** @description Less-than filter for "energyCost" */
                "filter[energyCost$lt]"?: number;
                /** @description Less-than or equal filter for "energyCost" */
                "filter[energyCost$lte]"?: number;
                /** @description Greater-than filter for "energyCost" */
                "filter[energyCost$gt]"?: number;
                /** @description Greater-than or equal filter for "energyCost" */
                "filter[energyCost$gte]"?: number;
                /** @description Equality filter for "tickDurationSec" */
                "filter[tickDurationSec]"?: number;
                /** @description Less-than filter for "tickDurationSec" */
                "filter[tickDurationSec$lt]"?: number;
                /** @description Less-than or equal filter for "tickDurationSec" */
                "filter[tickDurationSec$lte]"?: number;
                /** @description Greater-than filter for "tickDurationSec" */
                "filter[tickDurationSec$gt]"?: number;
                /** @description Greater-than or equal filter for "tickDurationSec" */
                "filter[tickDurationSec$gte]"?: number;
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "area" */
                "filter[area]"?: string;
                /** @description Equality filter for "items" */
                "filter[items]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Skill-relationship-items-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Skill-relationship-items": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Skill-relationship-items-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "list-Faction": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "mobs" */
                "filter[mobs]"?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["FactionListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Faction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["FactionCreateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["FactionResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Faction": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["FactionResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Faction-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["FactionUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["FactionResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "delete-Faction": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Faction-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["FactionUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["FactionResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Faction-related-mobs": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "mobs" */
                "filter[mobs]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["MobListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Faction-relationship-mobs": {
        parameters: {
            query?: {
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "createdAt" */
                "filter[createdAt]"?: string;
                /** @description Less-than filter for "createdAt" */
                "filter[createdAt$lt]"?: string;
                /** @description Less-than or equal filter for "createdAt" */
                "filter[createdAt$lte]"?: string;
                /** @description Greater-than filter for "createdAt" */
                "filter[createdAt$gt]"?: string;
                /** @description Greater-than or equal filter for "createdAt" */
                "filter[createdAt$gte]"?: string;
                /** @description Equality filter for "spriteUrl" */
                "filter[spriteUrl]"?: string;
                /** @description String contains filter for "spriteUrl" */
                "filter[spriteUrl$contains]"?: string;
                /** @description String case-insensitive contains filter for "spriteUrl" */
                "filter[spriteUrl$icontains]"?: string;
                /** @description String full-text search filter for "spriteUrl" */
                "filter[spriteUrl$search]"?: string;
                /** @description String startsWith filter for "spriteUrl" */
                "filter[spriteUrl$startsWith]"?: string;
                /** @description String endsWith filter for "spriteUrl" */
                "filter[spriteUrl$endsWith]"?: string;
                /** @description Equality filter for "updatedAt" */
                "filter[updatedAt]"?: string;
                /** @description Less-than filter for "updatedAt" */
                "filter[updatedAt$lt]"?: string;
                /** @description Less-than or equal filter for "updatedAt" */
                "filter[updatedAt$lte]"?: string;
                /** @description Greater-than filter for "updatedAt" */
                "filter[updatedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "updatedAt" */
                "filter[updatedAt$gte]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "slug" */
                "filter[slug]"?: string;
                /** @description String contains filter for "slug" */
                "filter[slug$contains]"?: string;
                /** @description String case-insensitive contains filter for "slug" */
                "filter[slug$icontains]"?: string;
                /** @description String full-text search filter for "slug" */
                "filter[slug$search]"?: string;
                /** @description String startsWith filter for "slug" */
                "filter[slug$startsWith]"?: string;
                /** @description String endsWith filter for "slug" */
                "filter[slug$endsWith]"?: string;
                /** @description Equality filter for "note" */
                "filter[note]"?: string;
                /** @description String contains filter for "note" */
                "filter[note$contains]"?: string;
                /** @description String case-insensitive contains filter for "note" */
                "filter[note$icontains]"?: string;
                /** @description String full-text search filter for "note" */
                "filter[note$search]"?: string;
                /** @description String startsWith filter for "note" */
                "filter[note$startsWith]"?: string;
                /** @description String endsWith filter for "note" */
                "filter[note$endsWith]"?: string;
                /** @description Equality filter for "inGameId" */
                "filter[inGameId]"?: number;
                /** @description Less-than filter for "inGameId" */
                "filter[inGameId$lt]"?: number;
                /** @description Less-than or equal filter for "inGameId" */
                "filter[inGameId$lte]"?: number;
                /** @description Greater-than filter for "inGameId" */
                "filter[inGameId$gt]"?: number;
                /** @description Greater-than or equal filter for "inGameId" */
                "filter[inGameId$gte]"?: number;
                /** @description Equality filter for "mobs" */
                "filter[mobs]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Faction-relationship-mobs-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Faction-relationship-mobs": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Faction-relationship-mobs-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "list-Account": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "type" */
                "filter[type]"?: string;
                /** @description String contains filter for "type" */
                "filter[type$contains]"?: string;
                /** @description String case-insensitive contains filter for "type" */
                "filter[type$icontains]"?: string;
                /** @description String full-text search filter for "type" */
                "filter[type$search]"?: string;
                /** @description String startsWith filter for "type" */
                "filter[type$startsWith]"?: string;
                /** @description String endsWith filter for "type" */
                "filter[type$endsWith]"?: string;
                /** @description Equality filter for "provider" */
                "filter[provider]"?: string;
                /** @description String contains filter for "provider" */
                "filter[provider$contains]"?: string;
                /** @description String case-insensitive contains filter for "provider" */
                "filter[provider$icontains]"?: string;
                /** @description String full-text search filter for "provider" */
                "filter[provider$search]"?: string;
                /** @description String startsWith filter for "provider" */
                "filter[provider$startsWith]"?: string;
                /** @description String endsWith filter for "provider" */
                "filter[provider$endsWith]"?: string;
                /** @description Equality filter for "providerAccountId" */
                "filter[providerAccountId]"?: string;
                /** @description String contains filter for "providerAccountId" */
                "filter[providerAccountId$contains]"?: string;
                /** @description String case-insensitive contains filter for "providerAccountId" */
                "filter[providerAccountId$icontains]"?: string;
                /** @description String full-text search filter for "providerAccountId" */
                "filter[providerAccountId$search]"?: string;
                /** @description String startsWith filter for "providerAccountId" */
                "filter[providerAccountId$startsWith]"?: string;
                /** @description String endsWith filter for "providerAccountId" */
                "filter[providerAccountId$endsWith]"?: string;
                /** @description Equality filter for "refresh_token" */
                "filter[refresh_token]"?: string;
                /** @description String contains filter for "refresh_token" */
                "filter[refresh_token$contains]"?: string;
                /** @description String case-insensitive contains filter for "refresh_token" */
                "filter[refresh_token$icontains]"?: string;
                /** @description String full-text search filter for "refresh_token" */
                "filter[refresh_token$search]"?: string;
                /** @description String startsWith filter for "refresh_token" */
                "filter[refresh_token$startsWith]"?: string;
                /** @description String endsWith filter for "refresh_token" */
                "filter[refresh_token$endsWith]"?: string;
                /** @description Equality filter for "access_token" */
                "filter[access_token]"?: string;
                /** @description String contains filter for "access_token" */
                "filter[access_token$contains]"?: string;
                /** @description String case-insensitive contains filter for "access_token" */
                "filter[access_token$icontains]"?: string;
                /** @description String full-text search filter for "access_token" */
                "filter[access_token$search]"?: string;
                /** @description String startsWith filter for "access_token" */
                "filter[access_token$startsWith]"?: string;
                /** @description String endsWith filter for "access_token" */
                "filter[access_token$endsWith]"?: string;
                /** @description Equality filter for "expires_at" */
                "filter[expires_at]"?: number;
                /** @description Less-than filter for "expires_at" */
                "filter[expires_at$lt]"?: number;
                /** @description Less-than or equal filter for "expires_at" */
                "filter[expires_at$lte]"?: number;
                /** @description Greater-than filter for "expires_at" */
                "filter[expires_at$gt]"?: number;
                /** @description Greater-than or equal filter for "expires_at" */
                "filter[expires_at$gte]"?: number;
                /** @description Equality filter for "token_type" */
                "filter[token_type]"?: string;
                /** @description String contains filter for "token_type" */
                "filter[token_type$contains]"?: string;
                /** @description String case-insensitive contains filter for "token_type" */
                "filter[token_type$icontains]"?: string;
                /** @description String full-text search filter for "token_type" */
                "filter[token_type$search]"?: string;
                /** @description String startsWith filter for "token_type" */
                "filter[token_type$startsWith]"?: string;
                /** @description String endsWith filter for "token_type" */
                "filter[token_type$endsWith]"?: string;
                /** @description Equality filter for "scope" */
                "filter[scope]"?: string;
                /** @description String contains filter for "scope" */
                "filter[scope$contains]"?: string;
                /** @description String case-insensitive contains filter for "scope" */
                "filter[scope$icontains]"?: string;
                /** @description String full-text search filter for "scope" */
                "filter[scope$search]"?: string;
                /** @description String startsWith filter for "scope" */
                "filter[scope$startsWith]"?: string;
                /** @description String endsWith filter for "scope" */
                "filter[scope$endsWith]"?: string;
                /** @description Equality filter for "id_token" */
                "filter[id_token]"?: string;
                /** @description String contains filter for "id_token" */
                "filter[id_token$contains]"?: string;
                /** @description String case-insensitive contains filter for "id_token" */
                "filter[id_token$icontains]"?: string;
                /** @description String full-text search filter for "id_token" */
                "filter[id_token$search]"?: string;
                /** @description String startsWith filter for "id_token" */
                "filter[id_token$startsWith]"?: string;
                /** @description String endsWith filter for "id_token" */
                "filter[id_token$endsWith]"?: string;
                /** @description Equality filter for "session_state" */
                "filter[session_state]"?: string;
                /** @description String contains filter for "session_state" */
                "filter[session_state$contains]"?: string;
                /** @description String case-insensitive contains filter for "session_state" */
                "filter[session_state$icontains]"?: string;
                /** @description String full-text search filter for "session_state" */
                "filter[session_state$search]"?: string;
                /** @description String startsWith filter for "session_state" */
                "filter[session_state$startsWith]"?: string;
                /** @description String endsWith filter for "session_state" */
                "filter[session_state$endsWith]"?: string;
                /** @description Equality filter for "user" */
                "filter[user]"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["AccountListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["AccountCreateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["AccountResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Account": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["AccountResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Account-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["AccountUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["AccountResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "delete-Account": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Account-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["AccountUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["AccountResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Account-related-user": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Account-relationship-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Account-relationship-user-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Account-relationship-user-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "list-Session": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "sessionToken" */
                "filter[sessionToken]"?: string;
                /** @description String contains filter for "sessionToken" */
                "filter[sessionToken$contains]"?: string;
                /** @description String case-insensitive contains filter for "sessionToken" */
                "filter[sessionToken$icontains]"?: string;
                /** @description String full-text search filter for "sessionToken" */
                "filter[sessionToken$search]"?: string;
                /** @description String startsWith filter for "sessionToken" */
                "filter[sessionToken$startsWith]"?: string;
                /** @description String endsWith filter for "sessionToken" */
                "filter[sessionToken$endsWith]"?: string;
                /** @description Equality filter for "expires" */
                "filter[expires]"?: string;
                /** @description Less-than filter for "expires" */
                "filter[expires$lt]"?: string;
                /** @description Less-than or equal filter for "expires" */
                "filter[expires$lte]"?: string;
                /** @description Greater-than filter for "expires" */
                "filter[expires$gt]"?: string;
                /** @description Greater-than or equal filter for "expires" */
                "filter[expires$gte]"?: string;
                /** @description Equality filter for "user" */
                "filter[user]"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["SessionListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-Session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["SessionCreateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["SessionResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Session": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["SessionResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Session-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["SessionUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["SessionResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "delete-Session": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Session-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["SessionUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["SessionResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Session-related-user": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-Session-relationship-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Session-relationship-user-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-Session-relationship-user-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "list-User": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "email" */
                "filter[email]"?: string;
                /** @description String contains filter for "email" */
                "filter[email$contains]"?: string;
                /** @description String case-insensitive contains filter for "email" */
                "filter[email$icontains]"?: string;
                /** @description String full-text search filter for "email" */
                "filter[email$search]"?: string;
                /** @description String startsWith filter for "email" */
                "filter[email$startsWith]"?: string;
                /** @description String endsWith filter for "email" */
                "filter[email$endsWith]"?: string;
                /** @description Equality filter for "emailVerified" */
                "filter[emailVerified]"?: string;
                /** @description Less-than filter for "emailVerified" */
                "filter[emailVerified$lt]"?: string;
                /** @description Less-than or equal filter for "emailVerified" */
                "filter[emailVerified$lte]"?: string;
                /** @description Greater-than filter for "emailVerified" */
                "filter[emailVerified$gt]"?: string;
                /** @description Greater-than or equal filter for "emailVerified" */
                "filter[emailVerified$gte]"?: string;
                /** @description Equality filter for "image" */
                "filter[image]"?: string;
                /** @description String contains filter for "image" */
                "filter[image$contains]"?: string;
                /** @description String case-insensitive contains filter for "image" */
                "filter[image$icontains]"?: string;
                /** @description String full-text search filter for "image" */
                "filter[image$search]"?: string;
                /** @description String startsWith filter for "image" */
                "filter[image$startsWith]"?: string;
                /** @description String endsWith filter for "image" */
                "filter[image$endsWith]"?: string;
                /** @description Equality filter for "accounts" */
                "filter[accounts]"?: string[];
                /** @description Equality filter for "sessions" */
                "filter[sessions]"?: string[];
                /** @description Equality filter for "role" */
                "filter[role]"?: components["schemas"]["Role"];
                /** @description Equality filter for "collection" */
                "filter[collection]"?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["UserListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-User": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["UserCreateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-User": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-User-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["UserUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "delete-User": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-User-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["UserUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-User-related-accounts": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "email" */
                "filter[email]"?: string;
                /** @description String contains filter for "email" */
                "filter[email$contains]"?: string;
                /** @description String case-insensitive contains filter for "email" */
                "filter[email$icontains]"?: string;
                /** @description String full-text search filter for "email" */
                "filter[email$search]"?: string;
                /** @description String startsWith filter for "email" */
                "filter[email$startsWith]"?: string;
                /** @description String endsWith filter for "email" */
                "filter[email$endsWith]"?: string;
                /** @description Equality filter for "emailVerified" */
                "filter[emailVerified]"?: string;
                /** @description Less-than filter for "emailVerified" */
                "filter[emailVerified$lt]"?: string;
                /** @description Less-than or equal filter for "emailVerified" */
                "filter[emailVerified$lte]"?: string;
                /** @description Greater-than filter for "emailVerified" */
                "filter[emailVerified$gt]"?: string;
                /** @description Greater-than or equal filter for "emailVerified" */
                "filter[emailVerified$gte]"?: string;
                /** @description Equality filter for "image" */
                "filter[image]"?: string;
                /** @description String contains filter for "image" */
                "filter[image$contains]"?: string;
                /** @description String case-insensitive contains filter for "image" */
                "filter[image$icontains]"?: string;
                /** @description String full-text search filter for "image" */
                "filter[image$search]"?: string;
                /** @description String startsWith filter for "image" */
                "filter[image$startsWith]"?: string;
                /** @description String endsWith filter for "image" */
                "filter[image$endsWith]"?: string;
                /** @description Equality filter for "accounts" */
                "filter[accounts]"?: string[];
                /** @description Equality filter for "sessions" */
                "filter[sessions]"?: string[];
                /** @description Equality filter for "role" */
                "filter[role]"?: components["schemas"]["Role"];
                /** @description Equality filter for "collection" */
                "filter[collection]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["AccountListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-User-relationship-accounts": {
        parameters: {
            query?: {
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "email" */
                "filter[email]"?: string;
                /** @description String contains filter for "email" */
                "filter[email$contains]"?: string;
                /** @description String case-insensitive contains filter for "email" */
                "filter[email$icontains]"?: string;
                /** @description String full-text search filter for "email" */
                "filter[email$search]"?: string;
                /** @description String startsWith filter for "email" */
                "filter[email$startsWith]"?: string;
                /** @description String endsWith filter for "email" */
                "filter[email$endsWith]"?: string;
                /** @description Equality filter for "emailVerified" */
                "filter[emailVerified]"?: string;
                /** @description Less-than filter for "emailVerified" */
                "filter[emailVerified$lt]"?: string;
                /** @description Less-than or equal filter for "emailVerified" */
                "filter[emailVerified$lte]"?: string;
                /** @description Greater-than filter for "emailVerified" */
                "filter[emailVerified$gt]"?: string;
                /** @description Greater-than or equal filter for "emailVerified" */
                "filter[emailVerified$gte]"?: string;
                /** @description Equality filter for "image" */
                "filter[image]"?: string;
                /** @description String contains filter for "image" */
                "filter[image$contains]"?: string;
                /** @description String case-insensitive contains filter for "image" */
                "filter[image$icontains]"?: string;
                /** @description String full-text search filter for "image" */
                "filter[image$search]"?: string;
                /** @description String startsWith filter for "image" */
                "filter[image$startsWith]"?: string;
                /** @description String endsWith filter for "image" */
                "filter[image$endsWith]"?: string;
                /** @description Equality filter for "accounts" */
                "filter[accounts]"?: string[];
                /** @description Equality filter for "sessions" */
                "filter[sessions]"?: string[];
                /** @description Equality filter for "role" */
                "filter[role]"?: components["schemas"]["Role"];
                /** @description Equality filter for "collection" */
                "filter[collection]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-User-relationship-accounts-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-User-relationship-accounts": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-User-relationship-accounts-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-User-related-sessions": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "email" */
                "filter[email]"?: string;
                /** @description String contains filter for "email" */
                "filter[email$contains]"?: string;
                /** @description String case-insensitive contains filter for "email" */
                "filter[email$icontains]"?: string;
                /** @description String full-text search filter for "email" */
                "filter[email$search]"?: string;
                /** @description String startsWith filter for "email" */
                "filter[email$startsWith]"?: string;
                /** @description String endsWith filter for "email" */
                "filter[email$endsWith]"?: string;
                /** @description Equality filter for "emailVerified" */
                "filter[emailVerified]"?: string;
                /** @description Less-than filter for "emailVerified" */
                "filter[emailVerified$lt]"?: string;
                /** @description Less-than or equal filter for "emailVerified" */
                "filter[emailVerified$lte]"?: string;
                /** @description Greater-than filter for "emailVerified" */
                "filter[emailVerified$gt]"?: string;
                /** @description Greater-than or equal filter for "emailVerified" */
                "filter[emailVerified$gte]"?: string;
                /** @description Equality filter for "image" */
                "filter[image]"?: string;
                /** @description String contains filter for "image" */
                "filter[image$contains]"?: string;
                /** @description String case-insensitive contains filter for "image" */
                "filter[image$icontains]"?: string;
                /** @description String full-text search filter for "image" */
                "filter[image$search]"?: string;
                /** @description String startsWith filter for "image" */
                "filter[image$startsWith]"?: string;
                /** @description String endsWith filter for "image" */
                "filter[image$endsWith]"?: string;
                /** @description Equality filter for "accounts" */
                "filter[accounts]"?: string[];
                /** @description Equality filter for "sessions" */
                "filter[sessions]"?: string[];
                /** @description Equality filter for "role" */
                "filter[role]"?: components["schemas"]["Role"];
                /** @description Equality filter for "collection" */
                "filter[collection]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["SessionListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-User-relationship-sessions": {
        parameters: {
            query?: {
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "email" */
                "filter[email]"?: string;
                /** @description String contains filter for "email" */
                "filter[email$contains]"?: string;
                /** @description String case-insensitive contains filter for "email" */
                "filter[email$icontains]"?: string;
                /** @description String full-text search filter for "email" */
                "filter[email$search]"?: string;
                /** @description String startsWith filter for "email" */
                "filter[email$startsWith]"?: string;
                /** @description String endsWith filter for "email" */
                "filter[email$endsWith]"?: string;
                /** @description Equality filter for "emailVerified" */
                "filter[emailVerified]"?: string;
                /** @description Less-than filter for "emailVerified" */
                "filter[emailVerified$lt]"?: string;
                /** @description Less-than or equal filter for "emailVerified" */
                "filter[emailVerified$lte]"?: string;
                /** @description Greater-than filter for "emailVerified" */
                "filter[emailVerified$gt]"?: string;
                /** @description Greater-than or equal filter for "emailVerified" */
                "filter[emailVerified$gte]"?: string;
                /** @description Equality filter for "image" */
                "filter[image]"?: string;
                /** @description String contains filter for "image" */
                "filter[image$contains]"?: string;
                /** @description String case-insensitive contains filter for "image" */
                "filter[image$icontains]"?: string;
                /** @description String full-text search filter for "image" */
                "filter[image$search]"?: string;
                /** @description String startsWith filter for "image" */
                "filter[image$startsWith]"?: string;
                /** @description String endsWith filter for "image" */
                "filter[image$endsWith]"?: string;
                /** @description Equality filter for "accounts" */
                "filter[accounts]"?: string[];
                /** @description Equality filter for "sessions" */
                "filter[sessions]"?: string[];
                /** @description Equality filter for "role" */
                "filter[role]"?: components["schemas"]["Role"];
                /** @description Equality filter for "collection" */
                "filter[collection]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-User-relationship-sessions-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-User-relationship-sessions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-User-relationship-sessions-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-User-related-collection": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "email" */
                "filter[email]"?: string;
                /** @description String contains filter for "email" */
                "filter[email$contains]"?: string;
                /** @description String case-insensitive contains filter for "email" */
                "filter[email$icontains]"?: string;
                /** @description String full-text search filter for "email" */
                "filter[email$search]"?: string;
                /** @description String startsWith filter for "email" */
                "filter[email$startsWith]"?: string;
                /** @description String endsWith filter for "email" */
                "filter[email$endsWith]"?: string;
                /** @description Equality filter for "emailVerified" */
                "filter[emailVerified]"?: string;
                /** @description Less-than filter for "emailVerified" */
                "filter[emailVerified$lt]"?: string;
                /** @description Less-than or equal filter for "emailVerified" */
                "filter[emailVerified$lte]"?: string;
                /** @description Greater-than filter for "emailVerified" */
                "filter[emailVerified$gt]"?: string;
                /** @description Greater-than or equal filter for "emailVerified" */
                "filter[emailVerified$gte]"?: string;
                /** @description Equality filter for "image" */
                "filter[image]"?: string;
                /** @description String contains filter for "image" */
                "filter[image$contains]"?: string;
                /** @description String case-insensitive contains filter for "image" */
                "filter[image$icontains]"?: string;
                /** @description String full-text search filter for "image" */
                "filter[image$search]"?: string;
                /** @description String startsWith filter for "image" */
                "filter[image$startsWith]"?: string;
                /** @description String endsWith filter for "image" */
                "filter[image$endsWith]"?: string;
                /** @description Equality filter for "accounts" */
                "filter[accounts]"?: string[];
                /** @description Equality filter for "sessions" */
                "filter[sessions]"?: string[];
                /** @description Equality filter for "role" */
                "filter[role]"?: components["schemas"]["Role"];
                /** @description Equality filter for "collection" */
                "filter[collection]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["CollectionItemListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-User-relationship-collection": {
        parameters: {
            query?: {
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "name" */
                "filter[name]"?: string;
                /** @description String contains filter for "name" */
                "filter[name$contains]"?: string;
                /** @description String case-insensitive contains filter for "name" */
                "filter[name$icontains]"?: string;
                /** @description String full-text search filter for "name" */
                "filter[name$search]"?: string;
                /** @description String startsWith filter for "name" */
                "filter[name$startsWith]"?: string;
                /** @description String endsWith filter for "name" */
                "filter[name$endsWith]"?: string;
                /** @description Equality filter for "email" */
                "filter[email]"?: string;
                /** @description String contains filter for "email" */
                "filter[email$contains]"?: string;
                /** @description String case-insensitive contains filter for "email" */
                "filter[email$icontains]"?: string;
                /** @description String full-text search filter for "email" */
                "filter[email$search]"?: string;
                /** @description String startsWith filter for "email" */
                "filter[email$startsWith]"?: string;
                /** @description String endsWith filter for "email" */
                "filter[email$endsWith]"?: string;
                /** @description Equality filter for "emailVerified" */
                "filter[emailVerified]"?: string;
                /** @description Less-than filter for "emailVerified" */
                "filter[emailVerified$lt]"?: string;
                /** @description Less-than or equal filter for "emailVerified" */
                "filter[emailVerified$lte]"?: string;
                /** @description Greater-than filter for "emailVerified" */
                "filter[emailVerified$gt]"?: string;
                /** @description Greater-than or equal filter for "emailVerified" */
                "filter[emailVerified$gte]"?: string;
                /** @description Equality filter for "image" */
                "filter[image]"?: string;
                /** @description String contains filter for "image" */
                "filter[image$contains]"?: string;
                /** @description String case-insensitive contains filter for "image" */
                "filter[image$icontains]"?: string;
                /** @description String full-text search filter for "image" */
                "filter[image$search]"?: string;
                /** @description String startsWith filter for "image" */
                "filter[image$startsWith]"?: string;
                /** @description String endsWith filter for "image" */
                "filter[image$endsWith]"?: string;
                /** @description Equality filter for "accounts" */
                "filter[accounts]"?: string[];
                /** @description Equality filter for "sessions" */
                "filter[sessions]"?: string[];
                /** @description Equality filter for "role" */
                "filter[role]"?: components["schemas"]["Role"];
                /** @description Equality filter for "collection" */
                "filter[collection]"?: string[];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-User-relationship-collection-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-User-relationship-collection": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-User-relationship-collection-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toManyRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toManyRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "list-VerificationToken": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Equality filter for "identifier" */
                "filter[identifier]"?: string;
                /** @description String contains filter for "identifier" */
                "filter[identifier$contains]"?: string;
                /** @description String case-insensitive contains filter for "identifier" */
                "filter[identifier$icontains]"?: string;
                /** @description String full-text search filter for "identifier" */
                "filter[identifier$search]"?: string;
                /** @description String startsWith filter for "identifier" */
                "filter[identifier$startsWith]"?: string;
                /** @description String endsWith filter for "identifier" */
                "filter[identifier$endsWith]"?: string;
                /** @description Id filter */
                "filter[id]"?: string;
                /** @description Equality filter for "expires" */
                "filter[expires]"?: string;
                /** @description Less-than filter for "expires" */
                "filter[expires$lt]"?: string;
                /** @description Less-than or equal filter for "expires" */
                "filter[expires$lte]"?: string;
                /** @description Greater-than filter for "expires" */
                "filter[expires$gt]"?: string;
                /** @description Greater-than or equal filter for "expires" */
                "filter[expires$gte]"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["VerificationTokenListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-VerificationToken": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["VerificationTokenCreateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["VerificationTokenResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-VerificationToken": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["VerificationTokenResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-VerificationToken-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["VerificationTokenUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["VerificationTokenResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "delete-VerificationToken": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-VerificationToken-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["VerificationTokenUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["VerificationTokenResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "list-CollectionItem": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
                /** @description Fields to sort by */
                sort?: components["parameters"]["sort"];
                /** @description Offset for pagination */
                "page[offset]"?: components["parameters"]["page-offset"];
                /** @description Limit for pagination */
                "page[limit]"?: components["parameters"]["page-limit"];
                /** @description Equality filter for "addedAt" */
                "filter[addedAt]"?: string;
                /** @description Less-than filter for "addedAt" */
                "filter[addedAt$lt]"?: string;
                /** @description Less-than or equal filter for "addedAt" */
                "filter[addedAt$lte]"?: string;
                /** @description Greater-than filter for "addedAt" */
                "filter[addedAt$gt]"?: string;
                /** @description Greater-than or equal filter for "addedAt" */
                "filter[addedAt$gte]"?: string;
                /** @description Equality filter for "quantity" */
                "filter[quantity]"?: number;
                /** @description Less-than filter for "quantity" */
                "filter[quantity$lt]"?: number;
                /** @description Less-than or equal filter for "quantity" */
                "filter[quantity$lte]"?: number;
                /** @description Greater-than filter for "quantity" */
                "filter[quantity$gt]"?: number;
                /** @description Greater-than or equal filter for "quantity" */
                "filter[quantity$gte]"?: number;
                /** @description Equality filter for "user" */
                "filter[user]"?: string;
                /** @description Equality filter for "item" */
                "filter[item]"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["CollectionItemListResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "create-CollectionItem": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["CollectionItemCreateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["CollectionItemResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-CollectionItem": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["CollectionItemResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-CollectionItem-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["CollectionItemUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["CollectionItemResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "delete-CollectionItem": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-CollectionItem-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["CollectionItemUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["CollectionItemResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-CollectionItem-related-user": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-CollectionItem-relationship-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-CollectionItem-relationship-user-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-CollectionItem-relationship-user-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-CollectionItem-related-item": {
        parameters: {
            query?: {
                /** @description Relationships to include */
                include?: components["parameters"]["include"];
            };
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["ItemResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "fetch-CollectionItem-relationship-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-CollectionItem-relationship-item-put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
    "update-CollectionItem-relationship-item-patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["_toOneRelationshipRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_toOneRelationshipResponse"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
            /** @description Resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["_errorResponse"];
                };
            };
        };
    };
}
