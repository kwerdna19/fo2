// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Mob {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name String @unique()
    slug String @unique()
    desc String?
    note String?
    level Int
    health Int
    goldMin Int
    goldMax Int
    spriteUrl String
    boss Boolean @default(false)
    drops Loot[]
    locations Location[]
    atkSpeed Float?
    dmgMin Int?
    dmgMax Int?
}

// type Enum TBD
model Npc {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name String
    slug String @unique()
    note String?
    type String
    spriteUrl String
    items NpcSale[]
    locations Location[]
}

model NpcSale {

  npc       Npc     @relation(fields: [npcId], references: [id])
  npcId     String
  item       Item     @relation(fields: [itemId], references: [id])
  itemId     String
  
  price   Int

  @@unique([npcId, itemId])
}

model Loot {
  mob       Mob     @relation(fields: [mobId], references: [id])
  mobId     String
  item       Item     @relation(fields: [itemId], references: [id])
  itemId     String
  
  dropRate   Float?

  @@id([mobId, itemId])
}

enum Slot {
  HEAD
  FACE
  BACK
  SHOULDERS
  CHEST
  LEGS
  LEFT_RING
  RIGHT_RING
  MAIN_HAND
  LEFT_TRINKET
  RIGHT_TRINKET
  OFFHAND
  GUILD
}

enum EquippableType {
  HEAD
  FACE
  BACK
  SHOULDERS
  CHEST
  LEGS
  RING // LEFT/RIGHT
  MAIN_HAND
  TRINKET // LEFT/RIGHT
  OFFHAND
  GUILD
}
model Item {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String @unique()
    slug      String @unique()
    desc      String?
    note      String?
    spriteUrl String
    equip     EquippableType?
    levelReq  Int?
    twoHand   Boolean?
    consumable Boolean @default(false)
    sellPrice Int?
    stackSize Int @default(1)
    droppedBy Loot[]
    soldBy    NpcSale[]
    // for items that provide a skill
    skillId  String?
    skillInfo Skill? @relation(fields: [skillId], references: [id])
    
    // stats - for equipable
    range Int? // for now 0 and 1
    str Int?
    sta Int?
    agi Int?
    int Int?
    armor Int?
    atkSpeed Float?
    dmgMin Int?
    dmgMax Int?
}

model Location {
  id        String   @id @default(cuid())
  area       Area     @relation(fields: [areaId], references: [id])
  areaId     String
  x     Int
  y     Int
  npc   Npc?   @relation(fields: [npcId], references: [id])
  npcId     String?
  mob   Mob?   @relation(fields: [mobId], references: [id])
  mobId     String?

  @@unique([areaId, npcId])
  @@unique([areaId, mobId])
}

model Area {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  spriteUrl String
  updatedAt DateTime @updatedAt
  name      String @unique()
  slug      String @unique()
  note      String?
  height    Int
  width     Int
  locations Location[]
  region    Int
  originXGlobal Int
  originYGlobal Int
}

// type enum
model Skill {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    slug      String @unique()
    rank      Int
    desc      String?
    note      String?
    spriteUrl String
    type      String?
    levelReq  Int @default(0)
    items     Item[]
    @@unique([name, rank])
}