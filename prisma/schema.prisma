generator client {
  provider = "prisma-client-js"
}

generator jsonSchema {
  provider                 = "prisma-json-schema-generator"
  output                   = "../src/server/db"
  includeRequiredFields    = "true"
  keepRelationFields       = "true"
  persistOriginalType      = "true"
  keepRelationScalarFields = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Mob {
  id         Int     @id
  name       String
  desc       String?
  level      Int
  health     Int
  goldMin    Int
  goldMax    Int
  atkSpeed   Int
  dmgMin     Int
  dmgMax     Int
  moveSpeed  Int
  spriteName String
  factionId  Int
  factionXp  Int
  drops      Loot[]

  // meta
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt
  definitionUpdatedAt DateTime @default(now())

  // extra
  note         String?
  artist       String?
  numSpawns    Int?
  spawnTimeSec Int?
  locations    Location[]
  faction      Faction    @relation(fields: [factionId], references: [id])
}

model Npc {
  id Int @id @default(autoincrement()) // != in game id

  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  name       String
  spriteName String

  note String?
  type String

  selling   Item[]
  crafts    Craft[]
  locations Location[]

  // for npcs that TP to area
  areaId Int?
  area   Area? @relation(name: "teleport-npcs", fields: [areaId], references: [id])
}

enum Unit {
  GEMS
  COINS
}

model Craft {
  id Int @id @default(autoincrement())

  // npc
  npc    Npc  @relation(fields: [npcId], references: [id], onDelete: Cascade)
  npcId  Int
  // output item
  item   Item @relation(fields: [itemId], references: [id])
  itemId Int

  price           Int
  unit            Unit @default(COINS)
  durationMinutes Int

  items CraftItem[]

  @@unique([npcId, itemId])
}

model CraftItem {
  item     Item @relation(fields: [itemId], references: [id])
  itemId   Int
  quantity Int  @default(1)

  craftId Int
  craft   Craft @relation(fields: [craftId], references: [id])

  @@unique([craftId, itemId])
}

model BattlePass {
  itemId Int  @id
  item   Item @relation(fields: [itemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  durationDays Int?
  xpPerTier    Int?
  note         String?

  tiers BattlePassTier[]
}

model BattlePassTier {
  battlePass   BattlePass @relation(fields: [battlePassId], references: [itemId], onDelete: Cascade)
  battlePassId Int
  tier         Int

  item   Item? @relation(fields: [itemId], references: [id])
  itemId Int?

  amount Int?
  unit   Unit?

  @@unique([battlePassId, tier])
}

model Loot {
  mob    Mob  @relation(fields: [mobId], references: [id])
  mobId  Int
  item   Item @relation(fields: [itemId], references: [id])
  itemId Int

  dropRate Float
  count    Int   @default(1)

  @@id([mobId, itemId])
}

enum Stat {
  STR
  AGI
  STA
  INT
}

model Item {
  id Int @id

  name     String
  desc     String?
  note     String?
  levelReq Int

  tier     Int?
  tierStat Stat?

  type       Int
  subType    Int
  spriteName String

  typeSpecificValue Float?

  sellPrice     Int
  sellPriceUnit Unit
  buyPrice      Int
  buyPriceUnit  Unit

  stackSize Int  @default(1)
  bagSize   Int?

  boxItems Item[] @relation("box")

  reqStr   Int?
  reqSta   Int?
  reqAgi   Int?
  reqInt   Int?
  range    Int?
  str      Int?
  sta      Int?
  agi      Int?
  int      Int?
  armor    Int?
  atkSpeed Float?
  dmgMin   Int?
  dmgMax   Int?
  luck     Int?

  // meta
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt
  definitionUpdatedAt DateTime @default(now())

  // other
  artist             String?
  globalLoot         Boolean?
  globalLootDropRate Int?

  droppedBy       Loot[]
  soldBy          Npc[]
  crafts          Craft[]
  collections     CollectionItem[]
  usages          CraftItem[]
  battlePassTiers BattlePassTier[]
  battlePass      BattlePass?
  skillId         Int?
  skillInfo       Skill?           @relation(fields: [skillId], references: [id])
  areaId          Int?
  area            Area?            @relation(name: "teleport-items", fields: [areaId], references: [id])
  boxId           Int?
  box             Item?            @relation("box", fields: [boxId], references: [id])
}

model Location {
  id     String @id @default(cuid())
  area   Area   @relation(fields: [areaId], references: [id])
  areaId Int
  x      Int
  y      Int

  npc   Npc? @relation(fields: [npcId], references: [id])
  npcId Int?
  mob   Mob? @relation(fields: [mobId], references: [id])
  mobId Int?

  connectedArea   Area? @relation(name: "portals", fields: [connectedAreaId], references: [id])
  connectedAreaId Int?

  @@unique([areaId, x, y, npcId])
  @@unique([areaId, x, y, mobId])
  @@unique([areaId, x, y, connectedAreaId])
}

model Area {
  id                  Int        @id @default(autoincrement())
  createdAt           DateTime   @default(now())
  spriteUrl           String?
  updatedAt           DateTime   @default(now()) @updatedAt
  definitionUpdatedAt DateTime   @default(now())
  name                String
  desc                String?
  note                String?
  height              Int
  width               Int
  locations           Location[]
  globalX             Int
  globalY             Int
  globalZ             Int

  spawnX Int
  spawnY Int

  portals Location[] @relation(name: "portals")

  items  Item[]  @relation(name: "teleport-items")
  skills Skill[] @relation(name: "teleport-skills")
  npcs   Npc[]   @relation(name: "teleport-npcs")
}

enum SkillType {
  HEAL
  DAMAGE
  STAT_BUFF
  ENERGY_REGEN
  HEALTH_REGEN
  TELEPORT
}

model Skill {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  name       String
  rank       Int
  desc       String?
  note       String?
  spriteName String
  type       SkillType
  levelReq   Int       @default(0)

  reqStr Int?
  reqSta Int?
  reqAgi Int?
  reqInt Int?

  // stats - for stat bonuses
  range    Int?
  atkPower Int?
  str      Int?
  sta      Int?
  agi      Int?
  int      Int?
  armor    Int?
  crit     Float?
  dodge    Float?
  health   Int?
  energy   Int?

  atkSpeed Float?

  minValue Int?
  maxValue Int?
  value    Int?

  castCooldownTimeSec Int?
  castTimeSec         Int?
  durationMins        Int?
  energyCost          Int?
  tickDurationSec     Int?

  // for skills that TP to area
  areaId Int?
  area   Area? @relation(name: "teleport-skills", fields: [areaId], references: [id])

  items Item[]

  @@unique([name, rank])
}

model Faction {
  id        Int      @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  spriteUrl String?
  name      String
  note      String?

  mobs Mob[]
}

// User tables for Next Auth

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)

  username String @unique @default(cuid())

  art        Art[]
  artVotes   ArtVote[]
  collection CollectionItem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// custom

enum Role {
  USER
  MODERATOR
  ADMIN
}

model CollectionItem {
  addedAt DateTime @default(now())

  quantity Int @default(1)

  userId String
  user   User   @relation(fields: [userId], references: [id])
  itemId Int
  item   Item   @relation(fields: [itemId], references: [id])

  @@unique([userId, itemId])
}

model ScrapeInfo {
  type        String   @id
  lastScraped DateTime @default(now())
}

// more models to come
// group art together, etc
model Art {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  type String // SpriteType?

  spriteSheetUrl String
  iconUrl        String?

  name String
  desc String?

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id])

  votes ArtVote[]
}

model ArtVote {
  artId Int
  art   Art @relation(fields: [artId], references: [id])

  voterId String
  voter   User   @relation(fields: [voterId], references: [id])

  upvote Boolean @default(true) // true = 1, false = -1
  vote   Int     @default(1) // upvote = 1, downvote = -1

  @@unique([artId, voterId])
}
